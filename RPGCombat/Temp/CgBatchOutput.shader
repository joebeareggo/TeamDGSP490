/* Code provided by Chris Morris of Six Times Nothing (http://www.sixtimesnothing.com) */
/* Free to use and modify  */


Shader "Hidden/TerrainEngine/Splatmap/Lightmap-FirstPass" {
Properties {
	_Control ("Control (RGBA)", 2D) = "red" {}
	_Splat3 ("Layer 3 (A)", 2D) = "white" {}
	_Splat2 ("Layer 2 (B)", 2D) = "white" {}
	_Splat1 ("Layer 1 (G)", 2D) = "white" {}
	_Splat0 ("Layer 0 (R)", 2D) = "white" {}
	// used in fallback on old cards
	_MainTex ("BaseMap (RGB)", 2D) = "white" {}
	_Color ("Main Color", Color) = (1,1,1,1)
	_SpecColor ("Specular Color", Color) = (0.5, 0.5, 0.5, 1)
}

SubShader {
	Tags {
		"SplatCount" = "4"
		"Queue" = "Geometry-100"
		"RenderType" = "Opaque"
	}
	
	Pass {
		Name "FORWARD"
		Tags { "LightMode" = "ForwardBase" }
Program "vp" {
// Vertex combos: 12
//   opengl - ALU: 17 to 97
//   d3d9 - ALU: 24 to 99, FLOW: 2 to 2
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_WorldSpaceLightPos0]
Vector 15 [unity_SHAr]
Vector 16 [unity_SHAg]
Vector 17 [unity_SHAb]
Vector 18 [unity_SHBr]
Vector 19 [unity_SHBg]
Vector 20 [unity_SHBb]
Vector 21 [unity_SHC]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 22 [unity_Scale]
Vector 23 [_Control_ST]
Vector 24 [_Splat0_ST]
Vector 25 [_Splat1_ST]
Vector 26 [_Splat2_ST]
Vector 27 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 62 ALU
PARAM c[28] = { { 0, 1, 2, -1 },
		state.matrix.mvp,
		program.local[5..27] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0.xyz, -vertex.normal.yzxw, c[0].yyxw;
MAD R0.xyz, vertex.normal.zxyw, c[0].xyyw, R0;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R2.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R1.xyz, vertex.normal.zxyw, R2.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R2.zxyw, -R1;
DP3 R0.x, R0, R1;
SLT R0.x, R0, c[0];
ABS R0.x, R0;
SGE R0.x, c[0], R0;
MAD R1.w, R0.x, c[0].z, c[0];
MUL R3.xyz, R1.w, R1;
MOV R0, c[14];
MUL R4.xyz, vertex.normal, c[22].w;
DP4 R1.z, R0, c[11];
DP4 R1.y, R0, c[10];
DP4 R1.x, R0, c[9];
DP3 R1.w, R4, c[6];
DP3 R0.x, R4, c[5];
DP3 R0.z, R4, c[7];
MOV R0.y, R1.w;
MUL R4, R0.xyzz, R0.yzzx;
MOV R0.w, c[0].y;
DP4 R5.z, R0, c[17];
DP4 R5.y, R0, c[16];
DP4 R5.x, R0, c[15];
MUL R0.y, R1.w, R1.w;
MOV R0.w, c[0].y;
DP3 result.texcoord[4].y, R1, R3;
DP4 R6.z, R4, c[20];
DP4 R6.y, R4, c[19];
DP4 R6.x, R4, c[18];
ADD R4.xyz, R5, R6;
MAD R0.x, R0, R0, -R0.y;
MUL R5.xyz, R0.x, c[21];
MOV R0.xyz, c[13];
DP4 R6.z, R0, c[11];
DP4 R6.x, R0, c[9];
DP4 R6.y, R0, c[10];
MAD R0.xyz, R6, c[22].w, -vertex.position;
DP3 result.texcoord[6].y, R3, R0;
DP4 R3.z, vertex.position, c[7];
DP4 R3.x, vertex.position, c[5];
DP4 R3.y, vertex.position, c[6];
ADD R3.xyz, R3, -c[13];
DP3 R0.w, R3, R3;
RSQ R0.w, R0.w;
ADD result.texcoord[5].xyz, R4, R5;
DP3 result.texcoord[4].x, R1, R2;
DP3 result.texcoord[6].x, R2, R0;
DP3 result.texcoord[4].z, vertex.normal, R1;
DP3 result.texcoord[6].z, vertex.normal, R0;
RCP result.texcoord[3].x, R0.w;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[24].xyxy, c[24];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[23], c[23].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[26].xyxy, c[26];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[25], c[25].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[27], c[27].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 62 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [unity_SHAr]
Vector 15 [unity_SHAg]
Vector 16 [unity_SHAb]
Vector 17 [unity_SHBr]
Vector 18 [unity_SHBg]
Vector 19 [unity_SHBb]
Vector 20 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 21 [unity_Scale]
Vector 22 [_Control_ST]
Vector 23 [_Splat0_ST]
Vector 24 [_Splat1_ST]
Vector 25 [_Splat2_ST]
Vector 26 [_Splat3_ST]
"vs_3_0
; 64 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c27, 1.00000000, 0.00000000, -1.00000000, 0
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
mul r0.xyz, -v2.yzxw, c27.xxyw
mad r0.xyz, v2.zxyw, c27.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r2.xyz, v2.yzxw, r0.zxyw, -r1
mul r1.xyz, r2.yzxw, v2.zxyw
mad r1.xyz, r2.zxyw, v2.yzxw, -r1
dp3 r0.x, r0, r1
if_lt r0.x, c27.y
mov r2.w, c27.z
else
mov r2.w, c27.x
endif
mul r1.xyz, v2, c21.w
dp3 r3.w, r1, c5
dp3 r0.x, r1, c4
dp3 r0.z, r1, c6
mov r0.y, r3.w
mov r0.w, c27.x
mul r1, r0.xyzz, r0.yzzx
dp4 r3.z, r0, c16
dp4 r3.y, r0, c15
dp4 r3.x, r0, c14
mul r0.w, r3, r3
mad r0.w, r0.x, r0.x, -r0
dp4 r0.z, r1, c19
dp4 r0.y, r1, c18
dp4 r0.x, r1, c17
mul r1.xyz, r0.w, c20
add r0.xyz, r3, r0
add o6.xyz, r0, r1
mov r0.w, c27.x
mov r0.xyz, c12
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r4.xyz, r1, c21.w, -v0
mul r0.xyz, v2.zxyw, r2.yzxw
mad r1.xyz, v2.yzxw, r2.zxyw, -r0
mul r3.xyz, r1, r2.w
mov r0, c10
dp4 r5.z, c13, r0
mov r0, c9
dp4 r5.y, c13, r0
mov r1, c8
dp4 r5.x, c13, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, r0, -c12
dp3 r0.x, r0, r0
rsq r0.x, r0.x
dp3 o5.y, r5, r3
dp3 o7.y, r3, r4
dp3 o5.z, v2, r5
dp3 o5.x, r5, r2
dp3 o7.z, v2, r4
dp3 o7.x, r2, r4
rcp o4.x, r0.x
mad o1.zw, v3.xyxy, c23.xyxy, c23
mad o1.xy, v3, c22, c22.zwzw
mad o2.zw, v3.xyxy, c25.xyxy, c25
mad o2.xy, v3, c24, c24.zwzw
mad o3.xy, v3, c26, c26.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = tmpvar_1.w;
  highp vec3 tmpvar_9;
  tmpvar_9 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx));
  tmpvar_8.xyz = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)), tmpvar_9);
  if ((tmpvar_11 < 0.0)) {
    tmpvar_8.w = -1.0;
  } else {
    tmpvar_8.w = 1.0;
  };
  highp vec3 p_12;
  p_12 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  mat3 tmpvar_13;
  tmpvar_13[0] = _Object2World[0].xyz;
  tmpvar_13[1] = _Object2World[1].xyz;
  tmpvar_13[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_8.xyz;
  tmpvar_15 = (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)) * tmpvar_8.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_14.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_2.x;
  tmpvar_16[1].x = tmpvar_14.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_2.y;
  tmpvar_16[2].x = tmpvar_14.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_2.z;
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_6 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = (tmpvar_13 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_20;
  mediump vec4 normal_21;
  normal_21 = tmpvar_19;
  highp float vC_22;
  mediump vec3 x3_23;
  mediump vec3 x2_24;
  mediump vec3 x1_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHAr, normal_21);
  x1_25.x = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHAg, normal_21);
  x1_25.y = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (unity_SHAb, normal_21);
  x1_25.z = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normal_21.xyzz * normal_21.yzzx);
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHBr, tmpvar_29);
  x2_24.x = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHBg, tmpvar_29);
  x2_24.y = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = dot (unity_SHBb, tmpvar_29);
  x2_24.z = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y));
  vC_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = (unity_SHC.xyz * vC_22);
  x3_23 = tmpvar_34;
  tmpvar_20 = ((x1_25 + x2_24) + x3_23);
  shlight_3 = tmpvar_20;
  tmpvar_7 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_12, p_12));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (tmpvar_16 * (((_World2Object * tmpvar_18).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_9 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_8 = tmpvar_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, P_30).xyz * 2.0) - 1.0);
  normalsplat2_2nd_7 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_6 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_5 = tmpvar_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp vec4 c_44;
  lowp float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD4));
  highp vec3 tmpvar_46;
  tmpvar_46 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_45) * 2.0);
  c_44.xyz = tmpvar_46;
  c_44.w = 0.0;
  c_1.w = c_44.w;
  c_1.xyz = (c_44.xyz + (tmpvar_3 * xlv_TEXCOORD5));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = tmpvar_1.w;
  highp vec3 tmpvar_9;
  tmpvar_9 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx));
  tmpvar_8.xyz = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)), tmpvar_9);
  if ((tmpvar_11 < 0.0)) {
    tmpvar_8.w = -1.0;
  } else {
    tmpvar_8.w = 1.0;
  };
  highp vec3 p_12;
  p_12 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  mat3 tmpvar_13;
  tmpvar_13[0] = _Object2World[0].xyz;
  tmpvar_13[1] = _Object2World[1].xyz;
  tmpvar_13[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_8.xyz;
  tmpvar_15 = (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)) * tmpvar_8.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_14.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_2.x;
  tmpvar_16[1].x = tmpvar_14.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_2.y;
  tmpvar_16[2].x = tmpvar_14.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_2.z;
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_6 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = (tmpvar_13 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_20;
  mediump vec4 normal_21;
  normal_21 = tmpvar_19;
  highp float vC_22;
  mediump vec3 x3_23;
  mediump vec3 x2_24;
  mediump vec3 x1_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHAr, normal_21);
  x1_25.x = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHAg, normal_21);
  x1_25.y = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (unity_SHAb, normal_21);
  x1_25.z = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normal_21.xyzz * normal_21.yzzx);
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHBr, tmpvar_29);
  x2_24.x = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHBg, tmpvar_29);
  x2_24.y = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = dot (unity_SHBb, tmpvar_29);
  x2_24.z = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y));
  vC_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = (unity_SHC.xyz * vC_22);
  x3_23 = tmpvar_34;
  tmpvar_20 = ((x1_25 + x2_24) + x3_23);
  shlight_3 = tmpvar_20;
  tmpvar_7 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_12, p_12));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (tmpvar_16 * (((_World2Object * tmpvar_18).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 normal_27;
  normal_27.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_27.z = sqrt((1.0 - clamp (dot (normal_27.xy, normal_27.xy), 0.0, 1.0)));
  normalsplat0_10 = normal_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  normalsplat1_9 = normal_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat2_8 = normal_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_31;
  normal_31.xy = ((texture2D (_BumpMap2, P_30).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  normalsplat2_2nd_7 = normal_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat3_6 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  farnormal_5 = normal_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp vec4 c_44;
  lowp float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD4));
  highp vec3 tmpvar_46;
  tmpvar_46 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_45) * 2.0);
  c_44.xyz = tmpvar_46;
  c_44.w = 0.0;
  c_1.w = c_44.w;
  c_1.xyz = (c_44.xyz + (tmpvar_3 * xlv_TEXCOORD5));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 475
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 479
uniform highp vec4 _Splat3_ST;
#line 504
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 402
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 406
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 411
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 480
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 483
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 487
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    #line 491
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 495
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 499
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 475
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 479
uniform highp vec4 _Splat3_ST;
#line 504
#line 360
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 364
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 368
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 422
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 424
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 428
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 432
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 436
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 441
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 445
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 449
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 453
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 457
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 461
    o.Alpha = 0.0;
}
#line 504
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    #line 508
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    #line 512
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 516
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    #line 520
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    #line 524
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Vector 13 [_WorldSpaceCameraPos]
Matrix 5 [_Object2World]
Vector 15 [unity_LightmapST]
Vector 16 [_Control_ST]
Vector 17 [_Splat0_ST]
Vector 18 [_Splat1_ST]
Vector 19 [_Splat2_ST]
Vector 20 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 17 ALU
PARAM c[21] = { program.local[0],
		state.matrix.mvp,
		program.local[5..20] };
TEMP R0;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
ADD R0.xyz, R0, -c[13];
DP3 R0.x, R0, R0;
RSQ R0.x, R0.x;
RCP result.texcoord[3].x, R0.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[17].xyxy, c[17];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[16], c[16].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[19].xyxy, c[19];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[18], c[18].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[20], c[20].zwzw;
MAD result.texcoord[4].xy, vertex.texcoord[1], c[15], c[15].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 17 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Vector 13 [unity_LightmapST]
Vector 14 [_Control_ST]
Vector 15 [_Splat0_ST]
Vector 16 [_Splat1_ST]
Vector 17 [_Splat2_ST]
Vector 18 [_Splat3_ST]
"vs_3_0
; 24 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
def c19, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mul r0.xyz, -v2.yzxw, c19.xxyw
mad r0.xyz, v2.zxyw, c19.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, v2.zxyw, r1.yzxw
mad r1.xyz, v2.yzxw, r1.zxyw, -r2
dp3 r0.x, r1, r0
if_lt r0.x, c19.y
else
endif
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, r0, -c12
dp3 r0.x, r0, r0
rsq r0.x, r0.x
rcp o4.x, r0.x
mad o1.zw, v3.xyxy, c15.xyxy, c15
mad o1.xy, v3, c14, c14.zwzw
mad o2.zw, v3.xyxy, c17.xyxy, c17
mad o2.xy, v3, c16, c16.zwzw
mad o3.xy, v3, c18, c18.zwzw
mad o5.xy, v4, c13, c13.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 p_3;
  p_3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_Lightmap;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_9 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_8 = tmpvar_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, P_30).xyz * 2.0) - 1.0);
  normalsplat2_2nd_7 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_6 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_5 = tmpvar_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  c_1.xyz = (tmpvar_3 * (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD4).xyz));
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 p_3;
  p_3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_Lightmap;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 normal_27;
  normal_27.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_27.z = sqrt((1.0 - clamp (dot (normal_27.xy, normal_27.xy), 0.0, 1.0)));
  normalsplat0_10 = normal_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  normalsplat1_9 = normal_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat2_8 = normal_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_31;
  normal_31.xy = ((texture2D (_BumpMap2, P_30).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  normalsplat2_2nd_7 = normal_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat3_6 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  farnormal_5 = normal_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (unity_Lightmap, xlv_TEXCOORD4);
  c_1.xyz = (tmpvar_3 * ((8.0 * tmpvar_44.w) * tmpvar_44.xyz));
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec2 lmap;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 473
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 477
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
uniform sampler2D unity_Lightmap;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 402
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 406
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 411
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 479
v2f_surf vert_surf( in appdata_full v ) {
    #line 481
    v2f_surf o;
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    #line 485
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    #line 489
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 493
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 497
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out highp vec2 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec2(xl_retval.lmap);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec2 lmap;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 473
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 477
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
uniform sampler2D unity_Lightmap;
#line 177
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 179
    return (2.0 * color.xyz);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 422
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 424
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 428
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 432
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 436
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 441
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 445
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 449
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 453
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 457
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 461
    o.Alpha = 0.0;
}
#line 500
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 502
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    #line 506
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    #line 510
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 514
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    #line 518
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec3 lm = DecodeLightmap( lmtex);
    c.xyz += (o.Albedo * lm);
    c.w = o.Alpha;
    #line 522
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in highp vec2 xlv_TEXCOORD4;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lmap = vec2(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Vector 13 [_WorldSpaceCameraPos]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 15 [unity_Scale]
Vector 16 [unity_LightmapST]
Vector 17 [_Control_ST]
Vector 18 [_Splat0_ST]
Vector 19 [_Splat1_ST]
Vector 20 [_Splat2_ST]
Vector 21 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 38 ALU
PARAM c[22] = { { 1, 0, 2, -1 },
		state.matrix.mvp,
		program.local[5..21] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0.xyz, -vertex.normal.yzxw, c[0].xxyw;
MAD R0.xyz, vertex.normal.zxyw, c[0].yxxw, R0;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R2.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R1.xyz, vertex.normal.zxyw, R2.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R2.zxyw, -R1;
DP3 R0.x, R0, R1;
SLT R0.x, R0, c[0].y;
ABS R0.x, R0;
SGE R0.x, c[0].y, R0;
MAD R0.x, R0, c[0].z, c[0].w;
MUL R3.xyz, R0.x, R1;
MOV R0.xyz, c[13];
MOV R0.w, c[0].x;
DP4 R1.z, R0, c[11];
DP4 R1.x, R0, c[9];
DP4 R1.y, R0, c[10];
MAD R1.xyz, R1, c[15].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
ADD R0.xyz, R0, -c[13];
DP3 R0.x, R0, R0;
RSQ R0.x, R0.x;
DP3 result.texcoord[5].y, R1, R3;
DP3 result.texcoord[5].x, R1, R2;
DP3 result.texcoord[5].z, vertex.normal, R1;
RCP result.texcoord[3].x, R0.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[18].xyxy, c[18];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[17], c[17].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[20].xyxy, c[20];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[19], c[19].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[21], c[21].zwzw;
MAD result.texcoord[4].xy, vertex.texcoord[1], c[16], c[16].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 38 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 13 [unity_Scale]
Vector 14 [unity_LightmapST]
Vector 15 [_Control_ST]
Vector 16 [_Splat0_ST]
Vector 17 [_Splat1_ST]
Vector 18 [_Splat2_ST]
Vector 19 [_Splat3_ST]
"vs_3_0
; 38 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c20, 1.00000000, 0.00000000, -1.00000000, 0
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mul r0.xyz, -v2.yzxw, c20.xxyw
mad r0.xyz, v2.zxyw, c20.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1.yzxw, v2.zxyw
mad r2.xyz, r1.zxyw, v2.yzxw, -r2
dp3 r0.x, r0, r2
if_lt r0.x, c20.y
mov r0.w, c20.z
else
mov r0.w, c20.x
endif
mul r0.xyz, v2.zxyw, r1.yzxw
mad r0.xyz, v2.yzxw, r1.zxyw, -r0
mov r2.xyz, c12
mov r2.w, c20.x
dp4 r3.z, r2, c10
dp4 r3.x, r2, c8
dp4 r3.y, r2, c9
mad r2.xyz, r3, c13.w, -v0
mul r3.xyz, r0, r0.w
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, r0, -c12
dp3 r0.x, r0, r0
rsq r0.x, r0.x
dp3 o6.y, r2, r3
dp3 o6.z, v2, r2
dp3 o6.x, r2, r1
rcp o4.x, r0.x
mad o1.zw, v3.xyxy, c16.xyxy, c16
mad o1.xy, v3, c15, c15.zwzw
mad o2.zw, v3.xyxy, c18.xyxy, c18
mad o2.xy, v3, c17, c17.zwzw
mad o3.xy, v3, c19, c19.zwzw
mad o5.xy, v4, c14, c14.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = tmpvar_1.w;
  highp vec3 tmpvar_6;
  tmpvar_6 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_7;
  tmpvar_7 = ((tmpvar_2.yzx * tmpvar_6.zxy) - (tmpvar_2.zxy * tmpvar_6.yzx));
  tmpvar_5.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = dot (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)), tmpvar_6);
  if ((tmpvar_8 < 0.0)) {
    tmpvar_5.w = -1.0;
  } else {
    tmpvar_5.w = 1.0;
  };
  highp vec3 p_9;
  p_9 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_5.xyz;
  tmpvar_11 = (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)) * tmpvar_5.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_2.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_2.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_2.z;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_9, p_9));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = (tmpvar_12 * (((_World2Object * tmpvar_13).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_9 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_8 = tmpvar_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, P_30).xyz * 2.0) - 1.0);
  normalsplat2_2nd_7 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_6 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_5 = tmpvar_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(xlv_TEXCOORD5);
  mediump vec4 tmpvar_45;
  mediump vec3 viewDir_46;
  viewDir_46 = tmpvar_44;
  highp float nh_47;
  mat3 tmpvar_48;
  tmpvar_48[0].x = 0.816497;
  tmpvar_48[0].y = -0.408248;
  tmpvar_48[0].z = -0.408248;
  tmpvar_48[1].x = 0.0;
  tmpvar_48[1].y = 0.707107;
  tmpvar_48[1].z = -0.707107;
  tmpvar_48[2].x = 0.57735;
  tmpvar_48[2].y = 0.57735;
  tmpvar_48[2].z = 0.57735;
  mediump vec3 normal_49;
  normal_49 = tmpvar_4;
  mediump vec3 scalePerBasisVector_50;
  mediump vec3 lm_51;
  lowp vec3 tmpvar_52;
  tmpvar_52 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD4).xyz);
  lm_51 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD4).xyz);
  scalePerBasisVector_50 = tmpvar_53;
  lm_51 = (lm_51 * dot (clamp ((tmpvar_48 * normal_49), 0.0, 1.0), scalePerBasisVector_50));
  vec3 v_54;
  v_54.x = tmpvar_48[0].x;
  v_54.y = tmpvar_48[1].x;
  v_54.z = tmpvar_48[2].x;
  vec3 v_55;
  v_55.x = tmpvar_48[0].y;
  v_55.y = tmpvar_48[1].y;
  v_55.z = tmpvar_48[2].y;
  vec3 v_56;
  v_56.x = tmpvar_48[0].z;
  v_56.y = tmpvar_48[1].z;
  v_56.z = tmpvar_48[2].z;
  mediump float tmpvar_57;
  tmpvar_57 = max (0.0, dot (tmpvar_4, normalize((normalize((((scalePerBasisVector_50.x * v_54) + (scalePerBasisVector_50.y * v_55)) + (scalePerBasisVector_50.z * v_56))) + viewDir_46))));
  nh_47 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58.xyz = lm_51;
  tmpvar_58.w = pow (nh_47, 0.0);
  tmpvar_45 = tmpvar_58;
  mediump vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_3 * tmpvar_45.xyz);
  c_1.xyz = tmpvar_59;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = tmpvar_1.w;
  highp vec3 tmpvar_6;
  tmpvar_6 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_7;
  tmpvar_7 = ((tmpvar_2.yzx * tmpvar_6.zxy) - (tmpvar_2.zxy * tmpvar_6.yzx));
  tmpvar_5.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = dot (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)), tmpvar_6);
  if ((tmpvar_8 < 0.0)) {
    tmpvar_5.w = -1.0;
  } else {
    tmpvar_5.w = 1.0;
  };
  highp vec3 p_9;
  p_9 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_5.xyz;
  tmpvar_11 = (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)) * tmpvar_5.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_2.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_2.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_2.z;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_9, p_9));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = (tmpvar_12 * (((_World2Object * tmpvar_13).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 normal_27;
  normal_27.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_27.z = sqrt((1.0 - clamp (dot (normal_27.xy, normal_27.xy), 0.0, 1.0)));
  normalsplat0_10 = normal_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  normalsplat1_9 = normal_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat2_8 = normal_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_31;
  normal_31.xy = ((texture2D (_BumpMap2, P_30).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  normalsplat2_2nd_7 = normal_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat3_6 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  farnormal_5 = normal_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (unity_Lightmap, xlv_TEXCOORD4);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (unity_LightmapInd, xlv_TEXCOORD4);
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize(xlv_TEXCOORD5);
  mediump vec4 tmpvar_47;
  mediump vec3 viewDir_48;
  viewDir_48 = tmpvar_46;
  highp float nh_49;
  mat3 tmpvar_50;
  tmpvar_50[0].x = 0.816497;
  tmpvar_50[0].y = -0.408248;
  tmpvar_50[0].z = -0.408248;
  tmpvar_50[1].x = 0.0;
  tmpvar_50[1].y = 0.707107;
  tmpvar_50[1].z = -0.707107;
  tmpvar_50[2].x = 0.57735;
  tmpvar_50[2].y = 0.57735;
  tmpvar_50[2].z = 0.57735;
  mediump vec3 normal_51;
  normal_51 = tmpvar_4;
  mediump vec3 scalePerBasisVector_52;
  mediump vec3 lm_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((8.0 * tmpvar_44.w) * tmpvar_44.xyz);
  lm_53 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = ((8.0 * tmpvar_45.w) * tmpvar_45.xyz);
  scalePerBasisVector_52 = tmpvar_55;
  lm_53 = (lm_53 * dot (clamp ((tmpvar_50 * normal_51), 0.0, 1.0), scalePerBasisVector_52));
  vec3 v_56;
  v_56.x = tmpvar_50[0].x;
  v_56.y = tmpvar_50[1].x;
  v_56.z = tmpvar_50[2].x;
  vec3 v_57;
  v_57.x = tmpvar_50[0].y;
  v_57.y = tmpvar_50[1].y;
  v_57.z = tmpvar_50[2].y;
  vec3 v_58;
  v_58.x = tmpvar_50[0].z;
  v_58.y = tmpvar_50[1].z;
  v_58.z = tmpvar_50[2].z;
  mediump float tmpvar_59;
  tmpvar_59 = max (0.0, dot (tmpvar_4, normalize((normalize((((scalePerBasisVector_52.x * v_56) + (scalePerBasisVector_52.y * v_57)) + (scalePerBasisVector_52.z * v_58))) + viewDir_48))));
  nh_49 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60.xyz = lm_53;
  tmpvar_60.w = pow (nh_49, 0.0);
  tmpvar_47 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_3 * tmpvar_47.xyz);
  c_1.xyz = tmpvar_61;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec2 lmap;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 474
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 478
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
#line 502
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 402
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 406
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 411
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 480
v2f_surf vert_surf( in appdata_full v ) {
    #line 482
    v2f_surf o;
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    #line 486
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    #line 490
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 494
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 498
    o.viewDir = viewDirForLight;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out highp vec2 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec2(xl_retval.lmap);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec2 lmap;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 474
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 478
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
#line 502
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 177
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 179
    return (2.0 * color.xyz);
}
#line 325
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 329
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 334
    return lm;
}
#line 379
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 381
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 385
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * _SpecColor.xyz) * s.Gloss) * spec);
    #line 389
    return vec4( lm, spec);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 422
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 424
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 428
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 432
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 436
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 441
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 445
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 449
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 453
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 457
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 461
    o.Alpha = 0.0;
}
#line 504
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 506
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    #line 510
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    #line 514
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 518
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    #line 522
    mediump vec3 specColor;
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    mediump vec3 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor).xyz;
    #line 526
    c.xyz += specColor;
    c.xyz += (o.Albedo * lm);
    c.w = o.Alpha;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in highp vec2 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lmap = vec2(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_ProjectionParams]
Vector 15 [_WorldSpaceLightPos0]
Vector 16 [unity_SHAr]
Vector 17 [unity_SHAg]
Vector 18 [unity_SHAb]
Vector 19 [unity_SHBr]
Vector 20 [unity_SHBg]
Vector 21 [unity_SHBb]
Vector 22 [unity_SHC]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 23 [unity_Scale]
Vector 24 [_Control_ST]
Vector 25 [_Splat0_ST]
Vector 26 [_Splat1_ST]
Vector 27 [_Splat2_ST]
Vector 28 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 68 ALU
PARAM c[30] = { { 0, 1, 2, -1 },
		state.matrix.mvp,
		program.local[5..28],
		{ 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0.xyz, -vertex.normal.yzxw, c[0].yyxw;
MAD R0.xyz, vertex.normal.zxyw, c[0].xyyw, R0;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R2.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R1.xyz, vertex.normal.zxyw, R2.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R2.zxyw, -R1;
DP3 R0.x, R0, R1;
SLT R0.x, R0, c[0];
ABS R0.x, R0;
SGE R0.x, c[0], R0;
MAD R1.w, R0.x, c[0].z, c[0];
MOV R0, c[15];
MUL R3.xyz, R1.w, R1;
MUL R4.xyz, vertex.normal, c[23].w;
DP4 R1.z, R0, c[11];
DP4 R1.y, R0, c[10];
DP4 R1.x, R0, c[9];
DP3 R1.w, R4, c[6];
DP3 R0.x, R4, c[5];
MOV R0.y, R1.w;
DP3 R0.z, R4, c[7];
MUL R4, R0.xyzz, R0.yzzx;
MOV R0.w, c[0].y;
DP4 R5.z, R0, c[18];
DP4 R5.y, R0, c[17];
DP4 R5.x, R0, c[16];
MUL R0.y, R1.w, R1.w;
DP3 result.texcoord[4].x, R1, R2;
DP3 result.texcoord[4].y, R1, R3;
DP3 result.texcoord[4].z, vertex.normal, R1;
DP4 R6.z, R4, c[21];
DP4 R6.y, R4, c[20];
DP4 R6.x, R4, c[19];
ADD R4.xyz, R5, R6;
MAD R0.x, R0, R0, -R0.y;
MUL R5.xyz, R0.x, c[22];
MOV R0.xyz, c[13];
MOV R0.w, c[0].y;
DP4 R1.w, vertex.position, c[4];
DP4 R1.z, vertex.position, c[3];
DP4 R1.x, vertex.position, c[1];
DP4 R1.y, vertex.position, c[2];
DP4 R6.z, R0, c[11];
DP4 R6.x, R0, c[9];
DP4 R6.y, R0, c[10];
MAD R0.xyz, R6, c[23].w, -vertex.position;
DP3 result.texcoord[6].x, R2, R0;
DP3 result.texcoord[6].y, R3, R0;
DP3 result.texcoord[6].z, vertex.normal, R0;
MUL R2.xyz, R1.xyww, c[29].x;
MUL R0.y, R2, c[14].x;
MOV R0.x, R2;
ADD result.texcoord[7].xy, R0, R2.z;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
ADD R0.xyz, R0, -c[13];
DP3 R0.x, R0, R0;
RSQ R0.x, R0.x;
ADD result.texcoord[5].xyz, R4, R5;
MOV result.position, R1;
MOV result.texcoord[7].zw, R1;
RCP result.texcoord[3].x, R0.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[25].xyxy, c[25];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[24], c[24].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[27].xyxy, c[27];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[26], c[26].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[28], c[28].zwzw;
END
# 68 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Vector 16 [unity_SHAr]
Vector 17 [unity_SHAg]
Vector 18 [unity_SHAb]
Vector 19 [unity_SHBr]
Vector 20 [unity_SHBg]
Vector 21 [unity_SHBb]
Vector 22 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 23 [unity_Scale]
Vector 24 [_Control_ST]
Vector 25 [_Splat0_ST]
Vector 26 [_Splat1_ST]
Vector 27 [_Splat2_ST]
Vector 28 [_Splat3_ST]
"vs_3_0
; 69 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c29, 1.00000000, 0.00000000, -1.00000000, 0.50000000
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
mul r0.xyz, -v2.yzxw, c29.xxyw
mad r0.xyz, v2.zxyw, c29.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r2.xyz, v2.yzxw, r0.zxyw, -r1
mul r1.xyz, r2.yzxw, v2.zxyw
mad r1.xyz, r2.zxyw, v2.yzxw, -r1
dp3 r0.x, r0, r1
if_lt r0.x, c29.y
mov r2.w, c29.z
else
mov r2.w, c29.x
endif
mul r1.xyz, v2, c23.w
dp3 r3.w, r1, c5
dp3 r0.x, r1, c4
dp3 r0.z, r1, c6
mov r0.y, r3.w
mov r0.w, c29.x
mul r1, r0.xyzz, r0.yzzx
dp4 r3.z, r0, c18
dp4 r3.y, r0, c17
dp4 r3.x, r0, c16
mul r0.w, r3, r3
mad r0.w, r0.x, r0.x, -r0
dp4 r0.z, r1, c21
dp4 r0.y, r1, c20
dp4 r0.x, r1, c19
mul r1.xyz, r0.w, c22
add r0.xyz, r3, r0
add o6.xyz, r0, r1
mov r0.w, c29.x
mov r0.xyz, c12
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r4.xyz, r1, c23.w, -v0
mul r0.xyz, v2.zxyw, r2.yzxw
mad r1.xyz, v2.yzxw, r2.zxyw, -r0
mul r3.xyz, r1, r2.w
mov r0, c10
dp4 r5.z, c15, r0
mov r0, c9
dp4 r5.y, c15, r0
mov r1, c8
dp4 r5.x, c15, r1
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c29.w
mul r1.y, r1, c13.x
mad o8.xy, r1.z, c14.zwzw, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, r1, -c12
dp3 r1.x, r1, r1
mov o0, r0
rsq r0.x, r1.x
dp3 o5.y, r5, r3
dp3 o7.y, r3, r4
dp3 o5.z, v2, r5
dp3 o5.x, r5, r2
dp3 o7.z, v2, r4
dp3 o7.x, r2, r4
mov o8.zw, r0
rcp o4.x, r0.x
mad o1.zw, v3.xyxy, c25.xyxy, c25
mad o1.xy, v3, c24, c24.zwzw
mad o2.zw, v3.xyxy, c27.xyxy, c27
mad o2.xy, v3, c26, c26.zwzw
mad o3.xy, v3, c28, c28.zwzw
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = tmpvar_1.w;
  highp vec3 tmpvar_9;
  tmpvar_9 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx));
  tmpvar_8.xyz = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)), tmpvar_9);
  if ((tmpvar_11 < 0.0)) {
    tmpvar_8.w = -1.0;
  } else {
    tmpvar_8.w = 1.0;
  };
  highp vec3 p_12;
  p_12 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  mat3 tmpvar_13;
  tmpvar_13[0] = _Object2World[0].xyz;
  tmpvar_13[1] = _Object2World[1].xyz;
  tmpvar_13[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_8.xyz;
  tmpvar_15 = (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)) * tmpvar_8.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_14.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_2.x;
  tmpvar_16[1].x = tmpvar_14.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_2.y;
  tmpvar_16[2].x = tmpvar_14.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_2.z;
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_6 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = (tmpvar_13 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_20;
  mediump vec4 normal_21;
  normal_21 = tmpvar_19;
  highp float vC_22;
  mediump vec3 x3_23;
  mediump vec3 x2_24;
  mediump vec3 x1_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHAr, normal_21);
  x1_25.x = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHAg, normal_21);
  x1_25.y = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (unity_SHAb, normal_21);
  x1_25.z = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normal_21.xyzz * normal_21.yzzx);
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHBr, tmpvar_29);
  x2_24.x = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHBg, tmpvar_29);
  x2_24.y = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = dot (unity_SHBb, tmpvar_29);
  x2_24.z = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y));
  vC_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = (unity_SHC.xyz * vC_22);
  x3_23 = tmpvar_34;
  tmpvar_20 = ((x1_25 + x2_24) + x3_23);
  shlight_3 = tmpvar_20;
  tmpvar_7 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_12, p_12));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (tmpvar_16 * (((_World2Object * tmpvar_18).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD7;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_9 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_8 = tmpvar_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, P_30).xyz * 2.0) - 1.0);
  normalsplat2_2nd_7 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_6 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_5 = tmpvar_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp float tmpvar_44;
  mediump float lightShadowDataX_45;
  highp float dist_46;
  lowp float tmpvar_47;
  tmpvar_47 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_46 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = _LightShadowData.x;
  lightShadowDataX_45 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = max (float((dist_46 > (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))), lightShadowDataX_45);
  tmpvar_44 = tmpvar_49;
  lowp vec4 c_50;
  lowp float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD4));
  highp vec3 tmpvar_52;
  tmpvar_52 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_51) * (tmpvar_44 * 2.0));
  c_50.xyz = tmpvar_52;
  c_50.w = 0.0;
  c_1.w = c_50.w;
  c_1.xyz = (c_50.xyz + (tmpvar_3 * xlv_TEXCOORD5));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = tmpvar_1.w;
  highp vec3 tmpvar_9;
  tmpvar_9 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx));
  tmpvar_8.xyz = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)), tmpvar_9);
  if ((tmpvar_11 < 0.0)) {
    tmpvar_8.w = -1.0;
  } else {
    tmpvar_8.w = 1.0;
  };
  highp vec3 p_12;
  p_12 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_13;
  tmpvar_13 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_8.xyz;
  tmpvar_16 = (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)) * tmpvar_8.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_15.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_2.x;
  tmpvar_17[1].x = tmpvar_15.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_2.y;
  tmpvar_17[2].x = tmpvar_15.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_2.z;
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_6 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = (tmpvar_14 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_21;
  mediump vec4 normal_22;
  normal_22 = tmpvar_20;
  highp float vC_23;
  mediump vec3 x3_24;
  mediump vec3 x2_25;
  mediump vec3 x1_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHAr, normal_22);
  x1_26.x = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (unity_SHAg, normal_22);
  x1_26.y = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAb, normal_22);
  x1_26.z = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30 = (normal_22.xyzz * normal_22.yzzx);
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHBr, tmpvar_30);
  x2_25.x = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = dot (unity_SHBg, tmpvar_30);
  x2_25.y = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBb, tmpvar_30);
  x2_25.z = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y));
  vC_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = (unity_SHC.xyz * vC_23);
  x3_24 = tmpvar_35;
  tmpvar_21 = ((x1_26 + x2_25) + x3_24);
  shlight_3 = tmpvar_21;
  tmpvar_7 = shlight_3;
  highp vec4 o_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_13 * 0.5);
  highp vec2 tmpvar_38;
  tmpvar_38.x = tmpvar_37.x;
  tmpvar_38.y = (tmpvar_37.y * _ProjectionParams.x);
  o_36.xy = (tmpvar_38 + tmpvar_37.w);
  o_36.zw = tmpvar_13.zw;
  gl_Position = tmpvar_13;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_12, p_12));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (tmpvar_17 * (((_World2Object * tmpvar_19).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD7 = o_36;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD7;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 normal_27;
  normal_27.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_27.z = sqrt((1.0 - clamp (dot (normal_27.xy, normal_27.xy), 0.0, 1.0)));
  normalsplat0_10 = normal_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  normalsplat1_9 = normal_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat2_8 = normal_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_31;
  normal_31.xy = ((texture2D (_BumpMap2, P_30).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  normalsplat2_2nd_7 = normal_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat3_6 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  farnormal_5 = normal_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  lowp vec4 c_45;
  lowp float tmpvar_46;
  tmpvar_46 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD4));
  highp vec3 tmpvar_47;
  tmpvar_47 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_46) * (tmpvar_44.x * 2.0));
  c_45.xyz = tmpvar_47;
  c_45.w = 0.0;
  c_1.w = c_45.w;
  c_1.xyz = (c_45.xyz + (tmpvar_3 * xlv_TEXCOORD5));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 484
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 488
uniform highp vec4 _Splat3_ST;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 410
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 414
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 419
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 489
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 492
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 496
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    #line 500
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 504
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 508
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 512
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 484
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 488
uniform highp vec4 _Splat3_ST;
#line 360
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 364
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 368
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 430
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 432
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 436
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 440
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 444
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 449
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 453
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 457
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 461
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 465
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 469
    o.Alpha = 0.0;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 397
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 514
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 516
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    #line 520
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    #line 524
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 528
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    #line 532
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_ProjectionParams]
Matrix 5 [_Object2World]
Vector 16 [unity_LightmapST]
Vector 17 [_Control_ST]
Vector 18 [_Splat0_ST]
Vector 19 [_Splat1_ST]
Vector 20 [_Splat2_ST]
Vector 21 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 22 ALU
PARAM c[22] = { { 0.5 },
		state.matrix.mvp,
		program.local[5..21] };
TEMP R0;
TEMP R1;
DP4 R0.w, vertex.position, c[4];
DP4 R0.z, vertex.position, c[3];
DP4 R0.x, vertex.position, c[1];
DP4 R0.y, vertex.position, c[2];
MUL R1.xyz, R0.xyww, c[0].x;
MUL R1.y, R1, c[14].x;
ADD result.texcoord[5].xy, R1, R1.z;
DP4 R1.z, vertex.position, c[7];
DP4 R1.x, vertex.position, c[5];
DP4 R1.y, vertex.position, c[6];
ADD R1.xyz, R1, -c[13];
DP3 R1.x, R1, R1;
MOV result.position, R0;
RSQ R0.x, R1.x;
MOV result.texcoord[5].zw, R0;
RCP result.texcoord[3].x, R0.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[18].xyxy, c[18];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[17], c[17].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[20].xyxy, c[20];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[19], c[19].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[21], c[21].zwzw;
MAD result.texcoord[4].xy, vertex.texcoord[1], c[16], c[16].zwzw;
END
# 22 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Vector 15 [unity_LightmapST]
Vector 16 [_Control_ST]
Vector 17 [_Splat0_ST]
Vector 18 [_Splat1_ST]
Vector 19 [_Splat2_ST]
Vector 20 [_Splat3_ST]
"vs_3_0
; 29 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c21, 1.00000000, 0.00000000, 0.50000000, 0
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mul r0.xyz, -v2.yzxw, c21.xxyw
mad r0.xyz, v2.zxyw, c21.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, v2.zxyw, r1.yzxw
mad r1.xyz, v2.yzxw, r1.zxyw, -r2
dp3 r0.x, r1, r0
if_lt r0.x, c21.y
else
endif
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c21.z
mul r1.y, r1, c13.x
mad o6.xy, r1.z, c14.zwzw, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, r1, -c12
dp3 r1.x, r1, r1
mov o0, r0
rsq r0.x, r1.x
mov o6.zw, r0
rcp o4.x, r0.x
mad o1.zw, v3.xyxy, c17.xyxy, c17
mad o1.xy, v3, c16, c16.zwzw
mad o2.zw, v3.xyxy, c19.xyxy, c19
mad o2.xy, v3, c18, c18.zwzw
mad o3.xy, v3, c20, c20.zwzw
mad o5.xy, v4, c15, c15.zwzw
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 p_3;
  p_3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_Lightmap;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_9 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_8 = tmpvar_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, P_30).xyz * 2.0) - 1.0);
  normalsplat2_2nd_7 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_6 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_5 = tmpvar_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp float tmpvar_44;
  mediump float lightShadowDataX_45;
  highp float dist_46;
  lowp float tmpvar_47;
  tmpvar_47 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x;
  dist_46 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = _LightShadowData.x;
  lightShadowDataX_45 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = max (float((dist_46 > (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w))), lightShadowDataX_45);
  tmpvar_44 = tmpvar_49;
  c_1.xyz = (tmpvar_3 * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD4).xyz), vec3((tmpvar_44 * 2.0))));
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 p_3;
  p_3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = o_5;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_Lightmap;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _ShadowMapTexture;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 normal_27;
  normal_27.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_27.z = sqrt((1.0 - clamp (dot (normal_27.xy, normal_27.xy), 0.0, 1.0)));
  normalsplat0_10 = normal_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  normalsplat1_9 = normal_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat2_8 = normal_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_31;
  normal_31.xy = ((texture2D (_BumpMap2, P_30).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  normalsplat2_2nd_7 = normal_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat3_6 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  farnormal_5 = normal_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (unity_Lightmap, xlv_TEXCOORD4);
  lowp vec3 tmpvar_46;
  tmpvar_46 = ((8.0 * tmpvar_45.w) * tmpvar_45.xyz);
  c_1.xyz = (tmpvar_3 * max (min (tmpvar_46, ((tmpvar_44.x * 2.0) * tmpvar_45.xyz)), (tmpvar_46 * tmpvar_44.x)));
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 482
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 486
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
uniform sampler2D unity_Lightmap;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 410
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 414
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 419
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 488
v2f_surf vert_surf( in appdata_full v ) {
    #line 490
    v2f_surf o;
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    #line 494
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    #line 498
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 502
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 507
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out highp vec2 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec2(xl_retval.lmap);
    xlv_TEXCOORD5 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 482
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 486
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
uniform sampler2D unity_Lightmap;
#line 177
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 179
    return (2.0 * color.xyz);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 430
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 432
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 436
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 440
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 444
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 449
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 453
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 457
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 461
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 465
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 469
    o.Alpha = 0.0;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 397
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 510
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 512
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    #line 516
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    #line 520
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 524
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    #line 528
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec3 lm = DecodeLightmap( lmtex);
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    c.w = o.Alpha;
    #line 532
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in highp vec2 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lmap = vec2(xlv_TEXCOORD4);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD5);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_ProjectionParams]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 16 [unity_Scale]
Vector 17 [unity_LightmapST]
Vector 18 [_Control_ST]
Vector 19 [_Splat0_ST]
Vector 20 [_Splat1_ST]
Vector 21 [_Splat2_ST]
Vector 22 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 44 ALU
PARAM c[24] = { { 1, 0, 2, -1 },
		state.matrix.mvp,
		program.local[5..22],
		{ 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0.xyz, -vertex.normal.yzxw, c[0].xxyw;
MAD R0.xyz, vertex.normal.zxyw, c[0].yxxw, R0;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R2.xyz, vertex.normal.zxyw, R1.yzxw;
MAD R2.xyz, vertex.normal.yzxw, R1.zxyw, -R2;
DP3 R0.x, R0, R2;
SLT R0.x, R0, c[0].y;
ABS R0.x, R0;
SGE R0.x, c[0].y, R0;
MAD R0.x, R0, c[0].z, c[0].w;
MUL R2.xyz, R0.x, R2;
MOV R0.xyz, c[13];
MOV R0.w, c[0].x;
DP4 R1.w, vertex.position, c[4];
DP4 R3.z, R0, c[11];
DP4 R3.x, R0, c[9];
DP4 R3.y, R0, c[10];
MAD R0.xyz, R3, c[16].w, -vertex.position;
DP3 result.texcoord[5].x, R0, R1;
DP4 R1.z, vertex.position, c[3];
DP3 result.texcoord[5].y, R0, R2;
DP3 result.texcoord[5].z, vertex.normal, R0;
DP4 R1.x, vertex.position, c[1];
DP4 R1.y, vertex.position, c[2];
MUL R2.xyz, R1.xyww, c[23].x;
MUL R0.y, R2, c[14].x;
MOV R0.x, R2;
ADD result.texcoord[6].xy, R0, R2.z;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
ADD R0.xyz, R0, -c[13];
DP3 R0.x, R0, R0;
RSQ R0.x, R0.x;
MOV result.position, R1;
MOV result.texcoord[6].zw, R1;
RCP result.texcoord[3].x, R0.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[19].xyxy, c[19];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[18], c[18].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[21].xyxy, c[21];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[20], c[20].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[22], c[22].zwzw;
MAD result.texcoord[4].xy, vertex.texcoord[1], c[17], c[17].zwzw;
END
# 44 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 15 [unity_Scale]
Vector 16 [unity_LightmapST]
Vector 17 [_Control_ST]
Vector 18 [_Splat0_ST]
Vector 19 [_Splat1_ST]
Vector 20 [_Splat2_ST]
Vector 21 [_Splat3_ST]
"vs_3_0
; 44 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c22, 1.00000000, 0.00000000, -1.00000000, 0.50000000
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mul r0.xyz, -v2.yzxw, c22.xxyw
mad r0.xyz, v2.zxyw, c22.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1.yzxw, v2.zxyw
mad r2.xyz, r1.zxyw, v2.yzxw, -r2
dp3 r0.x, r0, r2
if_lt r0.x, c22.y
mov r0.w, c22.z
else
mov r0.w, c22.x
endif
mul r0.xyz, v2.zxyw, r1.yzxw
mad r0.xyz, v2.yzxw, r1.zxyw, -r0
mul r0.xyz, r0, r0.w
mov r2.xyz, c12
mov r2.w, c22.x
dp4 r3.z, r2, c10
dp4 r3.x, r2, c8
dp4 r3.y, r2, c9
mad r2.xyz, r3, c15.w, -v0
dp3 o6.y, r2, r0
dp3 o6.x, r2, r1
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r3.xyz, r0.xyww, c22.w
mul r1.y, r3, c13.x
mov r1.x, r3
mad o7.xy, r3.z, c14.zwzw, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, r1, -c12
dp3 r1.x, r1, r1
mov o0, r0
rsq r0.x, r1.x
dp3 o6.z, v2, r2
mov o7.zw, r0
rcp o4.x, r0.x
mad o1.zw, v3.xyxy, c18.xyxy, c18
mad o1.xy, v3, c17, c17.zwzw
mad o2.zw, v3.xyxy, c20.xyxy, c20
mad o2.xy, v3, c19, c19.zwzw
mad o3.xy, v3, c21, c21.zwzw
mad o5.xy, v4, c16, c16.zwzw
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = tmpvar_1.w;
  highp vec3 tmpvar_6;
  tmpvar_6 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_7;
  tmpvar_7 = ((tmpvar_2.yzx * tmpvar_6.zxy) - (tmpvar_2.zxy * tmpvar_6.yzx));
  tmpvar_5.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = dot (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)), tmpvar_6);
  if ((tmpvar_8 < 0.0)) {
    tmpvar_5.w = -1.0;
  } else {
    tmpvar_5.w = 1.0;
  };
  highp vec3 p_9;
  p_9 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_5.xyz;
  tmpvar_11 = (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)) * tmpvar_5.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_2.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_2.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_2.z;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_9, p_9));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = (tmpvar_12 * (((_World2Object * tmpvar_13).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_9 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_8 = tmpvar_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, P_30).xyz * 2.0) - 1.0);
  normalsplat2_2nd_7 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_6 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_5 = tmpvar_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp float tmpvar_44;
  mediump float lightShadowDataX_45;
  highp float dist_46;
  lowp float tmpvar_47;
  tmpvar_47 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_46 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = _LightShadowData.x;
  lightShadowDataX_45 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = max (float((dist_46 > (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w))), lightShadowDataX_45);
  tmpvar_44 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD5);
  mediump vec4 tmpvar_51;
  mediump vec3 viewDir_52;
  viewDir_52 = tmpvar_50;
  highp float nh_53;
  mat3 tmpvar_54;
  tmpvar_54[0].x = 0.816497;
  tmpvar_54[0].y = -0.408248;
  tmpvar_54[0].z = -0.408248;
  tmpvar_54[1].x = 0.0;
  tmpvar_54[1].y = 0.707107;
  tmpvar_54[1].z = -0.707107;
  tmpvar_54[2].x = 0.57735;
  tmpvar_54[2].y = 0.57735;
  tmpvar_54[2].z = 0.57735;
  mediump vec3 normal_55;
  normal_55 = tmpvar_4;
  mediump vec3 scalePerBasisVector_56;
  mediump vec3 lm_57;
  lowp vec3 tmpvar_58;
  tmpvar_58 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD4).xyz);
  lm_57 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD4).xyz);
  scalePerBasisVector_56 = tmpvar_59;
  lm_57 = (lm_57 * dot (clamp ((tmpvar_54 * normal_55), 0.0, 1.0), scalePerBasisVector_56));
  vec3 v_60;
  v_60.x = tmpvar_54[0].x;
  v_60.y = tmpvar_54[1].x;
  v_60.z = tmpvar_54[2].x;
  vec3 v_61;
  v_61.x = tmpvar_54[0].y;
  v_61.y = tmpvar_54[1].y;
  v_61.z = tmpvar_54[2].y;
  vec3 v_62;
  v_62.x = tmpvar_54[0].z;
  v_62.y = tmpvar_54[1].z;
  v_62.z = tmpvar_54[2].z;
  mediump float tmpvar_63;
  tmpvar_63 = max (0.0, dot (tmpvar_4, normalize((normalize((((scalePerBasisVector_56.x * v_60) + (scalePerBasisVector_56.y * v_61)) + (scalePerBasisVector_56.z * v_62))) + viewDir_52))));
  nh_53 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64.xyz = lm_57;
  tmpvar_64.w = pow (nh_53, 0.0);
  tmpvar_51 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = vec3((tmpvar_44 * 2.0));
  mediump vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_3 * min (tmpvar_51.xyz, tmpvar_65));
  c_1.xyz = tmpvar_66;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = tmpvar_1.w;
  highp vec3 tmpvar_6;
  tmpvar_6 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_7;
  tmpvar_7 = ((tmpvar_2.yzx * tmpvar_6.zxy) - (tmpvar_2.zxy * tmpvar_6.yzx));
  tmpvar_5.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = dot (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)), tmpvar_6);
  if ((tmpvar_8 < 0.0)) {
    tmpvar_5.w = -1.0;
  } else {
    tmpvar_5.w = 1.0;
  };
  highp vec3 p_9;
  p_9 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_10;
  tmpvar_10 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_5.xyz;
  tmpvar_12 = (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)) * tmpvar_5.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_2.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_2.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_2.z;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _WorldSpaceCameraPos;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_10 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_10.zw;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_9, p_9));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = (tmpvar_13 * (((_World2Object * tmpvar_14).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD6 = o_15;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _ShadowMapTexture;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 normal_27;
  normal_27.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_27.z = sqrt((1.0 - clamp (dot (normal_27.xy, normal_27.xy), 0.0, 1.0)));
  normalsplat0_10 = normal_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  normalsplat1_9 = normal_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat2_8 = normal_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_31;
  normal_31.xy = ((texture2D (_BumpMap2, P_30).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  normalsplat2_2nd_7 = normal_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat3_6 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  farnormal_5 = normal_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (unity_Lightmap, xlv_TEXCOORD4);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (unity_LightmapInd, xlv_TEXCOORD4);
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(xlv_TEXCOORD5);
  mediump vec4 tmpvar_48;
  mediump vec3 viewDir_49;
  viewDir_49 = tmpvar_47;
  highp float nh_50;
  mat3 tmpvar_51;
  tmpvar_51[0].x = 0.816497;
  tmpvar_51[0].y = -0.408248;
  tmpvar_51[0].z = -0.408248;
  tmpvar_51[1].x = 0.0;
  tmpvar_51[1].y = 0.707107;
  tmpvar_51[1].z = -0.707107;
  tmpvar_51[2].x = 0.57735;
  tmpvar_51[2].y = 0.57735;
  tmpvar_51[2].z = 0.57735;
  mediump vec3 normal_52;
  normal_52 = tmpvar_4;
  mediump vec3 scalePerBasisVector_53;
  mediump vec3 lm_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = ((8.0 * tmpvar_45.w) * tmpvar_45.xyz);
  lm_54 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = ((8.0 * tmpvar_46.w) * tmpvar_46.xyz);
  scalePerBasisVector_53 = tmpvar_56;
  lm_54 = (lm_54 * dot (clamp ((tmpvar_51 * normal_52), 0.0, 1.0), scalePerBasisVector_53));
  vec3 v_57;
  v_57.x = tmpvar_51[0].x;
  v_57.y = tmpvar_51[1].x;
  v_57.z = tmpvar_51[2].x;
  vec3 v_58;
  v_58.x = tmpvar_51[0].y;
  v_58.y = tmpvar_51[1].y;
  v_58.z = tmpvar_51[2].y;
  vec3 v_59;
  v_59.x = tmpvar_51[0].z;
  v_59.y = tmpvar_51[1].z;
  v_59.z = tmpvar_51[2].z;
  mediump float tmpvar_60;
  tmpvar_60 = max (0.0, dot (tmpvar_4, normalize((normalize((((scalePerBasisVector_53.x * v_57) + (scalePerBasisVector_53.y * v_58)) + (scalePerBasisVector_53.z * v_59))) + viewDir_49))));
  nh_50 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61.xyz = lm_54;
  tmpvar_61.w = pow (nh_50, 0.0);
  tmpvar_48 = tmpvar_61;
  lowp vec3 arg1_62;
  arg1_62 = ((tmpvar_44.x * 2.0) * tmpvar_45.xyz);
  mediump vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_3 * max (min (tmpvar_48.xyz, arg1_62), (tmpvar_48.xyz * tmpvar_44.x)));
  c_1.xyz = tmpvar_63;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 483
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 487
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
#line 512
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 410
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 414
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 419
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 489
v2f_surf vert_surf( in appdata_full v ) {
    #line 491
    v2f_surf o;
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    #line 495
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    #line 499
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 503
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 507
    o.viewDir = viewDirForLight;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out highp vec2 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec2(xl_retval.lmap);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 483
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 487
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
#line 512
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 177
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 179
    return (2.0 * color.xyz);
}
#line 325
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 329
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 334
    return lm;
}
#line 379
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 381
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 385
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * _SpecColor.xyz) * s.Gloss) * spec);
    #line 389
    return vec4( lm, spec);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 430
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 432
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 436
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 440
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 444
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 449
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 453
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 457
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 461
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 465
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 469
    o.Alpha = 0.0;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 397
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 514
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 516
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    #line 520
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    #line 524
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 528
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    #line 532
    mediump vec3 specColor;
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    mediump vec3 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor).xyz;
    #line 536
    c.xyz += specColor;
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    c.w = o.Alpha;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in highp vec2 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lmap = vec2(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_WorldSpaceLightPos0]
Vector 15 [unity_4LightPosX0]
Vector 16 [unity_4LightPosY0]
Vector 17 [unity_4LightPosZ0]
Vector 18 [unity_4LightAtten0]
Vector 19 [unity_LightColor0]
Vector 20 [unity_LightColor1]
Vector 21 [unity_LightColor2]
Vector 22 [unity_LightColor3]
Vector 23 [unity_SHAr]
Vector 24 [unity_SHAg]
Vector 25 [unity_SHAb]
Vector 26 [unity_SHBr]
Vector 27 [unity_SHBg]
Vector 28 [unity_SHBb]
Vector 29 [unity_SHC]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 30 [unity_Scale]
Vector 31 [_Control_ST]
Vector 32 [_Splat0_ST]
Vector 33 [_Splat1_ST]
Vector 34 [_Splat2_ST]
Vector 35 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 91 ALU
PARAM c[36] = { { 0, 1, 2, -1 },
		state.matrix.mvp,
		program.local[5..35] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
TEMP R7;
MUL R5.xyz, vertex.normal, c[30].w;
DP3 R7.x, R5, c[6];
DP4 R6.zw, vertex.position, c[6];
ADD R2, -R6.z, c[16];
DP4 R5.w, vertex.position, c[5];
DP3 R0.x, R5, c[5];
DP3 R0.z, R5, c[7];
MUL R4, R2, R2;
MUL R3, R7.x, R2;
ADD R1, -R5.w, c[15];
MAD R3, R0.x, R1, R3;
MOV R0.y, R7.x;
MOV R0.w, c[0].y;
DP4 R6.z, R0, c[25];
DP4 R6.y, R0, c[24];
DP4 R6.x, R0, c[23];
DP4 R2.zw, vertex.position, c[7];
MAD R1, R1, R1, R4;
ADD R4, -R2.z, c[17];
MUL R2.xyz, -vertex.normal.yzxw, c[0].yyxw;
MAD R1, R4, R4, R1;
MAD R3, R0.z, R4, R3;
MUL R4, R1, c[18];
MAD R2.xyz, vertex.normal.zxyw, c[0].xyyw, R2;
RSQ R1.x, R1.x;
RSQ R1.y, R1.y;
RSQ R1.w, R1.w;
RSQ R1.z, R1.z;
MUL R1, R3, R1;
ADD R3, R4, c[0].y;
RCP R3.x, R3.x;
RCP R3.y, R3.y;
RCP R3.z, R3.z;
MAX R1, R1, c[0].x;
RCP R3.w, R3.w;
MUL R1, R1, R3;
MUL R4.xyz, R1.y, c[20];
MUL R3.xyz, vertex.normal.zxyw, R2.yzxw;
MAD R4.xyz, R1.x, c[19], R4;
MAD R4.xyz, R1.z, c[21], R4;
MAD R3.xyz, vertex.normal.yzxw, R2.zxyw, -R3;
MAD R5.xyz, R1.w, c[22], R4;
MUL R1.xyz, vertex.normal.zxyw, R3.yzxw;
MAD R4.xyz, vertex.normal.yzxw, R3.zxyw, -R1;
MUL R1, R0.xyzz, R0.yzzx;
DP4 R0.w, R1, c[28];
DP4 R0.y, R1, c[26];
DP4 R0.z, R1, c[27];
ADD R1.xyz, R6, R0.yzww;
DP3 R0.y, R2, R4;
MUL R0.z, R7.x, R7.x;
SLT R0.y, R0, c[0].x;
ABS R0.w, R0.y;
MAD R0.x, R0, R0, -R0.z;
MUL R0.xyz, R0.x, c[29];
ADD R0.xyz, R1, R0;
ADD result.texcoord[5].xyz, R0, R5;
SGE R0.w, c[0].x, R0;
MAD R0.w, R0, c[0].z, c[0];
MUL R2.xyz, R0.w, R4;
MOV R1, c[14];
MOV R0.w, c[0].y;
MOV R0.xyz, c[13];
DP4 R4.z, R0, c[11];
DP4 R4.x, R0, c[9];
DP4 R4.y, R0, c[10];
MAD R0.xyz, R4, c[30].w, -vertex.position;
DP4 R4.z, R1, c[11];
DP4 R4.y, R1, c[10];
DP4 R4.x, R1, c[9];
MOV R5.x, R6.w;
MOV R5.y, R2.w;
ADD R1.xyz, R5.wxyw, -c[13];
DP3 R0.w, R1, R1;
RSQ R0.w, R0.w;
DP3 result.texcoord[4].y, R4, R2;
DP3 result.texcoord[6].y, R2, R0;
DP3 result.texcoord[4].x, R4, R3;
DP3 result.texcoord[6].x, R3, R0;
DP3 result.texcoord[4].z, vertex.normal, R4;
DP3 result.texcoord[6].z, vertex.normal, R0;
RCP result.texcoord[3].x, R0.w;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[32].xyxy, c[32];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[31], c[31].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[34].xyxy, c[34];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[33], c[33].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[35], c[35].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 91 instructions, 8 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [unity_4LightPosX0]
Vector 15 [unity_4LightPosY0]
Vector 16 [unity_4LightPosZ0]
Vector 17 [unity_4LightAtten0]
Vector 18 [unity_LightColor0]
Vector 19 [unity_LightColor1]
Vector 20 [unity_LightColor2]
Vector 21 [unity_LightColor3]
Vector 22 [unity_SHAr]
Vector 23 [unity_SHAg]
Vector 24 [unity_SHAb]
Vector 25 [unity_SHBr]
Vector 26 [unity_SHBg]
Vector 27 [unity_SHBb]
Vector 28 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 29 [unity_Scale]
Vector 30 [_Control_ST]
Vector 31 [_Splat0_ST]
Vector 32 [_Splat1_ST]
Vector 33 [_Splat2_ST]
Vector 34 [_Splat3_ST]
"vs_3_0
; 94 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c35, 1.00000000, 0.00000000, -1.00000000, 0
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
mul r0.xyz, -v2.yzxw, c35.xxyw
mad r0.xyz, v2.zxyw, c35.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r3.xyz, v2.yzxw, r0.zxyw, -r1
mul r1.xyz, r3.yzxw, v2.zxyw
mad r1.xyz, r3.zxyw, v2.yzxw, -r1
dp3 r0.x, r0, r1
if_lt r0.x, c35.y
mov r3.w, c35.z
else
mov r3.w, c35.x
endif
mul r4.xyz, v2, c29.w
dp4 r5.zw, v0, c5
add r1, -r5.z, c15
dp3 r5.z, r4, c5
dp3 r6.x, r4, c4
dp3 r4.x, r4, c6
dp4 r4.w, v0, c4
mul r2, r5.z, r1
add r0, -r4.w, c14
mul r1, r1, r1
mov r6.z, r4.x
mov r6.y, r5.z
mad r2, r6.x, r0, r2
mov r6.w, c35.x
dp4 r5.xy, v0, c6
mad r1, r0, r0, r1
add r0, -r5.x, c16
mad r1, r0, r0, r1
mad r0, r4.x, r0, r2
mul r2, r1, c17
rsq r1.x, r1.x
rsq r1.y, r1.y
rsq r1.w, r1.w
rsq r1.z, r1.z
mul r0, r0, r1
add r1, r2, c35.x
dp4 r2.z, r6, c24
dp4 r2.y, r6, c23
dp4 r2.x, r6, c22
rcp r1.x, r1.x
rcp r1.y, r1.y
rcp r1.w, r1.w
rcp r1.z, r1.z
max r0, r0, c35.y
mul r0, r0, r1
mul r1.xyz, r0.y, c19
mad r1.xyz, r0.x, c18, r1
mad r0.xyz, r0.z, c20, r1
mad r1.xyz, r0.w, c21, r0
mul r0, r6.xyzz, r6.yzzx
mul r1.w, r5.z, r5.z
dp4 r4.z, r0, c27
dp4 r4.y, r0, c26
dp4 r4.x, r0, c25
mad r1.w, r6.x, r6.x, -r1
add r2.xyz, r2, r4
mul r0.xyz, r1.w, c28
add r0.xyz, r2, r0
add o6.xyz, r0, r1
mov r0.w, c35.x
mov r0.xyz, c12
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r2.xyz, r1, c29.w, -v0
mul r0.xyz, v2.zxyw, r3.yzxw
mad r1.xyz, v2.yzxw, r3.zxyw, -r0
mul r4.xyz, r1, r3.w
mov r0, c10
dp4 r6.z, c13, r0
mov r0, c9
mov r1, c8
dp4 r6.y, c13, r0
dp4 r6.x, c13, r1
dp3 o5.y, r6, r4
dp3 o7.y, r4, r2
mov r4.x, r5.w
mov r4.y, r5
add r0.xyz, r4.wxyw, -c12
dp3 r0.x, r0, r0
rsq r0.x, r0.x
dp3 o5.z, v2, r6
dp3 o5.x, r6, r3
dp3 o7.z, v2, r2
dp3 o7.x, r3, r2
rcp o4.x, r0.x
mad o1.zw, v3.xyxy, c31.xyxy, c31
mad o1.xy, v3, c30, c30.zwzw
mad o2.zw, v3.xyxy, c33.xyxy, c33
mad o2.xy, v3, c32, c32.zwzw
mad o3.xy, v3, c34, c34.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = tmpvar_1.w;
  highp vec3 tmpvar_9;
  tmpvar_9 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx));
  tmpvar_8.xyz = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)), tmpvar_9);
  if ((tmpvar_11 < 0.0)) {
    tmpvar_8.w = -1.0;
  } else {
    tmpvar_8.w = 1.0;
  };
  highp vec3 p_12;
  p_12 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  mat3 tmpvar_13;
  tmpvar_13[0] = _Object2World[0].xyz;
  tmpvar_13[1] = _Object2World[1].xyz;
  tmpvar_13[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_8.xyz;
  tmpvar_16 = (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)) * tmpvar_8.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_15.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_2.x;
  tmpvar_17[1].x = tmpvar_15.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_2.y;
  tmpvar_17[2].x = tmpvar_15.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_2.z;
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_6 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_14;
  mediump vec3 tmpvar_21;
  mediump vec4 normal_22;
  normal_22 = tmpvar_20;
  highp float vC_23;
  mediump vec3 x3_24;
  mediump vec3 x2_25;
  mediump vec3 x1_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHAr, normal_22);
  x1_26.x = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (unity_SHAg, normal_22);
  x1_26.y = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAb, normal_22);
  x1_26.z = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30 = (normal_22.xyzz * normal_22.yzzx);
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHBr, tmpvar_30);
  x2_25.x = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = dot (unity_SHBg, tmpvar_30);
  x2_25.y = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBb, tmpvar_30);
  x2_25.z = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y));
  vC_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = (unity_SHC.xyz * vC_23);
  x3_24 = tmpvar_35;
  tmpvar_21 = ((x1_26 + x2_25) + x3_24);
  shlight_3 = tmpvar_21;
  tmpvar_7 = shlight_3;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_36.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_36.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_36.z);
  highp vec4 tmpvar_40;
  tmpvar_40 = (((tmpvar_37 * tmpvar_37) + (tmpvar_38 * tmpvar_38)) + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_41;
  tmpvar_41 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_37 * tmpvar_14.x) + (tmpvar_38 * tmpvar_14.y)) + (tmpvar_39 * tmpvar_14.z)) * inversesqrt(tmpvar_40))) * (1.0/((1.0 + (tmpvar_40 * unity_4LightAtten0)))));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_7 + ((((unity_LightColor[0].xyz * tmpvar_41.x) + (unity_LightColor[1].xyz * tmpvar_41.y)) + (unity_LightColor[2].xyz * tmpvar_41.z)) + (unity_LightColor[3].xyz * tmpvar_41.w)));
  tmpvar_7 = tmpvar_42;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_12, p_12));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (tmpvar_17 * (((_World2Object * tmpvar_19).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_9 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_8 = tmpvar_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, P_30).xyz * 2.0) - 1.0);
  normalsplat2_2nd_7 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_6 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_5 = tmpvar_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp vec4 c_44;
  lowp float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD4));
  highp vec3 tmpvar_46;
  tmpvar_46 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_45) * 2.0);
  c_44.xyz = tmpvar_46;
  c_44.w = 0.0;
  c_1.w = c_44.w;
  c_1.xyz = (c_44.xyz + (tmpvar_3 * xlv_TEXCOORD5));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = tmpvar_1.w;
  highp vec3 tmpvar_9;
  tmpvar_9 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx));
  tmpvar_8.xyz = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)), tmpvar_9);
  if ((tmpvar_11 < 0.0)) {
    tmpvar_8.w = -1.0;
  } else {
    tmpvar_8.w = 1.0;
  };
  highp vec3 p_12;
  p_12 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  mat3 tmpvar_13;
  tmpvar_13[0] = _Object2World[0].xyz;
  tmpvar_13[1] = _Object2World[1].xyz;
  tmpvar_13[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_8.xyz;
  tmpvar_16 = (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)) * tmpvar_8.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_15.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_2.x;
  tmpvar_17[1].x = tmpvar_15.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_2.y;
  tmpvar_17[2].x = tmpvar_15.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_2.z;
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_6 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_14;
  mediump vec3 tmpvar_21;
  mediump vec4 normal_22;
  normal_22 = tmpvar_20;
  highp float vC_23;
  mediump vec3 x3_24;
  mediump vec3 x2_25;
  mediump vec3 x1_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHAr, normal_22);
  x1_26.x = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (unity_SHAg, normal_22);
  x1_26.y = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAb, normal_22);
  x1_26.z = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30 = (normal_22.xyzz * normal_22.yzzx);
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHBr, tmpvar_30);
  x2_25.x = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = dot (unity_SHBg, tmpvar_30);
  x2_25.y = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBb, tmpvar_30);
  x2_25.z = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y));
  vC_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = (unity_SHC.xyz * vC_23);
  x3_24 = tmpvar_35;
  tmpvar_21 = ((x1_26 + x2_25) + x3_24);
  shlight_3 = tmpvar_21;
  tmpvar_7 = shlight_3;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_36.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_36.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_36.z);
  highp vec4 tmpvar_40;
  tmpvar_40 = (((tmpvar_37 * tmpvar_37) + (tmpvar_38 * tmpvar_38)) + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_41;
  tmpvar_41 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_37 * tmpvar_14.x) + (tmpvar_38 * tmpvar_14.y)) + (tmpvar_39 * tmpvar_14.z)) * inversesqrt(tmpvar_40))) * (1.0/((1.0 + (tmpvar_40 * unity_4LightAtten0)))));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_7 + ((((unity_LightColor[0].xyz * tmpvar_41.x) + (unity_LightColor[1].xyz * tmpvar_41.y)) + (unity_LightColor[2].xyz * tmpvar_41.z)) + (unity_LightColor[3].xyz * tmpvar_41.w)));
  tmpvar_7 = tmpvar_42;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_12, p_12));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (tmpvar_17 * (((_World2Object * tmpvar_19).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 normal_27;
  normal_27.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_27.z = sqrt((1.0 - clamp (dot (normal_27.xy, normal_27.xy), 0.0, 1.0)));
  normalsplat0_10 = normal_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  normalsplat1_9 = normal_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat2_8 = normal_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_31;
  normal_31.xy = ((texture2D (_BumpMap2, P_30).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  normalsplat2_2nd_7 = normal_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat3_6 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  farnormal_5 = normal_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp vec4 c_44;
  lowp float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD4));
  highp vec3 tmpvar_46;
  tmpvar_46 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_45) * 2.0);
  c_44.xyz = tmpvar_46;
  c_44.w = 0.0;
  c_1.w = c_44.w;
  c_1.xyz = (c_44.xyz + (tmpvar_3 * xlv_TEXCOORD5));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 475
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 479
uniform highp vec4 _Splat3_ST;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 402
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 406
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 411
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 480
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 483
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 487
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    #line 491
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 495
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 499
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    #line 504
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 475
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 479
uniform highp vec4 _Splat3_ST;
#line 360
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 364
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 368
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 422
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 424
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 428
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 432
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 436
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 441
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 445
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 449
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 453
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 457
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 461
    o.Alpha = 0.0;
}
#line 506
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 508
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    #line 512
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    #line 516
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 520
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    #line 524
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_ProjectionParams]
Vector 15 [_WorldSpaceLightPos0]
Vector 16 [unity_4LightPosX0]
Vector 17 [unity_4LightPosY0]
Vector 18 [unity_4LightPosZ0]
Vector 19 [unity_4LightAtten0]
Vector 20 [unity_LightColor0]
Vector 21 [unity_LightColor1]
Vector 22 [unity_LightColor2]
Vector 23 [unity_LightColor3]
Vector 24 [unity_SHAr]
Vector 25 [unity_SHAg]
Vector 26 [unity_SHAb]
Vector 27 [unity_SHBr]
Vector 28 [unity_SHBg]
Vector 29 [unity_SHBb]
Vector 30 [unity_SHC]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 31 [unity_Scale]
Vector 32 [_Control_ST]
Vector 33 [_Splat0_ST]
Vector 34 [_Splat1_ST]
Vector 35 [_Splat2_ST]
Vector 36 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 97 ALU
PARAM c[38] = { { 0, 1, 2, -1 },
		state.matrix.mvp,
		program.local[5..36],
		{ 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
TEMP R7;
MUL R5.xyz, vertex.normal, c[31].w;
DP3 R7.x, R5, c[6];
DP4 R6.zw, vertex.position, c[6];
ADD R2, -R6.z, c[17];
DP4 R5.w, vertex.position, c[5];
DP3 R0.x, R5, c[5];
DP3 R0.z, R5, c[7];
MUL R4, R2, R2;
MUL R3, R7.x, R2;
ADD R1, -R5.w, c[16];
MAD R3, R0.x, R1, R3;
MOV R0.y, R7.x;
MOV R0.w, c[0].y;
DP4 R6.z, R0, c[26];
DP4 R6.y, R0, c[25];
DP4 R6.x, R0, c[24];
DP4 R2.zw, vertex.position, c[7];
MAD R1, R1, R1, R4;
ADD R4, -R2.z, c[18];
MUL R2.xyz, -vertex.normal.yzxw, c[0].yyxw;
MAD R1, R4, R4, R1;
MAD R3, R0.z, R4, R3;
MUL R4, R1, c[19];
MAD R2.xyz, vertex.normal.zxyw, c[0].xyyw, R2;
RSQ R1.x, R1.x;
RSQ R1.y, R1.y;
RSQ R1.w, R1.w;
RSQ R1.z, R1.z;
MUL R1, R3, R1;
ADD R3, R4, c[0].y;
RCP R3.x, R3.x;
RCP R3.y, R3.y;
RCP R3.z, R3.z;
MAX R1, R1, c[0].x;
RCP R3.w, R3.w;
MUL R1, R1, R3;
MUL R4.xyz, R1.y, c[21];
MUL R3.xyz, vertex.normal.zxyw, R2.yzxw;
MAD R4.xyz, R1.x, c[20], R4;
MAD R4.xyz, R1.z, c[22], R4;
MAD R3.xyz, vertex.normal.yzxw, R2.zxyw, -R3;
MAD R5.xyz, R1.w, c[23], R4;
MUL R1.xyz, vertex.normal.zxyw, R3.yzxw;
MAD R4.xyz, vertex.normal.yzxw, R3.zxyw, -R1;
MUL R1, R0.xyzz, R0.yzzx;
DP4 R0.w, R1, c[29];
DP4 R0.y, R1, c[27];
DP4 R0.z, R1, c[28];
ADD R1.xyz, R6, R0.yzww;
DP3 R0.y, R2, R4;
MUL R0.z, R7.x, R7.x;
SLT R0.y, R0, c[0].x;
ABS R0.w, R0.y;
MAD R0.x, R0, R0, -R0.z;
MUL R0.xyz, R0.x, c[30];
ADD R0.xyz, R1, R0;
ADD result.texcoord[5].xyz, R0, R5;
SGE R0.w, c[0].x, R0;
MAD R0.w, R0, c[0].z, c[0];
MUL R2.xyz, R0.w, R4;
MOV R1, c[15];
MOV R0.xyz, c[13];
MOV R0.w, c[0].y;
DP4 R4.z, R0, c[11];
DP4 R4.x, R0, c[9];
DP4 R4.y, R0, c[10];
MAD R0.xyz, R4, c[31].w, -vertex.position;
DP4 R4.z, R1, c[11];
DP4 R4.y, R1, c[10];
DP4 R4.x, R1, c[9];
DP3 result.texcoord[6].y, R2, R0;
DP3 result.texcoord[6].x, R3, R0;
DP4 R1.w, vertex.position, c[4];
DP4 R1.z, vertex.position, c[3];
DP3 result.texcoord[6].z, vertex.normal, R0;
DP4 R1.x, vertex.position, c[1];
DP4 R1.y, vertex.position, c[2];
DP3 result.texcoord[4].y, R4, R2;
MUL R2.xyz, R1.xyww, c[37].x;
MUL R0.y, R2, c[14].x;
MOV R0.x, R2;
ADD result.texcoord[7].xy, R0, R2.z;
MOV R5.x, R6.w;
MOV R5.y, R2.w;
ADD R0.xyz, R5.wxyw, -c[13];
DP3 R0.x, R0, R0;
RSQ R0.x, R0.x;
DP3 result.texcoord[4].x, R4, R3;
DP3 result.texcoord[4].z, vertex.normal, R4;
MOV result.position, R1;
MOV result.texcoord[7].zw, R1;
RCP result.texcoord[3].x, R0.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[33].xyxy, c[33];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[32], c[32].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[35].xyxy, c[35];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[34], c[34].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[36], c[36].zwzw;
END
# 97 instructions, 8 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Vector 16 [unity_4LightPosX0]
Vector 17 [unity_4LightPosY0]
Vector 18 [unity_4LightPosZ0]
Vector 19 [unity_4LightAtten0]
Vector 20 [unity_LightColor0]
Vector 21 [unity_LightColor1]
Vector 22 [unity_LightColor2]
Vector 23 [unity_LightColor3]
Vector 24 [unity_SHAr]
Vector 25 [unity_SHAg]
Vector 26 [unity_SHAb]
Vector 27 [unity_SHBr]
Vector 28 [unity_SHBg]
Vector 29 [unity_SHBb]
Vector 30 [unity_SHC]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 31 [unity_Scale]
Vector 32 [_Control_ST]
Vector 33 [_Splat0_ST]
Vector 34 [_Splat1_ST]
Vector 35 [_Splat2_ST]
Vector 36 [_Splat3_ST]
"vs_3_0
; 99 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c37, 1.00000000, 0.00000000, -1.00000000, 0.50000000
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
mul r0.xyz, -v2.yzxw, c37.xxyw
mad r0.xyz, v2.zxyw, c37.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r3.xyz, v2.yzxw, r0.zxyw, -r1
mul r1.xyz, r3.yzxw, v2.zxyw
mad r1.xyz, r3.zxyw, v2.yzxw, -r1
dp3 r0.x, r0, r1
if_lt r0.x, c37.y
mov r3.w, c37.z
else
mov r3.w, c37.x
endif
mul r4.xyz, v2, c31.w
dp4 r5.zw, v0, c5
add r1, -r5.z, c17
dp3 r5.z, r4, c5
dp3 r6.x, r4, c4
dp3 r4.x, r4, c6
dp4 r4.w, v0, c4
mul r2, r5.z, r1
add r0, -r4.w, c16
mul r1, r1, r1
mov r6.z, r4.x
mov r6.y, r5.z
mad r2, r6.x, r0, r2
mov r6.w, c37.x
dp4 r5.xy, v0, c6
mad r1, r0, r0, r1
add r0, -r5.x, c18
mad r1, r0, r0, r1
mad r0, r4.x, r0, r2
mul r2, r1, c19
rsq r1.x, r1.x
rsq r1.y, r1.y
rsq r1.w, r1.w
rsq r1.z, r1.z
mul r0, r0, r1
add r1, r2, c37.x
dp4 r2.z, r6, c26
dp4 r2.y, r6, c25
dp4 r2.x, r6, c24
rcp r1.x, r1.x
rcp r1.y, r1.y
rcp r1.w, r1.w
rcp r1.z, r1.z
max r0, r0, c37.y
mul r0, r0, r1
mul r1.xyz, r0.y, c21
mad r1.xyz, r0.x, c20, r1
mad r0.xyz, r0.z, c22, r1
mad r1.xyz, r0.w, c23, r0
mul r0, r6.xyzz, r6.yzzx
mul r1.w, r5.z, r5.z
dp4 r4.z, r0, c29
dp4 r4.y, r0, c28
dp4 r4.x, r0, c27
mad r1.w, r6.x, r6.x, -r1
add r2.xyz, r2, r4
mul r0.xyz, r1.w, c30
add r0.xyz, r2, r0
add o6.xyz, r0, r1
mov r0.w, c37.x
mov r0.xyz, c12
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r2.xyz, r1, c31.w, -v0
mul r0.xyz, v2.zxyw, r3.yzxw
mad r1.xyz, v2.yzxw, r3.zxyw, -r0
mul r4.xyz, r1, r3.w
mov r0, c10
dp4 r6.z, c15, r0
mov r0, c9
dp4 r6.y, c15, r0
mov r1, c8
dp4 r6.x, c15, r1
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c37.w
mul r1.y, r1, c13.x
dp3 o5.y, r6, r4
dp3 o7.y, r4, r2
mad o8.xy, r1.z, c14.zwzw, r1
mov r4.x, r5.w
mov r4.y, r5
add r1.xyz, r4.wxyw, -c12
dp3 r1.x, r1, r1
mov o0, r0
rsq r0.x, r1.x
dp3 o5.z, v2, r6
dp3 o5.x, r6, r3
dp3 o7.z, v2, r2
dp3 o7.x, r3, r2
mov o8.zw, r0
rcp o4.x, r0.x
mad o1.zw, v3.xyxy, c33.xyxy, c33
mad o1.xy, v3, c32, c32.zwzw
mad o2.zw, v3.xyxy, c35.xyxy, c35
mad o2.xy, v3, c34, c34.zwzw
mad o3.xy, v3, c36, c36.zwzw
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = tmpvar_1.w;
  highp vec3 tmpvar_9;
  tmpvar_9 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx));
  tmpvar_8.xyz = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)), tmpvar_9);
  if ((tmpvar_11 < 0.0)) {
    tmpvar_8.w = -1.0;
  } else {
    tmpvar_8.w = 1.0;
  };
  highp vec3 p_12;
  p_12 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  mat3 tmpvar_13;
  tmpvar_13[0] = _Object2World[0].xyz;
  tmpvar_13[1] = _Object2World[1].xyz;
  tmpvar_13[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_8.xyz;
  tmpvar_16 = (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)) * tmpvar_8.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_15.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_2.x;
  tmpvar_17[1].x = tmpvar_15.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_2.y;
  tmpvar_17[2].x = tmpvar_15.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_2.z;
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_6 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_14;
  mediump vec3 tmpvar_21;
  mediump vec4 normal_22;
  normal_22 = tmpvar_20;
  highp float vC_23;
  mediump vec3 x3_24;
  mediump vec3 x2_25;
  mediump vec3 x1_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHAr, normal_22);
  x1_26.x = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (unity_SHAg, normal_22);
  x1_26.y = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAb, normal_22);
  x1_26.z = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30 = (normal_22.xyzz * normal_22.yzzx);
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHBr, tmpvar_30);
  x2_25.x = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = dot (unity_SHBg, tmpvar_30);
  x2_25.y = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBb, tmpvar_30);
  x2_25.z = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y));
  vC_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = (unity_SHC.xyz * vC_23);
  x3_24 = tmpvar_35;
  tmpvar_21 = ((x1_26 + x2_25) + x3_24);
  shlight_3 = tmpvar_21;
  tmpvar_7 = shlight_3;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_36.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_36.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_36.z);
  highp vec4 tmpvar_40;
  tmpvar_40 = (((tmpvar_37 * tmpvar_37) + (tmpvar_38 * tmpvar_38)) + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_41;
  tmpvar_41 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_37 * tmpvar_14.x) + (tmpvar_38 * tmpvar_14.y)) + (tmpvar_39 * tmpvar_14.z)) * inversesqrt(tmpvar_40))) * (1.0/((1.0 + (tmpvar_40 * unity_4LightAtten0)))));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_7 + ((((unity_LightColor[0].xyz * tmpvar_41.x) + (unity_LightColor[1].xyz * tmpvar_41.y)) + (unity_LightColor[2].xyz * tmpvar_41.z)) + (unity_LightColor[3].xyz * tmpvar_41.w)));
  tmpvar_7 = tmpvar_42;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_12, p_12));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (tmpvar_17 * (((_World2Object * tmpvar_19).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD7;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_9 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_8 = tmpvar_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, P_30).xyz * 2.0) - 1.0);
  normalsplat2_2nd_7 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_6 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_5 = tmpvar_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp float tmpvar_44;
  mediump float lightShadowDataX_45;
  highp float dist_46;
  lowp float tmpvar_47;
  tmpvar_47 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_46 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = _LightShadowData.x;
  lightShadowDataX_45 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = max (float((dist_46 > (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))), lightShadowDataX_45);
  tmpvar_44 = tmpvar_49;
  lowp vec4 c_50;
  lowp float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD4));
  highp vec3 tmpvar_52;
  tmpvar_52 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_51) * (tmpvar_44 * 2.0));
  c_50.xyz = tmpvar_52;
  c_50.w = 0.0;
  c_1.w = c_50.w;
  c_1.xyz = (c_50.xyz + (tmpvar_3 * xlv_TEXCOORD5));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = tmpvar_1.w;
  highp vec3 tmpvar_9;
  tmpvar_9 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx));
  tmpvar_8.xyz = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)), tmpvar_9);
  if ((tmpvar_11 < 0.0)) {
    tmpvar_8.w = -1.0;
  } else {
    tmpvar_8.w = 1.0;
  };
  highp vec3 p_12;
  p_12 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_13;
  tmpvar_13 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_8.xyz;
  tmpvar_17 = (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)) * tmpvar_8.w);
  highp mat3 tmpvar_18;
  tmpvar_18[0].x = tmpvar_16.x;
  tmpvar_18[0].y = tmpvar_17.x;
  tmpvar_18[0].z = tmpvar_2.x;
  tmpvar_18[1].x = tmpvar_16.y;
  tmpvar_18[1].y = tmpvar_17.y;
  tmpvar_18[1].z = tmpvar_2.y;
  tmpvar_18[2].x = tmpvar_16.z;
  tmpvar_18[2].y = tmpvar_17.z;
  tmpvar_18[2].z = tmpvar_2.z;
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_6 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_15;
  mediump vec3 tmpvar_22;
  mediump vec4 normal_23;
  normal_23 = tmpvar_21;
  highp float vC_24;
  mediump vec3 x3_25;
  mediump vec3 x2_26;
  mediump vec3 x1_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (unity_SHAr, normal_23);
  x1_27.x = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAg, normal_23);
  x1_27.y = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHAb, normal_23);
  x1_27.z = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31 = (normal_23.xyzz * normal_23.yzzx);
  highp float tmpvar_32;
  tmpvar_32 = dot (unity_SHBr, tmpvar_31);
  x2_26.x = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBg, tmpvar_31);
  x2_26.y = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = dot (unity_SHBb, tmpvar_31);
  x2_26.z = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y));
  vC_24 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (unity_SHC.xyz * vC_24);
  x3_25 = tmpvar_36;
  tmpvar_22 = ((x1_27 + x2_26) + x3_25);
  shlight_3 = tmpvar_22;
  tmpvar_7 = shlight_3;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosX0 - tmpvar_37.x);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosY0 - tmpvar_37.y);
  highp vec4 tmpvar_40;
  tmpvar_40 = (unity_4LightPosZ0 - tmpvar_37.z);
  highp vec4 tmpvar_41;
  tmpvar_41 = (((tmpvar_38 * tmpvar_38) + (tmpvar_39 * tmpvar_39)) + (tmpvar_40 * tmpvar_40));
  highp vec4 tmpvar_42;
  tmpvar_42 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_38 * tmpvar_15.x) + (tmpvar_39 * tmpvar_15.y)) + (tmpvar_40 * tmpvar_15.z)) * inversesqrt(tmpvar_41))) * (1.0/((1.0 + (tmpvar_41 * unity_4LightAtten0)))));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_7 + ((((unity_LightColor[0].xyz * tmpvar_42.x) + (unity_LightColor[1].xyz * tmpvar_42.y)) + (unity_LightColor[2].xyz * tmpvar_42.z)) + (unity_LightColor[3].xyz * tmpvar_42.w)));
  tmpvar_7 = tmpvar_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_13 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = tmpvar_13.zw;
  gl_Position = tmpvar_13;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_12, p_12));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (tmpvar_18 * (((_World2Object * tmpvar_20).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD7 = o_44;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD7;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 normal_27;
  normal_27.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_27.z = sqrt((1.0 - clamp (dot (normal_27.xy, normal_27.xy), 0.0, 1.0)));
  normalsplat0_10 = normal_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  normalsplat1_9 = normal_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat2_8 = normal_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_31;
  normal_31.xy = ((texture2D (_BumpMap2, P_30).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  normalsplat2_2nd_7 = normal_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat3_6 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  farnormal_5 = normal_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  lowp vec4 c_45;
  lowp float tmpvar_46;
  tmpvar_46 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD4));
  highp vec3 tmpvar_47;
  tmpvar_47 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_46) * (tmpvar_44.x * 2.0));
  c_45.xyz = tmpvar_47;
  c_45.w = 0.0;
  c_1.w = c_45.w;
  c_1.xyz = (c_45.xyz + (tmpvar_3 * xlv_TEXCOORD5));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 484
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 488
uniform highp vec4 _Splat3_ST;
#line 516
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 410
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 414
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 419
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 489
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 492
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 496
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    #line 500
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 504
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 508
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    #line 512
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 484
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 488
uniform highp vec4 _Splat3_ST;
#line 516
#line 360
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 364
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 368
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 430
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 432
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 436
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 440
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 444
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 449
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 453
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 457
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 461
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 465
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 469
    o.Alpha = 0.0;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 397
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 516
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    #line 520
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    #line 524
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 528
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    #line 532
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    #line 536
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = tmpvar_1.w;
  highp vec3 tmpvar_9;
  tmpvar_9 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx));
  tmpvar_8.xyz = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)), tmpvar_9);
  if ((tmpvar_11 < 0.0)) {
    tmpvar_8.w = -1.0;
  } else {
    tmpvar_8.w = 1.0;
  };
  highp vec3 p_12;
  p_12 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  mat3 tmpvar_13;
  tmpvar_13[0] = _Object2World[0].xyz;
  tmpvar_13[1] = _Object2World[1].xyz;
  tmpvar_13[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_8.xyz;
  tmpvar_15 = (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)) * tmpvar_8.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_14.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_2.x;
  tmpvar_16[1].x = tmpvar_14.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_2.y;
  tmpvar_16[2].x = tmpvar_14.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_2.z;
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_16 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_6 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = (tmpvar_13 * (tmpvar_2 * unity_Scale.w));
  mediump vec3 tmpvar_20;
  mediump vec4 normal_21;
  normal_21 = tmpvar_19;
  highp float vC_22;
  mediump vec3 x3_23;
  mediump vec3 x2_24;
  mediump vec3 x1_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (unity_SHAr, normal_21);
  x1_25.x = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHAg, normal_21);
  x1_25.y = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (unity_SHAb, normal_21);
  x1_25.z = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normal_21.xyzz * normal_21.yzzx);
  highp float tmpvar_30;
  tmpvar_30 = dot (unity_SHBr, tmpvar_29);
  x2_24.x = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHBg, tmpvar_29);
  x2_24.y = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = dot (unity_SHBb, tmpvar_29);
  x2_24.z = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y));
  vC_22 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = (unity_SHC.xyz * vC_22);
  x3_23 = tmpvar_34;
  tmpvar_20 = ((x1_25 + x2_24) + x3_23);
  shlight_3 = tmpvar_20;
  tmpvar_7 = shlight_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_12, p_12));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (tmpvar_16 * (((_World2Object * tmpvar_18).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_9 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_8 = tmpvar_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, P_30).xyz * 2.0) - 1.0);
  normalsplat2_2nd_7 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_6 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_5 = tmpvar_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp float shadow_44;
  lowp float tmpvar_45;
  tmpvar_45 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  highp float tmpvar_46;
  tmpvar_46 = (_LightShadowData.x + (tmpvar_45 * (1.0 - _LightShadowData.x)));
  shadow_44 = tmpvar_46;
  lowp vec4 c_47;
  lowp float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD4));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_48) * (shadow_44 * 2.0));
  c_47.xyz = tmpvar_49;
  c_47.w = 0.0;
  c_1.w = c_47.w;
  c_1.xyz = (c_47.xyz + (tmpvar_3 * xlv_TEXCOORD5));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 484
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 488
uniform highp vec4 _Splat3_ST;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 410
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 414
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 419
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 489
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 492
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 496
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    #line 500
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 504
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 508
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 512
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 484
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 488
uniform highp vec4 _Splat3_ST;
#line 360
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 364
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 368
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 430
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 432
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 436
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 440
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 444
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 449
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 453
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 457
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 461
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 465
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 469
    o.Alpha = 0.0;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 397
    return shadow;
}
#line 514
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 516
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    #line 520
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    #line 524
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 528
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    #line 532
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 p_3;
  p_3 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_Lightmap;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_9 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_8 = tmpvar_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, P_30).xyz * 2.0) - 1.0);
  normalsplat2_2nd_7 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_6 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_5 = tmpvar_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp float shadow_44;
  lowp float tmpvar_45;
  tmpvar_45 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  highp float tmpvar_46;
  tmpvar_46 = (_LightShadowData.x + (tmpvar_45 * (1.0 - _LightShadowData.x)));
  shadow_44 = tmpvar_46;
  c_1.xyz = (tmpvar_3 * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD4).xyz), vec3((shadow_44 * 2.0))));
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 482
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 486
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
uniform sampler2D unity_Lightmap;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 410
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 414
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 419
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 488
v2f_surf vert_surf( in appdata_full v ) {
    #line 490
    v2f_surf o;
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    #line 494
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    #line 498
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 502
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 507
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out highp vec2 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec2(xl_retval.lmap);
    xlv_TEXCOORD5 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec2 lmap;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 482
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 486
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
uniform sampler2D unity_Lightmap;
#line 177
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 179
    return (2.0 * color.xyz);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 430
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 432
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 436
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 440
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 444
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 449
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 453
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 457
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 461
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 465
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 469
    o.Alpha = 0.0;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 397
    return shadow;
}
#line 510
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 512
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    #line 516
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    #line 520
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 524
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    #line 528
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec3 lm = DecodeLightmap( lmtex);
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    c.w = o.Alpha;
    #line 532
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in highp vec2 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lmap = vec2(xlv_TEXCOORD4);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD5);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = tmpvar_1.w;
  highp vec3 tmpvar_6;
  tmpvar_6 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_7;
  tmpvar_7 = ((tmpvar_2.yzx * tmpvar_6.zxy) - (tmpvar_2.zxy * tmpvar_6.yzx));
  tmpvar_5.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = dot (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)), tmpvar_6);
  if ((tmpvar_8 < 0.0)) {
    tmpvar_5.w = -1.0;
  } else {
    tmpvar_5.w = 1.0;
  };
  highp vec3 p_9;
  p_9 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_5.xyz;
  tmpvar_11 = (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)) * tmpvar_5.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_2.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_2.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_2.z;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_9, p_9));
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = (tmpvar_12 * (((_World2Object * tmpvar_13).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_9 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_8 = tmpvar_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, P_30).xyz * 2.0) - 1.0);
  normalsplat2_2nd_7 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_6 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_5 = tmpvar_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp float shadow_44;
  lowp float tmpvar_45;
  tmpvar_45 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  highp float tmpvar_46;
  tmpvar_46 = (_LightShadowData.x + (tmpvar_45 * (1.0 - _LightShadowData.x)));
  shadow_44 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(xlv_TEXCOORD5);
  mediump vec4 tmpvar_48;
  mediump vec3 viewDir_49;
  viewDir_49 = tmpvar_47;
  highp float nh_50;
  mat3 tmpvar_51;
  tmpvar_51[0].x = 0.816497;
  tmpvar_51[0].y = -0.408248;
  tmpvar_51[0].z = -0.408248;
  tmpvar_51[1].x = 0.0;
  tmpvar_51[1].y = 0.707107;
  tmpvar_51[1].z = -0.707107;
  tmpvar_51[2].x = 0.57735;
  tmpvar_51[2].y = 0.57735;
  tmpvar_51[2].z = 0.57735;
  mediump vec3 normal_52;
  normal_52 = tmpvar_4;
  mediump vec3 scalePerBasisVector_53;
  mediump vec3 lm_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD4).xyz);
  lm_54 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD4).xyz);
  scalePerBasisVector_53 = tmpvar_56;
  lm_54 = (lm_54 * dot (clamp ((tmpvar_51 * normal_52), 0.0, 1.0), scalePerBasisVector_53));
  vec3 v_57;
  v_57.x = tmpvar_51[0].x;
  v_57.y = tmpvar_51[1].x;
  v_57.z = tmpvar_51[2].x;
  vec3 v_58;
  v_58.x = tmpvar_51[0].y;
  v_58.y = tmpvar_51[1].y;
  v_58.z = tmpvar_51[2].y;
  vec3 v_59;
  v_59.x = tmpvar_51[0].z;
  v_59.y = tmpvar_51[1].z;
  v_59.z = tmpvar_51[2].z;
  mediump float tmpvar_60;
  tmpvar_60 = max (0.0, dot (tmpvar_4, normalize((normalize((((scalePerBasisVector_53.x * v_57) + (scalePerBasisVector_53.y * v_58)) + (scalePerBasisVector_53.z * v_59))) + viewDir_49))));
  nh_50 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61.xyz = lm_54;
  tmpvar_61.w = pow (nh_50, 0.0);
  tmpvar_48 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62 = vec3((shadow_44 * 2.0));
  mediump vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_3 * min (tmpvar_48.xyz, tmpvar_62));
  c_1.xyz = tmpvar_63;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 483
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 487
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
#line 512
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 410
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 414
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 419
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 489
v2f_surf vert_surf( in appdata_full v ) {
    #line 491
    v2f_surf o;
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    #line 495
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    #line 499
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 503
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 507
    o.viewDir = viewDirForLight;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out highp vec2 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec2(xl_retval.lmap);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec2 lmap;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 483
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 487
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
#line 512
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
#line 177
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 179
    return (2.0 * color.xyz);
}
#line 325
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 329
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 334
    return lm;
}
#line 379
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 381
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 385
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * _SpecColor.xyz) * s.Gloss) * spec);
    #line 389
    return vec4( lm, spec);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 430
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 432
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 436
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 440
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 444
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 449
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 453
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 457
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 461
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 465
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 469
    o.Alpha = 0.0;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 397
    return shadow;
}
#line 514
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 516
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    #line 520
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    #line 524
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 528
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    #line 532
    mediump vec3 specColor;
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    mediump vec3 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor).xyz;
    #line 536
    c.xyz += specColor;
    c.xyz += (o.Albedo * min( lm, vec3( (atten * 2.0))));
    c.w = o.Alpha;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in highp vec2 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lmap = vec2(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec3 shlight_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec3 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = tmpvar_1.w;
  highp vec3 tmpvar_9;
  tmpvar_9 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx));
  tmpvar_8.xyz = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)), tmpvar_9);
  if ((tmpvar_11 < 0.0)) {
    tmpvar_8.w = -1.0;
  } else {
    tmpvar_8.w = 1.0;
  };
  highp vec3 p_12;
  p_12 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  mat3 tmpvar_13;
  tmpvar_13[0] = _Object2World[0].xyz;
  tmpvar_13[1] = _Object2World[1].xyz;
  tmpvar_13[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (tmpvar_2 * unity_Scale.w));
  highp vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_8.xyz;
  tmpvar_16 = (((tmpvar_2.yzx * tmpvar_10.zxy) - (tmpvar_2.zxy * tmpvar_10.yzx)) * tmpvar_8.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_15.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_2.x;
  tmpvar_17[1].x = tmpvar_15.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_2.y;
  tmpvar_17[2].x = tmpvar_15.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_2.z;
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_6 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = _WorldSpaceCameraPos;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_14;
  mediump vec3 tmpvar_21;
  mediump vec4 normal_22;
  normal_22 = tmpvar_20;
  highp float vC_23;
  mediump vec3 x3_24;
  mediump vec3 x2_25;
  mediump vec3 x1_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (unity_SHAr, normal_22);
  x1_26.x = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = dot (unity_SHAg, normal_22);
  x1_26.y = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = dot (unity_SHAb, normal_22);
  x1_26.z = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30 = (normal_22.xyzz * normal_22.yzzx);
  highp float tmpvar_31;
  tmpvar_31 = dot (unity_SHBr, tmpvar_30);
  x2_25.x = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = dot (unity_SHBg, tmpvar_30);
  x2_25.y = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = dot (unity_SHBb, tmpvar_30);
  x2_25.z = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y));
  vC_23 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = (unity_SHC.xyz * vC_23);
  x3_24 = tmpvar_35;
  tmpvar_21 = ((x1_26 + x2_25) + x3_24);
  shlight_3 = tmpvar_21;
  tmpvar_7 = shlight_3;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_36.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_36.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_36.z);
  highp vec4 tmpvar_40;
  tmpvar_40 = (((tmpvar_37 * tmpvar_37) + (tmpvar_38 * tmpvar_38)) + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_41;
  tmpvar_41 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_37 * tmpvar_14.x) + (tmpvar_38 * tmpvar_14.y)) + (tmpvar_39 * tmpvar_14.z)) * inversesqrt(tmpvar_40))) * (1.0/((1.0 + (tmpvar_40 * unity_4LightAtten0)))));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_7 + ((((unity_LightColor[0].xyz * tmpvar_41.x) + (unity_LightColor[1].xyz * tmpvar_41.y)) + (unity_LightColor[2].xyz * tmpvar_41.z)) + (unity_LightColor[3].xyz * tmpvar_41.w)));
  tmpvar_7 = tmpvar_42;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_12, p_12));
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (tmpvar_17 * (((_World2Object * tmpvar_19).xyz * unity_Scale.w) - _glesVertex.xyz));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = tmpvar_2;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec3 splatcol3_11;
  mediump vec3 splatcol2_2nd_12;
  mediump vec3 splatcol2_13;
  mediump vec3 splatcol1_14;
  mediump vec3 splatcol0_15;
  mediump vec4 splat_control_16;
  mediump vec3 colorMap_17;
  mediump vec3 finalCol_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_17 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_15 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_14 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_13 = tmpvar_23;
  highp vec2 P_24;
  P_24 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, P_24).xyz;
  splatcol2_2nd_12 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_10 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_9 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_8 = tmpvar_29;
  highp vec2 P_30;
  P_30 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, P_30).xyz * 2.0) - 1.0);
  normalsplat2_2nd_7 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_6 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_5 = tmpvar_33;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_34;
    highp vec3 tmpvar_35;
    tmpvar_35 = (splat_control_16.x * normalsplat0_10);
    tmpvar_4 = tmpvar_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (tmpvar_4 + (splat_control_16.y * normalsplat1_9));
    tmpvar_4 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_4 + (splat_control_16.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_4 + (splat_control_16.w * normalsplat3_6));
    tmpvar_4 = tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_40;
    tmpvar_40 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(tmpvar_39));
    tmpvar_4 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = ((((splat_control_16.x * _ColTex0) + (splat_control_16.y * _ColTex1)) + (splat_control_16.z * _ColTex2)) + (splat_control_16.w * _ColTex3));
    color_correction_34 = tmpvar_41;
    mediump vec3 tmpvar_42;
    tmpvar_42 = (((((splat_control_16.x * splatcol0_15) + (splat_control_16.y * splatcol1_14)) + (splat_control_16.z * ((splatcol2_13 * 0.65) + (splatcol2_2nd_12 * 0.35)))) + (splat_control_16.w * splatcol3_11)) * (colorMap_17 / color_correction_34));
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (tmpvar_42, colorMap_17, vec3(tmpvar_39));
    finalCol_18 = tmpvar_43;
  } else {
    finalCol_18 = colorMap_17;
    tmpvar_4 = farnormal_5;
  };
  tmpvar_3 = finalCol_18;
  tmpvar_2 = tmpvar_4;
  lowp float shadow_44;
  lowp float tmpvar_45;
  tmpvar_45 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  highp float tmpvar_46;
  tmpvar_46 = (_LightShadowData.x + (tmpvar_45 * (1.0 - _LightShadowData.x)));
  shadow_44 = tmpvar_46;
  lowp vec4 c_47;
  lowp float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_4, xlv_TEXCOORD4));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((tmpvar_3 * _LightColor0.xyz) * tmpvar_48) * (shadow_44 * 2.0));
  c_47.xyz = tmpvar_49;
  c_47.w = 0.0;
  c_1.w = c_47.w;
  c_1.xyz = (c_47.xyz + (tmpvar_3 * xlv_TEXCOORD5));
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 484
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 488
uniform highp vec4 _Splat3_ST;
#line 516
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 410
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 414
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 419
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 489
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 492
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 496
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    #line 500
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    #line 504
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 508
    highp vec3 shlight = ShadeSH9( vec4( worldN, 1.0));
    o.vlight = shlight;
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    #line 512
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 399
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 471
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
#line 410
uniform sampler2D _Control;
#line 423
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 427
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 484
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 488
uniform highp vec4 _Splat3_ST;
#line 516
#line 360
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 364
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 368
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 430
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 432
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 436
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 440
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 444
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 449
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 453
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 457
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 461
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 465
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 469
    o.Alpha = 0.0;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 397
    return shadow;
}
#line 516
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    #line 520
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    #line 524
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 528
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    #line 532
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingBlinnPhong( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    #line 536
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 6
//   opengl - ALU: 37 to 110, TEX: 8 to 16
//   d3d9 - ALU: 30 to 96, TEX: 8 to 16, FLOW: 2 to 2
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [_LightColor0]
Vector 1 [_ColTex0]
Vector 2 [_ColTex1]
Vector 3 [_ColTex2]
Vector 4 [_ColTex3]
Float 5 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
"3.0-!!ARBfp1.0
# 98 ALU, 13 TEX
PARAM c[8] = { program.local[0..5],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766, 2, 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R2.xy, fragment.texcoord[1].zwzw, c[7].x;
MOV R1.w, c[6].y;
TEX R3.yw, R2, texture[8], 2D;
MAD R1.xy, R3.wyzw, c[7].z, -R1.w;
MUL R2.zw, R1.xyxy, R1.xyxy;
TEX R0.yw, fragment.texcoord[1].zwzw, texture[8], 2D;
MAD R0.xy, R0.wyzw, c[7].z, -R1.w;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD_SAT R1.z, R2, R2.w;
ADD R0.w, -R1.z, c[6].y;
RSQ R0.w, R0.w;
TEX R3.yw, fragment.texcoord[0].zwzw, texture[6], 2D;
MAD R3.xy, R3.wyzw, c[7].z, -R1.w;
ADD R0.z, -R0, c[6].y;
RSQ R0.z, R0.z;
MUL R2.zw, R3.xyxy, R3.xyxy;
RCP R1.z, R0.w;
RCP R0.z, R0.z;
ADD R4.xyz, R0, R1;
ADD_SAT R1.z, R2, R2.w;
TEX R5.yw, fragment.texcoord[1], texture[7], 2D;
MAD R1.xy, R5.wyzw, c[7].z, -R1.w;
MUL R3.zw, R1.xyxy, R1.xyxy;
ADD_SAT R3.z, R3, R3.w;
ADD R2.z, -R3, c[6].y;
TEX R0, fragment.texcoord[0], texture[1], 2D;
RSQ R2.w, R2.z;
ADD R1.z, -R1, c[6].y;
RSQ R2.z, R1.z;
RCP R1.z, R2.w;
RCP R3.z, R2.z;
MUL R3.xyz, R0.x, R3;
MUL R1.xyz, R0.y, R1;
ADD R1.xyz, R3, R1;
MUL R3.xyz, R0.z, R4;
MUL R3.xyz, R3, c[7].w;
ADD R1.xyz, R1, R3;
TEX R4.yw, fragment.texcoord[2], texture[9], 2D;
MAD R4.xy, R4.wyzw, c[7].z, -R1.w;
MUL R2.zw, R4.xyxy, R4.xyxy;
TEX R3.yw, fragment.texcoord[0], texture[10], 2D;
MAD R3.xy, R3.wyzw, c[7].z, -R1.w;
ADD_SAT R2.z, R2, R2.w;
ADD R1.w, -R2.z, c[6].y;
RSQ R3.z, R1.w;
MUL R2.zw, R3.xyxy, R3.xyxy;
ADD_SAT R1.w, R2.z, R2;
RCP R4.z, R3.z;
MUL R4.xyz, R0.w, R4;
ADD R1.w, -R1, c[6].y;
RSQ R1.w, R1.w;
RCP R3.z, R1.w;
ADD R1.xyz, R1, R4;
ADD R4.xyz, R3, R1;
DP3 R1.x, R4, R4;
RSQ R2.z, R1.x;
MAD R1.xyz, -R2.z, R4, R3;
RCP R1.w, c[5].x;
MUL R1.w, fragment.texcoord[3].x, R1;
POW R2.w, R1.w, c[6].z;
MUL R4.xyz, R2.z, R4;
MAD R4.xyz, R2.w, R1, R4;
MUL R1.xyz, R0.y, c[2];
SLT R1.w, fragment.texcoord[3].x, c[5].x;
ABS R1.w, R1;
CMP R1.w, -R1, c[6].x, c[6].y;
MAD R1.xyz, R0.x, c[1], R1;
CMP R4.xyz, -R1.w, R3, R4;
MAD R3.xyz, R0.z, c[3], R1;
TEX R1.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R5.xyz, R0.y, R1;
TEX R1.xyz, R2, texture[4], 2D;
TEX R2.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R2.xyz, R0.x, R2, R5;
MUL R5.xyz, R1, c[7].y;
TEX R1.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R1.xyz, R1, c[6].w, R5;
MAD R0.xyz, R0.z, R1, R2;
MAD R3.xyz, R0.w, c[4], R3;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
RCP R2.x, R3.x;
RCP R2.y, R3.y;
RCP R2.z, R3.z;
MUL R3.xyz, R1, R2;
TEX R2.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R0.xyz, R0.w, R2, R0;
MUL R2.xyz, R0, R3;
MAD R0.xyz, -R0, R3, R1;
MAD R0.xyz, R2.w, R0, R2;
CMP R0.xyz, -R1.w, R1, R0;
DP3 R0.w, R4, fragment.texcoord[4];
MAX R0.w, R0, c[6].x;
MUL R1.xyz, R0, c[0];
MUL R1.xyz, R1, R0.w;
MUL R1.xyz, R1, c[7].z;
MAD result.color.xyz, R0, fragment.texcoord[5], R1;
MOV result.color.w, c[6].x;
END
# 98 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [_LightColor0]
Vector 1 [_ColTex0]
Vector 2 [_ColTex1]
Vector 3 [_ColTex2]
Vector 4 [_ColTex3]
Float 5 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
"ps_3_0
; 86 ALU, 13 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
dcl_2d s10
def c6, -0.50000000, 2.00000000, -1.00000000, 1.00000000
def c7, 4.00000000, 0.50000000, 0.35009766, 0.64990234
def c8, 0.00000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
mul r9.xy, v1.zwzw, c6.x
texld r1, v0, s1
mov_pp r2, r1
texld r1.xyz, v1, s3
texld r10.yw, r9, s8
texld r11.yw, v2, s9
texld r0.xyz, v0, s0
mov_pp r12.xyz, r1
texld r1.xyz, v1.zwzw, s4
mov_pp r4.xyz, r1
texld r1.xyz, v2, s5
mov_pp r6.xyz, r1
texld r1.yw, v1, s7
mad_pp r8.xy, r1.wyzw, c6.y, c6.z
texld r7.yw, v0.zwzw, s6
mad_pp r7.xy, r7.wyzw, c6.y, c6.z
mul_pp r1.xy, r7, r7
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r8.xyxy, r8.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c6
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c6.w
rsq_pp r1.x, r1.x
texld r1.yw, v1.zwzw, s8
texld r5.xyz, r9, s4
mad_pp r9.xy, r1.wyzw, c6.y, c6.z
rcp_pp r8.z, r1.x
mad_pp r10.xy, r10.wyzw, c6.y, c6.z
mul_pp r1.xy, r9, r9
rcp_pp r7.z, r0.w
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r10.xyxy, r10.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c6
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c6.w
rsq_pp r1.x, r1.x
texld r1.yw, v0, s10
rcp_pp r10.z, r1.x
mad_pp r11.xy, r11.wyzw, c6.y, c6.z
mad_pp r1.xy, r1.wyzw, c6.y, c6.z
mul_pp r1.zw, r11.xyxy, r11.xyxy
rcp_pp r9.z, r0.w
add_pp_sat r0.w, r1.z, r1
mul_pp r11.zw, r1.xyxy, r1.xyxy
add_pp_sat r1.z, r11, r11.w
add_pp r0.w, -r0, c6
add_pp r1.z, -r1, c6.w
rsq_pp r0.w, r0.w
rsq_pp r1.z, r1.z
texld r3.xyz, v0.zwzw, s2
rcp_pp r11.z, r0.w
rcp_pp r1.z, r1.z
if_lt v3.x, c5.x
mul_pp r12.xyz, r2.y, r12
mul_pp r5.xyz, r5, c7.z
mad_pp r4.xyz, r4, c7.w, r5
mad_pp r3.xyz, r2.x, r3, r12
mad_pp r3.xyz, r2.z, r4, r3
mul r13.xyz, r2.y, c2
mad r12.xyz, r2.x, c1, r13
mad r12.xyz, r2.z, c3, r12
mad r4.xyz, r2.w, c4, r12
add r5.xyz, r9, r10
rcp r0.w, c5.x
mad_pp r3.xyz, r2.w, r6, r3
mul r5.xyz, r2.z, r5
mul r0.w, v3.x, r0
rcp_pp r4.x, r4.x
rcp_pp r4.z, r4.z
rcp_pp r4.y, r4.y
mul_pp r4.xyz, r0, r4
mad_pp r0.xyz, -r3, r4, r0
mul_pp r3.xyz, r3, r4
mul r4.xyz, r5, c7.y
mul r5.xyz, r2.y, r8
mul r2.xyz, r2.x, r7
add_pp r2.xyz, r2, r5
add_pp r2.xyz, r2, r4
mul r4.xyz, r2.w, r11
add_pp r2.xyz, r2, r4
add r4.xyz, r2, r1
pow r2, r0.w, c7.x
dp3 r0.w, r4, r4
rsq r1.w, r0.w
mov r0.w, r2.x
mul r2.xyz, r1.w, r4
mad r1.xyz, -r1.w, r4, r1
mad_pp r0.xyz, r0.w, r0, r3
mad r1.xyz, r0.w, r1, r2
else
endif
dp3_pp r0.w, r1, v4
max_pp r0.w, r0, c8.x
mul_pp r1.xyz, r0, c0
mul_pp r1.xyz, r1, r0.w
mul r1.xyz, r1, c6.y
mad_pp oC0.xyz, r0, v5, r1
mov_pp oC0.w, c8.x
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 11 [unity_Lightmap] 2D
"3.0-!!ARBfp1.0
# 37 ALU, 8 TEX
PARAM c[7] = { program.local[0..4],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766, 8 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEX R0, fragment.texcoord[0], texture[1], 2D;
MUL R1.xyz, R0.y, c[1];
MAD R1.xyz, R0.x, c[0], R1;
MAD R1.xyz, R0.z, c[2], R1;
MAD R3.xyz, R0.w, c[3], R1;
TEX R1.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R4.xyz, R0.y, R1;
MUL R2.xy, fragment.texcoord[1].zwzw, c[6].x;
TEX R1.xyz, R2, texture[4], 2D;
TEX R2.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R2.xyz, R0.x, R2, R4;
MUL R4.xyz, R1, c[6].y;
TEX R1.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R1.xyz, R1, c[5].w, R4;
MAD R0.xyz, R0.z, R1, R2;
RCP R2.x, R3.x;
RCP R2.y, R3.y;
RCP R2.z, R3.z;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R3.xyz, R1, R2;
TEX R2.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R0.xyz, R0.w, R2, R0;
MAD R2.xyz, -R0, R3, R1;
RCP R0.w, c[4].x;
MUL R1.w, fragment.texcoord[3].x, R0;
MUL R0.xyz, R0, R3;
POW R1.w, R1.w, c[5].z;
MAD R2.xyz, R1.w, R2, R0;
SLT R0.w, fragment.texcoord[3].x, c[4].x;
ABS R1.w, R0;
TEX R0, fragment.texcoord[4], texture[11], 2D;
CMP R1.w, -R1, c[5].x, c[5].y;
CMP R1.xyz, -R1.w, R1, R2;
MUL R0.xyz, R0.w, R0;
MUL R0.xyz, R0, R1;
MUL result.color.xyz, R0, c[6].z;
MOV result.color.w, c[5].x;
END
# 37 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 11 [unity_Lightmap] 2D
"ps_3_0
; 30 ALU, 8 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s11
def c5, -0.50000000, 4.00000000, 0.35009766, 0.64990234
def c6, 8.00000000, 0.00000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4.xy
texld r3.xyz, v1, s3
texld r0.xyz, v0, s0
mov_pp r6.xyz, r3
mul r4.xy, v1.zwzw, c5.x
texld r1, v0, s1
texld r2.xyz, v0.zwzw, s2
texld r3.xyz, v1.zwzw, s4
texld r4.xyz, r4, s4
texld r5.xyz, v2, s5
if_lt v3.x, c4.x
mul_pp r6.xyz, r1.y, r6
mul_pp r4.xyz, r4, c5.z
rcp r0.w, c4.x
mad_pp r2.xyz, r1.x, r2, r6
mul r7.xyz, r1.y, c1
mad r6.xyz, r1.x, c0, r7
mad r6.xyz, r1.z, c2, r6
mad_pp r3.xyz, r3, c5.w, r4
mad_pp r1.xyz, r1.z, r3, r2
mad r2.xyz, r1.w, c3, r6
mad_pp r1.xyz, r1.w, r5, r1
rcp_pp r2.x, r2.x
rcp_pp r2.y, r2.y
rcp_pp r2.z, r2.z
mul_pp r3.xyz, r0, r2
mul r0.w, v3.x, r0
pow r2, r0.w, c5.y
mad_pp r0.xyz, -r1, r3, r0
mul_pp r1.xyz, r1, r3
mov r0.w, r2.x
mad_pp r1.xyz, r0.w, r0, r1
else
mov_pp r1.xyz, r0
endif
texld r0, v4, s11
mul_pp r0.xyz, r0.w, r0
mul_pp r0.xyz, r0, r1
mul_pp oC0.xyz, r0, c6.x
mov_pp oC0.w, c6.y
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [unity_Lightmap] 2D
SetTexture 12 [unity_LightmapInd] 2D
"3.0-!!ARBfp1.0
# 103 ALU, 15 TEX
PARAM c[10] = { program.local[0..4],
		{ 0, 1, 2, 4 },
		{ -0.5, 0.5, 8, 0.64990234 },
		{ -0.40824828, -0.70710677, 0.57735026, 0.35009766 },
		{ -0.40824831, 0.70710677, 0.57735026 },
		{ 0.81649655, 0, 0.57735026 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R2.xy, fragment.texcoord[1].zwzw, c[6].x;
TEX R1.yw, R2, texture[8], 2D;
MAD R1.xy, R1.wyzw, c[5].z, -c[5].y;
MUL R1.zw, R1.xyxy, R1.xyxy;
TEX R0.yw, fragment.texcoord[1].zwzw, texture[8], 2D;
MAD R0.xy, R0.wyzw, c[5].z, -c[5].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD_SAT R1.z, R1, R1.w;
ADD R0.w, -R1.z, c[5].y;
RSQ R0.w, R0.w;
TEX R3.yw, fragment.texcoord[0].zwzw, texture[6], 2D;
ADD R0.z, -R0, c[5].y;
RSQ R0.z, R0.z;
RCP R1.z, R0.w;
RCP R0.z, R0.z;
ADD R4.xyz, R0, R1;
TEX R1.yw, fragment.texcoord[1], texture[7], 2D;
MAD R1.xy, R1.wyzw, c[5].z, -c[5].y;
MAD R3.xy, R3.wyzw, c[5].z, -c[5].y;
MUL R2.zw, R1.xyxy, R1.xyxy;
MUL R1.zw, R3.xyxy, R3.xyxy;
ADD_SAT R1.z, R1, R1.w;
ADD_SAT R2.z, R2, R2.w;
ADD R1.w, -R2.z, c[5].y;
TEX R0, fragment.texcoord[0], texture[1], 2D;
RSQ R2.z, R1.w;
ADD R1.z, -R1, c[5].y;
RSQ R1.w, R1.z;
RCP R1.z, R2.z;
RCP R3.z, R1.w;
MUL R3.xyz, R0.x, R3;
MUL R1.xyz, R0.y, R1;
ADD R1.xyz, R3, R1;
MUL R3.xyz, R0.z, R4;
MUL R4.xyz, R3, c[6].y;
ADD R4.xyz, R1, R4;
TEX R1.yw, fragment.texcoord[0], texture[10], 2D;
TEX R5.yw, fragment.texcoord[2], texture[9], 2D;
MAD R3.xy, R5.wyzw, c[5].z, -c[5].y;
MUL R2.zw, R3.xyxy, R3.xyxy;
ADD_SAT R1.z, R2, R2.w;
ADD R2.z, -R1, c[5].y;
MAD R1.xy, R1.wyzw, c[5].z, -c[5].y;
MUL R1.zw, R1.xyxy, R1.xyxy;
ADD_SAT R1.z, R1, R1.w;
RSQ R2.z, R2.z;
RCP R3.z, R2.z;
MUL R3.xyz, R0.w, R3;
ADD R1.z, -R1, c[5].y;
RSQ R1.z, R1.z;
RCP R2.z, c[4].x;
MUL R2.z, fragment.texcoord[3].x, R2;
ADD R3.xyz, R4, R3;
RCP R1.z, R1.z;
ADD R4.xyz, R1, R3;
DP3 R1.w, R4, R4;
RSQ R1.w, R1.w;
MAD R3.xyz, -R1.w, R4, R1;
MUL R4.xyz, R1.w, R4;
POW R2.w, R2.z, c[5].w;
MAD R3.xyz, R2.w, R3, R4;
SLT R1.w, fragment.texcoord[3].x, c[4].x;
ABS R1.w, R1;
CMP R3.w, -R1, c[5].x, c[5].y;
CMP R1.xyz, -R3.w, R1, R3;
DP3_SAT R3.z, R1, c[7];
DP3_SAT R3.y, R1, c[8];
DP3_SAT R3.x, R1, c[9];
TEX R1, fragment.texcoord[4], texture[12], 2D;
MUL R1.xyz, R1.w, R1;
MUL R1.xyz, R1, R3;
MUL R4.xyz, R0.y, c[1];
MAD R3.xyz, R0.x, c[0], R4;
DP3 R1.w, R1, c[6].z;
MAD R3.xyz, R0.z, c[2], R3;
TEX R1.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R4.xyz, R0.y, R1;
TEX R1.xyz, R2, texture[4], 2D;
TEX R2.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R2.xyz, R0.x, R2, R4;
MUL R4.xyz, R1, c[7].w;
TEX R1.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R1.xyz, R1, c[6].w, R4;
MAD R0.xyz, R0.z, R1, R2;
MAD R3.xyz, R0.w, c[3], R3;
RCP R2.x, R3.x;
RCP R2.y, R3.y;
RCP R2.z, R3.z;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R3.xyz, R1, R2;
TEX R2.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R0.xyz, R0.w, R2, R0;
MUL R2.xyz, R0, R3;
MAD R0.xyz, -R0, R3, R1;
MAD R2.xyz, R2.w, R0, R2;
TEX R0, fragment.texcoord[4], texture[11], 2D;
MUL R0.xyz, R0.w, R0;
CMP R1.xyz, -R3.w, R1, R2;
MUL R0.xyz, R0, R1.w;
MUL R0.xyz, R0, R1;
MUL result.color.xyz, R0, c[6].z;
MOV result.color.w, c[5].x;
END
# 103 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [unity_Lightmap] 2D
SetTexture 12 [unity_LightmapInd] 2D
"ps_3_0
; 91 ALU, 15 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
dcl_2d s10
dcl_2d s11
dcl_2d s12
def c5, -0.50000000, 2.00000000, -1.00000000, 1.00000000
def c6, 4.00000000, 0.50000000, 0.35009766, 0.64990234
def c7, -0.40824828, -0.70710677, 0.57735026, 8.00000000
def c8, -0.40824831, 0.70710677, 0.57735026, 0.00000000
def c9, 0.81649655, 0.00000000, 0.57735026, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4.xy
mul r9.xy, v1.zwzw, c5.x
texld r1, v0, s1
mov_pp r2, r1
texld r1.xyz, v1, s3
texld r10.yw, r9, s8
texld r11.yw, v2, s9
texld r0.xyz, v0, s0
mov_pp r12.xyz, r1
texld r1.xyz, v1.zwzw, s4
mov_pp r4.xyz, r1
texld r1.xyz, v2, s5
mov_pp r6.xyz, r1
texld r1.yw, v1, s7
mad_pp r8.xy, r1.wyzw, c5.y, c5.z
texld r7.yw, v0.zwzw, s6
mad_pp r7.xy, r7.wyzw, c5.y, c5.z
mul_pp r1.xy, r7, r7
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r8.xyxy, r8.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c5
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c5.w
rsq_pp r1.x, r1.x
texld r1.yw, v1.zwzw, s8
texld r5.xyz, r9, s4
mad_pp r9.xy, r1.wyzw, c5.y, c5.z
rcp_pp r8.z, r1.x
mad_pp r10.xy, r10.wyzw, c5.y, c5.z
mul_pp r1.xy, r9, r9
rcp_pp r7.z, r0.w
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r10.xyxy, r10.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c5
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c5.w
rsq_pp r1.x, r1.x
texld r1.yw, v0, s10
rcp_pp r10.z, r1.x
mad_pp r11.xy, r11.wyzw, c5.y, c5.z
mad_pp r1.xy, r1.wyzw, c5.y, c5.z
mul_pp r1.zw, r11.xyxy, r11.xyxy
rcp_pp r9.z, r0.w
add_pp_sat r0.w, r1.z, r1
mul_pp r11.zw, r1.xyxy, r1.xyxy
add_pp_sat r1.z, r11, r11.w
add_pp r0.w, -r0, c5
add_pp r1.z, -r1, c5.w
rsq_pp r0.w, r0.w
rsq_pp r1.z, r1.z
texld r3.xyz, v0.zwzw, s2
rcp_pp r11.z, r0.w
rcp_pp r1.z, r1.z
if_lt v3.x, c4.x
mul_pp r12.xyz, r2.y, r12
mul_pp r5.xyz, r5, c6.z
mad_pp r4.xyz, r4, c6.w, r5
mad_pp r3.xyz, r2.x, r3, r12
mad_pp r3.xyz, r2.z, r4, r3
mul r13.xyz, r2.y, c1
mad r12.xyz, r2.x, c0, r13
mad r12.xyz, r2.z, c2, r12
mad r4.xyz, r2.w, c3, r12
add r5.xyz, r9, r10
rcp r0.w, c4.x
mad_pp r3.xyz, r2.w, r6, r3
mul r5.xyz, r2.z, r5
mul r0.w, v3.x, r0
rcp_pp r4.x, r4.x
rcp_pp r4.z, r4.z
rcp_pp r4.y, r4.y
mul_pp r4.xyz, r0, r4
mad_pp r0.xyz, -r3, r4, r0
mul_pp r3.xyz, r3, r4
mul r4.xyz, r5, c6.y
mul r5.xyz, r2.y, r8
mul r2.xyz, r2.x, r7
add_pp r2.xyz, r2, r5
add_pp r2.xyz, r2, r4
mul r4.xyz, r2.w, r11
add_pp r2.xyz, r2, r4
add r4.xyz, r2, r1
pow r2, r0.w, c6.x
dp3 r0.w, r4, r4
rsq r1.w, r0.w
mov r0.w, r2.x
mad_pp r2.xyz, r0.w, r0, r3
mul r3.xyz, r1.w, r4
mad r0.xyz, -r1.w, r4, r1
mad r1.xyz, r0.w, r0, r3
else
mov_pp r2.xyz, r0
endif
texld r0, v4, s12
mul_pp r3.xyz, r0.w, r0
dp3_pp_sat r0.z, r1, c7
dp3_pp_sat r0.x, r1, c9
dp3_pp_sat r0.y, r1, c8
mul_pp r1.xyz, r3, r0
texld r0, v4, s11
dp3_pp r1.x, r1, c7.w
mul_pp r0.xyz, r0.w, r0
mul_pp r0.xyz, r0, r1.x
mul_pp r0.xyz, r0, r2
mul_pp oC0.xyz, r0, c7.w
mov_pp oC0.w, c8
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [_LightColor0]
Vector 1 [_ColTex0]
Vector 2 [_ColTex1]
Vector 3 [_ColTex2]
Vector 4 [_ColTex3]
Float 5 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 100 ALU, 14 TEX
PARAM c[8] = { program.local[0..5],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766, 2, 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
TEX R0, fragment.texcoord[0], texture[1], 2D;
MUL R1.xyz, R0.y, c[2];
MAD R1.xyz, R0.x, c[1], R1;
MAD R1.xyz, R0.z, c[3], R1;
TEX R2.xyz, fragment.texcoord[1], texture[3], 2D;
MOV R1.w, c[6].y;
MAD R1.xyz, R0.w, c[4], R1;
MUL R6.xy, fragment.texcoord[1].zwzw, c[7].x;
MUL R4.xyz, R0.y, R2;
TEX R3.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
TEX R2.xyz, R6, texture[4], 2D;
MAD R4.xyz, R0.x, R3, R4;
MUL R3.xyz, R2, c[7].y;
TEX R2.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R2.xyz, R2, c[6].w, R3;
MAD R4.xyz, R0.z, R2, R4;
TEX R3.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R3.xyz, R0.w, R3, R4;
RCP R2.x, R1.x;
RCP R2.y, R1.y;
RCP R2.z, R1.z;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R2.xyz, R1, R2;
MAD R4.xyz, -R3, R2, R1;
MUL R5.xyz, R3, R2;
TEX R2.yw, R6, texture[8], 2D;
TEX R3.yw, fragment.texcoord[1].zwzw, texture[8], 2D;
MAD R2.xy, R2.wyzw, c[7].z, -R1.w;
MAD R3.xy, R3.wyzw, c[7].z, -R1.w;
MUL R3.zw, R2.xyxy, R2.xyxy;
MUL R2.zw, R3.xyxy, R3.xyxy;
ADD_SAT R2.z, R2, R2.w;
ADD_SAT R3.z, R3, R3.w;
ADD R2.w, -R3.z, c[6].y;
RSQ R3.z, R2.w;
ADD R2.z, -R2, c[6].y;
RSQ R2.w, R2.z;
RCP R2.z, R3.z;
RCP R3.z, R2.w;
ADD R6.xyz, R3, R2;
TEX R2.yw, fragment.texcoord[1], texture[7], 2D;
TEX R3.yw, fragment.texcoord[0].zwzw, texture[6], 2D;
MAD R2.xy, R2.wyzw, c[7].z, -R1.w;
MAD R3.xy, R3.wyzw, c[7].z, -R1.w;
MUL R3.zw, R2.xyxy, R2.xyxy;
MUL R2.zw, R3.xyxy, R3.xyxy;
ADD_SAT R2.z, R2, R2.w;
ADD_SAT R3.z, R3, R3.w;
ADD R2.w, -R3.z, c[6].y;
RSQ R3.z, R2.w;
ADD R2.z, -R2, c[6].y;
RSQ R2.w, R2.z;
RCP R2.z, R3.z;
RCP R3.z, R2.w;
MUL R3.xyz, R0.x, R3;
MUL R2.xyz, R0.y, R2;
ADD R2.xyz, R3, R2;
TEX R3.yw, fragment.texcoord[2], texture[9], 2D;
MAD R3.xy, R3.wyzw, c[7].z, -R1.w;
MUL R0.xyz, R0.z, R6;
MUL R0.xyz, R0, c[7].w;
ADD R0.xyz, R2, R0;
MUL R3.zw, R3.xyxy, R3.xyxy;
TEX R2.yw, fragment.texcoord[0], texture[10], 2D;
MAD R2.xy, R2.wyzw, c[7].z, -R1.w;
ADD_SAT R2.z, R3, R3.w;
ADD R1.w, -R2.z, c[6].y;
RSQ R3.z, R1.w;
MUL R2.zw, R2.xyxy, R2.xyxy;
ADD_SAT R1.w, R2.z, R2;
RCP R3.z, R3.z;
MUL R3.xyz, R0.w, R3;
ADD R1.w, -R1, c[6].y;
RSQ R0.w, R1.w;
RCP R2.z, R0.w;
ADD R0.xyz, R0, R3;
ADD R0.xyz, R2, R0;
DP3 R1.w, R0, R0;
RCP R0.w, c[5].x;
RSQ R2.w, R1.w;
MUL R0.w, fragment.texcoord[3].x, R0;
POW R1.w, R0.w, c[6].z;
MAD R3.xyz, R1.w, R4, R5;
MAD R4.xyz, -R2.w, R0, R2;
SLT R0.w, fragment.texcoord[3].x, c[5].x;
MUL R0.xyz, R2.w, R0;
ABS R0.w, R0;
CMP R0.w, -R0, c[6].x, c[6].y;
MAD R0.xyz, R1.w, R4, R0;
CMP R0.xyz, -R0.w, R2, R0;
DP3 R0.y, R0, fragment.texcoord[4];
CMP R1.xyz, -R0.w, R1, R3;
TXP R0.x, fragment.texcoord[7], texture[11], 2D;
MUL R0.w, R0.x, c[7].z;
MUL R2.xyz, R1, c[0];
MAX R0.y, R0, c[6].x;
MUL R0.xyz, R2, R0.y;
MUL R0.xyz, R0, R0.w;
MAD result.color.xyz, R1, fragment.texcoord[5], R0;
MOV result.color.w, c[6].x;
END
# 100 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [_LightColor0]
Vector 1 [_ColTex0]
Vector 2 [_ColTex1]
Vector 3 [_ColTex2]
Vector 4 [_ColTex3]
Float 5 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_ShadowMapTexture] 2D
"ps_3_0
; 87 ALU, 14 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
dcl_2d s10
dcl_2d s11
def c6, -0.50000000, 2.00000000, -1.00000000, 1.00000000
def c7, 4.00000000, 0.50000000, 0.35009766, 0.64990234
def c8, 0.00000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord7 v7
mul r9.xy, v1.zwzw, c6.x
texld r1, v0, s1
mov_pp r2, r1
texld r1.xyz, v1, s3
texld r10.yw, r9, s8
texld r11.yw, v2, s9
texld r0.xyz, v0, s0
mov_pp r12.xyz, r1
texld r1.xyz, v1.zwzw, s4
mov_pp r4.xyz, r1
texld r1.xyz, v2, s5
mov_pp r6.xyz, r1
texld r1.yw, v1, s7
mad_pp r8.xy, r1.wyzw, c6.y, c6.z
texld r7.yw, v0.zwzw, s6
mad_pp r7.xy, r7.wyzw, c6.y, c6.z
mul_pp r1.xy, r7, r7
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r8.xyxy, r8.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c6
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c6.w
rsq_pp r1.x, r1.x
texld r1.yw, v1.zwzw, s8
texld r5.xyz, r9, s4
mad_pp r9.xy, r1.wyzw, c6.y, c6.z
rcp_pp r8.z, r1.x
mad_pp r10.xy, r10.wyzw, c6.y, c6.z
mul_pp r1.xy, r9, r9
rcp_pp r7.z, r0.w
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r10.xyxy, r10.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c6
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c6.w
rsq_pp r1.x, r1.x
texld r1.yw, v0, s10
rcp_pp r10.z, r1.x
mad_pp r11.xy, r11.wyzw, c6.y, c6.z
mad_pp r1.xy, r1.wyzw, c6.y, c6.z
mul_pp r1.zw, r11.xyxy, r11.xyxy
rcp_pp r9.z, r0.w
add_pp_sat r0.w, r1.z, r1
mul_pp r11.zw, r1.xyxy, r1.xyxy
add_pp_sat r1.z, r11, r11.w
add_pp r0.w, -r0, c6
add_pp r1.z, -r1, c6.w
rsq_pp r0.w, r0.w
rsq_pp r1.z, r1.z
texld r3.xyz, v0.zwzw, s2
rcp_pp r11.z, r0.w
rcp_pp r1.z, r1.z
if_lt v3.x, c5.x
mul_pp r12.xyz, r2.y, r12
mul_pp r5.xyz, r5, c7.z
mad_pp r4.xyz, r4, c7.w, r5
mad_pp r3.xyz, r2.x, r3, r12
mad_pp r3.xyz, r2.z, r4, r3
mul r13.xyz, r2.y, c2
mad r12.xyz, r2.x, c1, r13
mad r12.xyz, r2.z, c3, r12
mad r4.xyz, r2.w, c4, r12
add r5.xyz, r9, r10
rcp r0.w, c5.x
mad_pp r3.xyz, r2.w, r6, r3
mul r5.xyz, r2.z, r5
mul r0.w, v3.x, r0
rcp_pp r4.x, r4.x
rcp_pp r4.z, r4.z
rcp_pp r4.y, r4.y
mul_pp r4.xyz, r0, r4
mad_pp r0.xyz, -r3, r4, r0
mul_pp r3.xyz, r3, r4
mul r4.xyz, r5, c7.y
mul r5.xyz, r2.y, r8
mul r2.xyz, r2.x, r7
add_pp r2.xyz, r2, r5
add_pp r2.xyz, r2, r4
mul r4.xyz, r2.w, r11
add_pp r2.xyz, r2, r4
add r4.xyz, r2, r1
pow r2, r0.w, c7.x
dp3 r0.w, r4, r4
rsq r1.w, r0.w
mov r0.w, r2.x
mul r2.xyz, r1.w, r4
mad r1.xyz, -r1.w, r4, r1
mad_pp r0.xyz, r0.w, r0, r3
mad r1.xyz, r0.w, r1, r2
else
endif
dp3_pp r0.w, r1, v4
texldp r1.x, v7, s11
mul_pp r1.w, r1.x, c6.y
mul_pp r2.xyz, r0, c0
max_pp r0.w, r0, c8.x
mul_pp r1.xyz, r2, r0.w
mul r1.xyz, r1, r1.w
mad_pp oC0.xyz, r0, v5, r1
mov_pp oC0.w, c8.x
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 11 [_ShadowMapTexture] 2D
SetTexture 12 [unity_Lightmap] 2D
"3.0-!!ARBfp1.0
# 43 ALU, 9 TEX
PARAM c[7] = { program.local[0..4],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766, 8, 2 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEX R0, fragment.texcoord[0], texture[1], 2D;
TEX R1.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R2.xyz, R0.y, R1;
MUL R3.xyz, R0.y, c[1];
MAD R3.xyz, R0.x, c[0], R3;
TEX R1.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R1.xyz, R0.x, R1, R2;
MUL R2.xy, fragment.texcoord[1].zwzw, c[6].x;
MAD R4.xyz, R0.z, c[2], R3;
TEX R2.xyz, R2, texture[4], 2D;
MUL R3.xyz, R2, c[6].y;
TEX R2.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R2.xyz, R2, c[5].w, R3;
MAD R0.xyz, R0.z, R2, R1;
MAD R1.xyz, R0.w, c[3], R4;
TEX R2.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R0.xyz, R0.w, R2, R0;
RCP R0.w, c[4].x;
MUL R0.w, fragment.texcoord[3].x, R0;
RCP R2.x, R1.x;
RCP R2.y, R1.y;
RCP R2.z, R1.z;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R2.xyz, R1, R2;
MAD R3.xyz, -R0, R2, R1;
MUL R0.xyz, R0, R2;
POW R0.w, R0.w, c[5].z;
MAD R2.xyz, R0.w, R3, R0;
TEX R0, fragment.texcoord[4], texture[12], 2D;
TXP R4.x, fragment.texcoord[5], texture[11], 2D;
MUL R3.xyz, R0, R4.x;
MUL R0.xyz, R0.w, R0;
SLT R0.w, fragment.texcoord[3].x, c[4].x;
ABS R0.w, R0;
CMP R0.w, -R0, c[5].x, c[5].y;
MUL R0.xyz, R0, c[6].z;
MUL R3.xyz, R3, c[6].w;
MIN R3.xyz, R0, R3;
MUL R0.xyz, R0, R4.x;
MAX R0.xyz, R3, R0;
CMP R1.xyz, -R0.w, R1, R2;
MUL result.color.xyz, R1, R0;
MOV result.color.w, c[5].x;
END
# 43 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 11 [_ShadowMapTexture] 2D
SetTexture 12 [unity_Lightmap] 2D
"ps_3_0
; 34 ALU, 9 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s11
dcl_2d s12
def c5, -0.50000000, 4.00000000, 0.35009766, 0.64990234
def c6, 8.00000000, 2.00000000, 0.00000000, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4.xy
dcl_texcoord5 v5
texld r3.xyz, v1, s3
texld r0.xyz, v0, s0
mov_pp r6.xyz, r3
mul r4.xy, v1.zwzw, c5.x
texld r1, v0, s1
texld r2.xyz, v0.zwzw, s2
texld r3.xyz, v1.zwzw, s4
texld r4.xyz, r4, s4
texld r5.xyz, v2, s5
if_lt v3.x, c4.x
mul_pp r6.xyz, r1.y, r6
mul_pp r4.xyz, r4, c5.z
rcp r0.w, c4.x
mad_pp r2.xyz, r1.x, r2, r6
mul r7.xyz, r1.y, c1
mad r6.xyz, r1.x, c0, r7
mad r6.xyz, r1.z, c2, r6
mad_pp r3.xyz, r3, c5.w, r4
mad_pp r1.xyz, r1.z, r3, r2
mad r2.xyz, r1.w, c3, r6
mad_pp r1.xyz, r1.w, r5, r1
rcp_pp r2.x, r2.x
rcp_pp r2.y, r2.y
rcp_pp r2.z, r2.z
mul_pp r3.xyz, r0, r2
mul r0.w, v3.x, r0
pow r2, r0.w, c5.y
mad_pp r0.xyz, -r1, r3, r0
mul_pp r1.xyz, r1, r3
mov r0.w, r2.x
mad_pp r0.xyz, r0.w, r0, r1
else
endif
texld r2, v4, s12
mul_pp r1.xyz, r2.w, r2
texldp r3.x, v5, s11
mul_pp r2.xyz, r2, r3.x
mul_pp r1.xyz, r1, c6.x
mul_pp r3.xyz, r1, r3.x
mul_pp r2.xyz, r2, c6.y
min_pp r1.xyz, r1, r2
max_pp r1.xyz, r1, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c6.z
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_ShadowMapTexture] 2D
SetTexture 12 [unity_Lightmap] 2D
SetTexture 13 [unity_LightmapInd] 2D
"3.0-!!ARBfp1.0
# 110 ALU, 16 TEX
PARAM c[10] = { program.local[0..4],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766, 2, 0.5 },
		{ -0.40824828, -0.70710677, 0.57735026, 8 },
		{ -0.40824831, 0.70710677, 0.57735026 },
		{ 0.81649655, 0, 0.57735026 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R3.xy, fragment.texcoord[1].zwzw, c[6].x;
MOV R1.w, c[5].y;
TEX R2.yw, R3, texture[8], 2D;
TEX R0.yw, fragment.texcoord[1].zwzw, texture[8], 2D;
TEX R4.yw, fragment.texcoord[1], texture[7], 2D;
MAD R4.xy, R4.wyzw, c[6].z, -R1.w;
MUL R3.zw, R4.xyxy, R4.xyxy;
MAD R0.xy, R0.wyzw, c[6].z, -R1.w;
MAD R1.xy, R2.wyzw, c[6].z, -R1.w;
MUL R0.zw, R1.xyxy, R1.xyxy;
ADD_SAT R0.z, R0, R0.w;
MUL R2.xy, R0, R0;
ADD_SAT R0.w, R2.x, R2.y;
TEX R2.yw, fragment.texcoord[0].zwzw, texture[6], 2D;
MAD R2.xy, R2.wyzw, c[6].z, -R1.w;
MUL R2.zw, R2.xyxy, R2.xyxy;
ADD_SAT R2.w, R2.z, R2;
ADD_SAT R3.z, R3, R3.w;
ADD R2.z, -R3, c[5].y;
RSQ R2.z, R2.z;
ADD R0.z, -R0, c[5].y;
RSQ R0.z, R0.z;
ADD R0.w, -R0, c[5].y;
ADD R2.w, -R2, c[5].y;
TXP R5.x, fragment.texcoord[6], texture[11], 2D;
RSQ R0.w, R0.w;
RCP R1.z, R0.z;
RCP R0.z, R0.w;
ADD R1.xyz, R0, R1;
TEX R0, fragment.texcoord[0], texture[1], 2D;
RCP R4.z, R2.z;
RSQ R2.w, R2.w;
RCP R2.z, R2.w;
MUL R1.xyz, R0.z, R1;
MUL R4.xyz, R0.y, R4;
MUL R2.xyz, R0.x, R2;
ADD R2.xyz, R2, R4;
MUL R1.xyz, R1, c[6].w;
TEX R4.yw, fragment.texcoord[2], texture[9], 2D;
MAD R4.xy, R4.wyzw, c[6].z, -R1.w;
ADD R2.xyz, R2, R1;
MUL R1.xy, R4, R4;
ADD_SAT R1.z, R1.x, R1.y;
TEX R5.yw, fragment.texcoord[0], texture[10], 2D;
ADD R2.w, -R1.z, c[5].y;
MAD R1.xy, R5.wyzw, c[6].z, -R1.w;
MUL R1.zw, R1.xyxy, R1.xyxy;
ADD_SAT R1.z, R1, R1.w;
RSQ R2.w, R2.w;
RCP R4.z, R2.w;
MUL R4.xyz, R0.w, R4;
SLT R2.w, fragment.texcoord[3].x, c[4].x;
ADD R1.z, -R1, c[5].y;
RSQ R1.z, R1.z;
ADD R2.xyz, R2, R4;
RCP R1.z, R1.z;
ADD R4.xyz, R1, R2;
DP3 R1.w, R4, R4;
RSQ R1.w, R1.w;
MAD R2.xyz, -R1.w, R4, R1;
MUL R4.xyz, R1.w, R4;
RCP R1.w, c[4].x;
ABS R3.z, R2.w;
MUL R1.w, fragment.texcoord[3].x, R1;
POW R2.w, R1.w, c[5].z;
MAD R2.xyz, R2.w, R2, R4;
CMP R1.w, -R3.z, c[5].x, c[5].y;
CMP R2.xyz, -R1.w, R1, R2;
DP3_SAT R1.z, R2, c[7];
DP3_SAT R1.y, R2, c[8];
TEX R4, fragment.texcoord[4], texture[13], 2D;
DP3_SAT R1.x, R2, c[9];
MUL R2.xyz, R4.w, R4;
MUL R1.xyz, R2, R1;
TEX R4, fragment.texcoord[4], texture[12], 2D;
DP3 R2.x, R1, c[7].w;
MUL R1.xyz, R4.w, R4;
MUL R2.xyz, R1, R2.x;
MUL R1.xyz, R4, R5.x;
MUL R4.xyz, R0.y, c[1];
MAD R4.xyz, R0.x, c[0], R4;
MAD R4.xyz, R0.z, c[2], R4;
MAD R4.xyz, R0.w, c[3], R4;
MUL R2.xyz, R2, c[7].w;
MUL R1.xyz, R1, c[6].z;
MIN R1.xyz, R2, R1;
MUL R2.xyz, R2, R5.x;
TEX R5.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R6.xyz, R0.y, R5;
TEX R5.xyz, R3, texture[4], 2D;
TEX R3.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R3.xyz, R0.x, R3, R6;
MUL R6.xyz, R5, c[6].y;
TEX R5.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R5.xyz, R5, c[5].w, R6;
MAD R5.xyz, R0.z, R5, R3;
TEX R0.xyz, fragment.texcoord[0], texture[0], 2D;
RCP R3.x, R4.x;
RCP R3.y, R4.y;
RCP R3.z, R4.z;
TEX R4.xyz, fragment.texcoord[2], texture[5], 2D;
MUL R3.xyz, R0, R3;
MAD R5.xyz, R0.w, R4, R5;
MUL R4.xyz, R5, R3;
MAD R3.xyz, -R5, R3, R0;
MAD R3.xyz, R2.w, R3, R4;
MAX R1.xyz, R1, R2;
CMP R0.xyz, -R1.w, R0, R3;
MUL result.color.xyz, R0, R1;
MOV result.color.w, c[5].x;
END
# 110 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_ShadowMapTexture] 2D
SetTexture 12 [unity_Lightmap] 2D
SetTexture 13 [unity_LightmapInd] 2D
"ps_3_0
; 96 ALU, 16 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
dcl_2d s10
dcl_2d s11
dcl_2d s12
dcl_2d s13
def c5, -0.50000000, 2.00000000, -1.00000000, 1.00000000
def c6, 4.00000000, 0.50000000, 0.35009766, 0.64990234
def c7, -0.40824828, -0.70710677, 0.57735026, 8.00000000
def c8, -0.40824831, 0.70710677, 0.57735026, 0.00000000
def c9, 0.81649655, 0.00000000, 0.57735026, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4.xy
dcl_texcoord6 v6
mul r9.xy, v1.zwzw, c5.x
texld r1, v0, s1
mov_pp r2, r1
texld r1.xyz, v1, s3
texld r10.yw, r9, s8
texld r11.yw, v2, s9
texld r0.xyz, v0, s0
mov_pp r12.xyz, r1
texld r1.xyz, v1.zwzw, s4
mov_pp r4.xyz, r1
texld r1.xyz, v2, s5
mov_pp r6.xyz, r1
texld r1.yw, v1, s7
mad_pp r8.xy, r1.wyzw, c5.y, c5.z
texld r7.yw, v0.zwzw, s6
mad_pp r7.xy, r7.wyzw, c5.y, c5.z
mul_pp r1.xy, r7, r7
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r8.xyxy, r8.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c5
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c5.w
rsq_pp r1.x, r1.x
texld r1.yw, v1.zwzw, s8
texld r5.xyz, r9, s4
mad_pp r9.xy, r1.wyzw, c5.y, c5.z
rcp_pp r8.z, r1.x
mad_pp r10.xy, r10.wyzw, c5.y, c5.z
mul_pp r1.xy, r9, r9
rcp_pp r7.z, r0.w
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r10.xyxy, r10.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c5
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c5.w
rsq_pp r1.x, r1.x
texld r1.yw, v0, s10
rcp_pp r10.z, r1.x
mad_pp r11.xy, r11.wyzw, c5.y, c5.z
mad_pp r1.xy, r1.wyzw, c5.y, c5.z
mul_pp r1.zw, r11.xyxy, r11.xyxy
rcp_pp r9.z, r0.w
add_pp_sat r0.w, r1.z, r1
mul_pp r11.zw, r1.xyxy, r1.xyxy
add_pp_sat r1.z, r11, r11.w
add_pp r0.w, -r0, c5
add_pp r1.z, -r1, c5.w
rsq_pp r0.w, r0.w
rsq_pp r1.z, r1.z
texld r3.xyz, v0.zwzw, s2
rcp_pp r11.z, r0.w
rcp_pp r1.z, r1.z
if_lt v3.x, c4.x
mul_pp r12.xyz, r2.y, r12
mul_pp r5.xyz, r5, c6.z
mad_pp r4.xyz, r4, c6.w, r5
mad_pp r3.xyz, r2.x, r3, r12
mad_pp r3.xyz, r2.z, r4, r3
mul r13.xyz, r2.y, c1
mad r12.xyz, r2.x, c0, r13
mad r12.xyz, r2.z, c2, r12
mad r4.xyz, r2.w, c3, r12
add r5.xyz, r9, r10
rcp r0.w, c4.x
mad_pp r3.xyz, r2.w, r6, r3
mul r5.xyz, r2.z, r5
mul r0.w, v3.x, r0
rcp_pp r4.x, r4.x
rcp_pp r4.z, r4.z
rcp_pp r4.y, r4.y
mul_pp r4.xyz, r0, r4
mad_pp r0.xyz, -r3, r4, r0
mul_pp r3.xyz, r3, r4
mul r4.xyz, r5, c6.y
mul r5.xyz, r2.y, r8
mul r2.xyz, r2.x, r7
add_pp r2.xyz, r2, r5
add_pp r2.xyz, r2, r4
mul r4.xyz, r2.w, r11
add_pp r2.xyz, r2, r4
add r4.xyz, r2, r1
pow r2, r0.w, c6.x
dp3 r0.w, r4, r4
rsq r1.w, r0.w
mov r0.w, r2.x
mad_pp r2.xyz, r0.w, r0, r3
mul r3.xyz, r1.w, r4
mad r0.xyz, -r1.w, r4, r1
mad r1.xyz, r0.w, r0, r3
else
mov_pp r2.xyz, r0
endif
texld r0, v4, s13
mul_pp r3.xyz, r0.w, r0
dp3_pp_sat r0.z, r1, c7
dp3_pp_sat r0.x, r1, c9
dp3_pp_sat r0.y, r1, c8
mul_pp r1.xyz, r3, r0
texld r0, v4, s12
dp3_pp r1.y, r1, c7.w
mul_pp r3.xyz, r0.w, r0
texldp r1.x, v6, s11
mul_pp r3.xyz, r3, r1.y
mul_pp r4.xyz, r0, r1.x
mul_pp r0.xyz, r3, c7.w
mul_pp r1.xyz, r0, r1.x
mul_pp r3.xyz, r4, c5.y
min_pp r0.xyz, r0, r3
max_pp r0.xyz, r0, r1
mul_pp oC0.xyz, r2, r0
mov_pp oC0.w, c8
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "SHADOWS_SCREEN" }
"!!GLES3"
}

}
	}
	Pass {
		Name "FORWARD"
		Tags { "LightMode" = "ForwardAdd" }
		ZWrite Off Blend One One Fog { Color (0,0,0,0) }
Program "vp" {
// Vertex combos: 5
//   opengl - ALU: 44 to 50
//   d3d9 - ALU: 46 to 52, FLOW: 2 to 2
SubProgram "opengl " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 19 [unity_Scale]
Matrix 13 [_LightMatrix0]
Vector 20 [_Control_ST]
Vector 21 [_Splat0_ST]
Vector 22 [_Splat1_ST]
Vector 23 [_Splat2_ST]
Vector 24 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 49 ALU
PARAM c[25] = { { 0, 1, 2, -1 },
		state.matrix.mvp,
		program.local[5..24] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
MUL R0.xyz, -vertex.normal.yzxw, c[0].yyxw;
MAD R0.xyz, vertex.normal.zxyw, c[0].xyyw, R0;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R2.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R1.xyz, vertex.normal.zxyw, R2.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R2.zxyw, -R1;
DP3 R0.x, R0, R1;
SLT R0.x, R0, c[0];
ABS R0.x, R0;
SGE R0.x, c[0], R0;
MAD R0.x, R0, c[0].z, c[0].w;
MUL R3.xyz, R0.x, R1;
MOV R1, c[18];
MOV R0.w, c[0].y;
MOV R0.xyz, c[17];
DP4 R4.z, R0, c[11];
DP4 R4.x, R0, c[9];
DP4 R4.y, R0, c[10];
MAD R0.xyz, R4, c[19].w, -vertex.position;
DP3 result.texcoord[5].y, R3, R0;
DP3 result.texcoord[5].x, R2, R0;
DP3 result.texcoord[5].z, vertex.normal, R0;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 R0.w, vertex.position, c[8];
DP4 R4.z, R1, c[11];
DP4 R4.x, R1, c[9];
DP4 R4.y, R1, c[10];
MAD R1.xyz, R4, c[19].w, -vertex.position;
DP3 result.texcoord[4].y, R1, R3;
DP3 result.texcoord[4].x, R1, R2;
DP3 result.texcoord[4].z, vertex.normal, R1;
ADD R1.xyz, R0, -c[17];
DP3 R1.x, R1, R1;
RSQ R1.x, R1.x;
DP4 result.texcoord[6].z, R0, c[15];
DP4 result.texcoord[6].y, R0, c[14];
DP4 result.texcoord[6].x, R0, c[13];
RCP result.texcoord[3].x, R1.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[21].xyxy, c[21];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[20], c[20].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[23].xyxy, c[23];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[22], c[22].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[24], c[24].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 49 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
Vector 19 [_Control_ST]
Vector 20 [_Splat0_ST]
Vector 21 [_Splat1_ST]
Vector 22 [_Splat2_ST]
Vector 23 [_Splat3_ST]
"vs_3_0
; 51 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c24, 1.00000000, 0.00000000, -1.00000000, 0
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
mul r0.xyz, -v2.yzxw, c24.xxyw
mad r0.xyz, v2.zxyw, c24.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r2.xyz, v2.yzxw, r0.zxyw, -r1
mul r1.xyz, r2.yzxw, v2.zxyw
mad r1.xyz, r2.zxyw, v2.yzxw, -r1
dp3 r0.x, r0, r1
if_lt r0.x, c24.y
mov r1.w, c24.z
else
mov r1.w, c24.x
endif
mov r0.w, c24.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r4.xyz, r1, c18.w, -v0
mul r0.xyz, v2.zxyw, r2.yzxw
mad r1.xyz, v2.yzxw, r2.zxyw, -r0
mul r3.xyz, r1, r1.w
mov r0, c10
dp4 r5.z, c17, r0
mov r0, c9
mov r1, c8
dp4 r5.y, c17, r0
dp4 r5.x, c17, r1
mad r0.xyz, r5, c18.w, -v0
dp3 o5.y, r0, r3
dp3 o5.z, v2, r0
dp3 o5.x, r0, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, r0, -c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
dp3 o6.y, r3, r4
dp3 o6.z, v2, r4
dp3 o6.x, r2, r4
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
rcp o4.x, r1.x
mad o1.zw, v3.xyxy, c20.xyxy, c20
mad o1.xy, v3, c19, c19.zwzw
mad o2.zw, v3.xyxy, c22.xyxy, c22
mad o2.xy, v3, c21, c21.zwzw
mad o3.xy, v3, c23, c23.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = tmpvar_1.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_2.yzx * tmpvar_8.zxy) - (tmpvar_2.zxy * tmpvar_8.yzx));
  tmpvar_7.xyz = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)), tmpvar_8);
  if ((tmpvar_10 < 0.0)) {
    tmpvar_7.w = -1.0;
  } else {
    tmpvar_7.w = 1.0;
  };
  highp vec3 p_11;
  p_11 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_7.xyz;
  tmpvar_13 = (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)) * tmpvar_7.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_2.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_2.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_2.z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_14 * (((_World2Object * tmpvar_16).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_11, p_11));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = tmpvar_3;
  highp vec3 farnormal_6;
  highp vec3 normalsplat3_7;
  highp vec3 normalsplat2_2nd_8;
  highp vec3 normalsplat2_9;
  highp vec3 normalsplat1_10;
  highp vec3 normalsplat0_11;
  mediump vec3 splatcol3_12;
  mediump vec3 splatcol2_2nd_13;
  mediump vec3 splatcol2_14;
  mediump vec3 splatcol1_15;
  mediump vec3 splatcol0_16;
  mediump vec4 splat_control_17;
  mediump vec3 colorMap_18;
  mediump vec3 finalCol_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_18 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_17 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_16 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_15 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_14 = tmpvar_24;
  highp vec2 P_25;
  P_25 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat2, P_25).xyz;
  splatcol2_2nd_13 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_10 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_9 = tmpvar_30;
  highp vec2 P_31;
  P_31 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap2, P_31).xyz * 2.0) - 1.0);
  normalsplat2_2nd_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_7 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_6 = tmpvar_34;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (splat_control_17.x * normalsplat0_11);
    tmpvar_5 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_5 + (splat_control_17.y * normalsplat1_10));
    tmpvar_5 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_5 + (splat_control_17.z * ((normalsplat2_9 * 0.5) + (normalsplat2_2nd_8 * 0.5))));
    tmpvar_5 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_5 + (splat_control_17.w * normalsplat3_7));
    tmpvar_5 = tmpvar_39;
    highp float tmpvar_40;
    tmpvar_40 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (normalize((tmpvar_5 + farnormal_6)), farnormal_6, vec3(tmpvar_40));
    tmpvar_5 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = ((((splat_control_17.x * _ColTex0) + (splat_control_17.y * _ColTex1)) + (splat_control_17.z * _ColTex2)) + (splat_control_17.w * _ColTex3));
    color_correction_35 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = (((((splat_control_17.x * splatcol0_16) + (splat_control_17.y * splatcol1_15)) + (splat_control_17.z * ((splatcol2_14 * 0.65) + (splatcol2_2nd_13 * 0.35)))) + (splat_control_17.w * splatcol3_12)) * (colorMap_18 / color_correction_35));
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (tmpvar_43, colorMap_18, vec3(tmpvar_40));
    finalCol_19 = tmpvar_44;
  } else {
    finalCol_19 = colorMap_18;
    tmpvar_5 = farnormal_6;
  };
  tmpvar_4 = finalCol_19;
  tmpvar_3 = tmpvar_5;
  mediump vec3 tmpvar_45;
  tmpvar_45 = normalize(xlv_TEXCOORD4);
  lightDir_2 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float atten_47;
  atten_47 = texture2D (_LightTexture0, vec2(tmpvar_46)).w;
  lowp vec4 c_48;
  lowp float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_50;
  tmpvar_50 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_49) * (atten_47 * 2.0));
  c_48.xyz = tmpvar_50;
  c_48.w = 0.0;
  c_1.xyz = c_48.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = tmpvar_1.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_2.yzx * tmpvar_8.zxy) - (tmpvar_2.zxy * tmpvar_8.yzx));
  tmpvar_7.xyz = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)), tmpvar_8);
  if ((tmpvar_10 < 0.0)) {
    tmpvar_7.w = -1.0;
  } else {
    tmpvar_7.w = 1.0;
  };
  highp vec3 p_11;
  p_11 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_7.xyz;
  tmpvar_13 = (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)) * tmpvar_7.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_2.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_2.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_2.z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_14 * (((_World2Object * tmpvar_16).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_11, p_11));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = tmpvar_3;
  highp vec3 farnormal_6;
  highp vec3 normalsplat3_7;
  highp vec3 normalsplat2_2nd_8;
  highp vec3 normalsplat2_9;
  highp vec3 normalsplat1_10;
  highp vec3 normalsplat0_11;
  mediump vec3 splatcol3_12;
  mediump vec3 splatcol2_2nd_13;
  mediump vec3 splatcol2_14;
  mediump vec3 splatcol1_15;
  mediump vec3 splatcol0_16;
  mediump vec4 splat_control_17;
  mediump vec3 colorMap_18;
  mediump vec3 finalCol_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_18 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_17 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_16 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_15 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_14 = tmpvar_24;
  highp vec2 P_25;
  P_25 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat2, P_25).xyz;
  splatcol2_2nd_13 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  normalsplat0_11 = normal_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat1_10 = normal_29;
  lowp vec3 normal_30;
  normal_30.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_30.z = sqrt((1.0 - clamp (dot (normal_30.xy, normal_30.xy), 0.0, 1.0)));
  normalsplat2_9 = normal_30;
  highp vec2 P_31;
  P_31 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap2, P_31).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat2_2nd_8 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  normalsplat3_7 = normal_33;
  lowp vec3 normal_34;
  normal_34.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_34.z = sqrt((1.0 - clamp (dot (normal_34.xy, normal_34.xy), 0.0, 1.0)));
  farnormal_6 = normal_34;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (splat_control_17.x * normalsplat0_11);
    tmpvar_5 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_5 + (splat_control_17.y * normalsplat1_10));
    tmpvar_5 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_5 + (splat_control_17.z * ((normalsplat2_9 * 0.5) + (normalsplat2_2nd_8 * 0.5))));
    tmpvar_5 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_5 + (splat_control_17.w * normalsplat3_7));
    tmpvar_5 = tmpvar_39;
    highp float tmpvar_40;
    tmpvar_40 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (normalize((tmpvar_5 + farnormal_6)), farnormal_6, vec3(tmpvar_40));
    tmpvar_5 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = ((((splat_control_17.x * _ColTex0) + (splat_control_17.y * _ColTex1)) + (splat_control_17.z * _ColTex2)) + (splat_control_17.w * _ColTex3));
    color_correction_35 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = (((((splat_control_17.x * splatcol0_16) + (splat_control_17.y * splatcol1_15)) + (splat_control_17.z * ((splatcol2_14 * 0.65) + (splatcol2_2nd_13 * 0.35)))) + (splat_control_17.w * splatcol3_12)) * (colorMap_18 / color_correction_35));
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (tmpvar_43, colorMap_18, vec3(tmpvar_40));
    finalCol_19 = tmpvar_44;
  } else {
    finalCol_19 = colorMap_18;
    tmpvar_5 = farnormal_6;
  };
  tmpvar_4 = finalCol_19;
  tmpvar_3 = tmpvar_5;
  mediump vec3 tmpvar_45;
  tmpvar_45 = normalize(xlv_TEXCOORD4);
  lightDir_2 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float atten_47;
  atten_47 = texture2D (_LightTexture0, vec2(tmpvar_46)).w;
  lowp vec4 c_48;
  lowp float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_50;
  tmpvar_50 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_49) * (atten_47 * 2.0));
  c_48.xyz = tmpvar_50;
  c_48.w = 0.0;
  c_1.xyz = c_48.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 393
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 465
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 404
uniform sampler2D _Control;
#line 417
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 421
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 477
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 481
uniform highp vec4 _Splat3_ST;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 404
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 408
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 413
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 482
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 485
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 489
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    #line 493
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 497
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 502
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 393
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 465
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 404
uniform sampler2D _Control;
#line 417
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 421
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 477
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 481
uniform highp vec4 _Splat3_ST;
#line 360
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 364
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 368
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 424
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 426
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 430
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 434
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 438
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 443
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 447
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 451
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 455
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 459
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 463
    o.Alpha = 0.0;
}
#line 504
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 506
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    #line 510
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    #line 514
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 518
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0));
    #line 522
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 15 [unity_Scale]
Vector 16 [_Control_ST]
Vector 17 [_Splat0_ST]
Vector 18 [_Splat1_ST]
Vector 19 [_Splat2_ST]
Vector 20 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 44 ALU
PARAM c[21] = { { 0, 1, 2, -1 },
		state.matrix.mvp,
		program.local[5..20] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
MUL R0.xyz, -vertex.normal.yzxw, c[0].yyxw;
MAD R0.xyz, vertex.normal.zxyw, c[0].xyyw, R0;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R2.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R1.xyz, vertex.normal.zxyw, R2.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R2.zxyw, -R1;
DP3 R0.x, R0, R1;
SLT R0.x, R0, c[0];
ABS R0.x, R0;
SGE R0.x, c[0], R0;
MAD R0.x, R0, c[0].z, c[0].w;
MUL R3.xyz, R0.x, R1;
MOV R1, c[14];
MOV R0.w, c[0].y;
MOV R0.xyz, c[13];
DP4 R4.z, R0, c[11];
DP4 R4.x, R0, c[9];
DP4 R4.y, R0, c[10];
MAD R0.xyz, R4, c[15].w, -vertex.position;
DP4 R4.z, R1, c[11];
DP4 R4.y, R1, c[10];
DP4 R4.x, R1, c[9];
DP4 R1.z, vertex.position, c[7];
DP4 R1.x, vertex.position, c[5];
DP4 R1.y, vertex.position, c[6];
ADD R1.xyz, R1, -c[13];
DP3 R0.w, R1, R1;
RSQ R0.w, R0.w;
DP3 result.texcoord[4].y, R4, R3;
DP3 result.texcoord[5].y, R3, R0;
DP3 result.texcoord[4].x, R4, R2;
DP3 result.texcoord[5].x, R2, R0;
DP3 result.texcoord[4].z, vertex.normal, R4;
DP3 result.texcoord[5].z, vertex.normal, R0;
RCP result.texcoord[3].x, R0.w;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[17].xyxy, c[17];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[16], c[16].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[19].xyxy, c[19];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[18], c[18].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[20], c[20].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 44 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 14 [unity_Scale]
Vector 15 [_Control_ST]
Vector 16 [_Splat0_ST]
Vector 17 [_Splat1_ST]
Vector 18 [_Splat2_ST]
Vector 19 [_Splat3_ST]
"vs_3_0
; 46 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c20, 1.00000000, 0.00000000, -1.00000000, 0
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
mul r0.xyz, -v2.yzxw, c20.xxyw
mad r0.xyz, v2.zxyw, c20.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r2.xyz, v2.yzxw, r0.zxyw, -r1
mul r1.xyz, r2.yzxw, v2.zxyw
mad r1.xyz, r2.zxyw, v2.yzxw, -r1
dp3 r0.x, r0, r1
if_lt r0.x, c20.y
mov r1.w, c20.z
else
mov r1.w, c20.x
endif
mov r0.w, c20.x
mov r0.xyz, c12
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r4.xyz, r1, c14.w, -v0
mul r0.xyz, v2.zxyw, r2.yzxw
mad r1.xyz, v2.yzxw, r2.zxyw, -r0
mul r3.xyz, r1, r1.w
mov r0, c10
dp4 r5.z, c13, r0
mov r0, c9
dp4 r5.y, c13, r0
mov r1, c8
dp4 r5.x, c13, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, r0, -c12
dp3 r0.x, r0, r0
rsq r0.x, r0.x
dp3 o5.y, r5, r3
dp3 o6.y, r3, r4
dp3 o5.z, v2, r5
dp3 o5.x, r5, r2
dp3 o6.z, v2, r4
dp3 o6.x, r2, r4
rcp o4.x, r0.x
mad o1.zw, v3.xyxy, c16.xyxy, c16
mad o1.xy, v3, c15, c15.zwzw
mad o2.zw, v3.xyxy, c18.xyxy, c18
mad o2.xy, v3, c17, c17.zwzw
mad o3.xy, v3, c19, c19.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = tmpvar_1.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_2.yzx * tmpvar_8.zxy) - (tmpvar_2.zxy * tmpvar_8.yzx));
  tmpvar_7.xyz = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)), tmpvar_8);
  if ((tmpvar_10 < 0.0)) {
    tmpvar_7.w = -1.0;
  } else {
    tmpvar_7.w = 1.0;
  };
  highp vec3 p_11;
  p_11 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_7.xyz;
  tmpvar_13 = (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)) * tmpvar_7.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_2.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_2.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_2.z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_14 * (((_World2Object * tmpvar_16).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_11, p_11));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = tmpvar_3;
  highp vec3 farnormal_6;
  highp vec3 normalsplat3_7;
  highp vec3 normalsplat2_2nd_8;
  highp vec3 normalsplat2_9;
  highp vec3 normalsplat1_10;
  highp vec3 normalsplat0_11;
  mediump vec3 splatcol3_12;
  mediump vec3 splatcol2_2nd_13;
  mediump vec3 splatcol2_14;
  mediump vec3 splatcol1_15;
  mediump vec3 splatcol0_16;
  mediump vec4 splat_control_17;
  mediump vec3 colorMap_18;
  mediump vec3 finalCol_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_18 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_17 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_16 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_15 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_14 = tmpvar_24;
  highp vec2 P_25;
  P_25 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat2, P_25).xyz;
  splatcol2_2nd_13 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_10 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_9 = tmpvar_30;
  highp vec2 P_31;
  P_31 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap2, P_31).xyz * 2.0) - 1.0);
  normalsplat2_2nd_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_7 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_6 = tmpvar_34;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (splat_control_17.x * normalsplat0_11);
    tmpvar_5 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_5 + (splat_control_17.y * normalsplat1_10));
    tmpvar_5 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_5 + (splat_control_17.z * ((normalsplat2_9 * 0.5) + (normalsplat2_2nd_8 * 0.5))));
    tmpvar_5 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_5 + (splat_control_17.w * normalsplat3_7));
    tmpvar_5 = tmpvar_39;
    highp float tmpvar_40;
    tmpvar_40 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (normalize((tmpvar_5 + farnormal_6)), farnormal_6, vec3(tmpvar_40));
    tmpvar_5 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = ((((splat_control_17.x * _ColTex0) + (splat_control_17.y * _ColTex1)) + (splat_control_17.z * _ColTex2)) + (splat_control_17.w * _ColTex3));
    color_correction_35 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = (((((splat_control_17.x * splatcol0_16) + (splat_control_17.y * splatcol1_15)) + (splat_control_17.z * ((splatcol2_14 * 0.65) + (splatcol2_2nd_13 * 0.35)))) + (splat_control_17.w * splatcol3_12)) * (colorMap_18 / color_correction_35));
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (tmpvar_43, colorMap_18, vec3(tmpvar_40));
    finalCol_19 = tmpvar_44;
  } else {
    finalCol_19 = colorMap_18;
    tmpvar_5 = farnormal_6;
  };
  tmpvar_4 = finalCol_19;
  tmpvar_3 = tmpvar_5;
  lightDir_2 = xlv_TEXCOORD4;
  lowp vec4 c_45;
  lowp float tmpvar_46;
  tmpvar_46 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_47;
  tmpvar_47 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_46) * 2.0);
  c_45.xyz = tmpvar_47;
  c_45.w = 0.0;
  c_1.xyz = c_45.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = tmpvar_1.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_2.yzx * tmpvar_8.zxy) - (tmpvar_2.zxy * tmpvar_8.yzx));
  tmpvar_7.xyz = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)), tmpvar_8);
  if ((tmpvar_10 < 0.0)) {
    tmpvar_7.w = -1.0;
  } else {
    tmpvar_7.w = 1.0;
  };
  highp vec3 p_11;
  p_11 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_7.xyz;
  tmpvar_13 = (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)) * tmpvar_7.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_2.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_2.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_2.z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_14 * (((_World2Object * tmpvar_16).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_11, p_11));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = tmpvar_3;
  highp vec3 farnormal_6;
  highp vec3 normalsplat3_7;
  highp vec3 normalsplat2_2nd_8;
  highp vec3 normalsplat2_9;
  highp vec3 normalsplat1_10;
  highp vec3 normalsplat0_11;
  mediump vec3 splatcol3_12;
  mediump vec3 splatcol2_2nd_13;
  mediump vec3 splatcol2_14;
  mediump vec3 splatcol1_15;
  mediump vec3 splatcol0_16;
  mediump vec4 splat_control_17;
  mediump vec3 colorMap_18;
  mediump vec3 finalCol_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_18 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_17 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_16 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_15 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_14 = tmpvar_24;
  highp vec2 P_25;
  P_25 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat2, P_25).xyz;
  splatcol2_2nd_13 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  normalsplat0_11 = normal_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat1_10 = normal_29;
  lowp vec3 normal_30;
  normal_30.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_30.z = sqrt((1.0 - clamp (dot (normal_30.xy, normal_30.xy), 0.0, 1.0)));
  normalsplat2_9 = normal_30;
  highp vec2 P_31;
  P_31 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap2, P_31).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat2_2nd_8 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  normalsplat3_7 = normal_33;
  lowp vec3 normal_34;
  normal_34.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_34.z = sqrt((1.0 - clamp (dot (normal_34.xy, normal_34.xy), 0.0, 1.0)));
  farnormal_6 = normal_34;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (splat_control_17.x * normalsplat0_11);
    tmpvar_5 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_5 + (splat_control_17.y * normalsplat1_10));
    tmpvar_5 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_5 + (splat_control_17.z * ((normalsplat2_9 * 0.5) + (normalsplat2_2nd_8 * 0.5))));
    tmpvar_5 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_5 + (splat_control_17.w * normalsplat3_7));
    tmpvar_5 = tmpvar_39;
    highp float tmpvar_40;
    tmpvar_40 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (normalize((tmpvar_5 + farnormal_6)), farnormal_6, vec3(tmpvar_40));
    tmpvar_5 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = ((((splat_control_17.x * _ColTex0) + (splat_control_17.y * _ColTex1)) + (splat_control_17.z * _ColTex2)) + (splat_control_17.w * _ColTex3));
    color_correction_35 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = (((((splat_control_17.x * splatcol0_16) + (splat_control_17.y * splatcol1_15)) + (splat_control_17.z * ((splatcol2_14 * 0.65) + (splatcol2_2nd_13 * 0.35)))) + (splat_control_17.w * splatcol3_12)) * (colorMap_18 / color_correction_35));
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (tmpvar_43, colorMap_18, vec3(tmpvar_40));
    finalCol_19 = tmpvar_44;
  } else {
    finalCol_19 = colorMap_18;
    tmpvar_5 = farnormal_6;
  };
  tmpvar_4 = finalCol_19;
  tmpvar_3 = tmpvar_5;
  lightDir_2 = xlv_TEXCOORD4;
  lowp vec4 c_45;
  lowp float tmpvar_46;
  tmpvar_46 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_47;
  tmpvar_47 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_46) * 2.0);
  c_45.xyz = tmpvar_47;
  c_45.w = 0.0;
  c_1.xyz = c_45.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 474
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 478
uniform highp vec4 _Splat3_ST;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 402
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 406
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 411
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 479
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 482
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 486
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    #line 490
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 494
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    #line 498
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 474
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 478
uniform highp vec4 _Splat3_ST;
#line 360
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 364
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 368
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 422
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 424
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 428
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 432
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 436
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 441
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 445
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 449
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 453
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 457
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 461
    o.Alpha = 0.0;
}
#line 500
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 502
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    #line 506
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    #line 510
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 514
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = IN.lightDir;
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), 1.0);
    #line 518
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 19 [unity_Scale]
Matrix 13 [_LightMatrix0]
Vector 20 [_Control_ST]
Vector 21 [_Splat0_ST]
Vector 22 [_Splat1_ST]
Vector 23 [_Splat2_ST]
Vector 24 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 50 ALU
PARAM c[25] = { { 0, 1, 2, -1 },
		state.matrix.mvp,
		program.local[5..24] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
MUL R0.xyz, -vertex.normal.yzxw, c[0].yyxw;
MAD R0.xyz, vertex.normal.zxyw, c[0].xyyw, R0;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R2.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R1.xyz, vertex.normal.zxyw, R2.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R2.zxyw, -R1;
DP3 R0.x, R0, R1;
SLT R0.x, R0, c[0];
ABS R0.x, R0;
SGE R0.x, c[0], R0;
MAD R0.x, R0, c[0].z, c[0].w;
MUL R3.xyz, R0.x, R1;
MOV R1, c[18];
MOV R0.w, c[0].y;
MOV R0.xyz, c[17];
DP4 R4.z, R0, c[11];
DP4 R4.x, R0, c[9];
DP4 R4.y, R0, c[10];
MAD R0.xyz, R4, c[19].w, -vertex.position;
DP4 R0.w, vertex.position, c[8];
DP3 result.texcoord[5].y, R3, R0;
DP3 result.texcoord[5].x, R2, R0;
DP3 result.texcoord[5].z, vertex.normal, R0;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 R4.z, R1, c[11];
DP4 R4.x, R1, c[9];
DP4 R4.y, R1, c[10];
MAD R1.xyz, R4, c[19].w, -vertex.position;
DP3 result.texcoord[4].y, R1, R3;
DP3 result.texcoord[4].x, R1, R2;
DP3 result.texcoord[4].z, vertex.normal, R1;
ADD R1.xyz, R0, -c[17];
DP3 R1.x, R1, R1;
RSQ R1.x, R1.x;
DP4 result.texcoord[6].w, R0, c[16];
DP4 result.texcoord[6].z, R0, c[15];
DP4 result.texcoord[6].y, R0, c[14];
DP4 result.texcoord[6].x, R0, c[13];
RCP result.texcoord[3].x, R1.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[21].xyxy, c[21];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[20], c[20].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[23].xyxy, c[23];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[22], c[22].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[24], c[24].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 50 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
Vector 19 [_Control_ST]
Vector 20 [_Splat0_ST]
Vector 21 [_Splat1_ST]
Vector 22 [_Splat2_ST]
Vector 23 [_Splat3_ST]
"vs_3_0
; 52 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c24, 1.00000000, 0.00000000, -1.00000000, 0
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
mul r0.xyz, -v2.yzxw, c24.xxyw
mad r0.xyz, v2.zxyw, c24.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r2.xyz, v2.yzxw, r0.zxyw, -r1
mul r1.xyz, r2.yzxw, v2.zxyw
mad r1.xyz, r2.zxyw, v2.yzxw, -r1
dp3 r0.x, r0, r1
if_lt r0.x, c24.y
mov r1.w, c24.z
else
mov r1.w, c24.x
endif
mov r0.w, c24.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r4.xyz, r1, c18.w, -v0
mul r0.xyz, v2.zxyw, r2.yzxw
mad r1.xyz, v2.yzxw, r2.zxyw, -r0
mul r3.xyz, r1, r1.w
mov r0, c10
dp4 r5.z, c17, r0
mov r0, c9
mov r1, c8
dp4 r5.y, c17, r0
dp4 r5.x, c17, r1
mad r0.xyz, r5, c18.w, -v0
dp4 r0.w, v0, c7
dp3 o5.y, r0, r3
dp3 o5.z, v2, r0
dp3 o5.x, r0, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r1.xyz, r0, -c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
dp3 o6.y, r3, r4
dp3 o6.z, v2, r4
dp3 o6.x, r2, r4
dp4 o7.w, r0, c15
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
rcp o4.x, r1.x
mad o1.zw, v3.xyxy, c20.xyxy, c20
mad o1.xy, v3, c19, c19.zwzw
mad o2.zw, v3.xyxy, c22.xyxy, c22
mad o2.xy, v3, c21, c21.zwzw
mad o3.xy, v3, c23, c23.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = tmpvar_1.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_2.yzx * tmpvar_8.zxy) - (tmpvar_2.zxy * tmpvar_8.yzx));
  tmpvar_7.xyz = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)), tmpvar_8);
  if ((tmpvar_10 < 0.0)) {
    tmpvar_7.w = -1.0;
  } else {
    tmpvar_7.w = 1.0;
  };
  highp vec3 p_11;
  p_11 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_7.xyz;
  tmpvar_13 = (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)) * tmpvar_7.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_2.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_2.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_2.z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_14 * (((_World2Object * tmpvar_16).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_11, p_11));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = tmpvar_3;
  highp vec3 farnormal_6;
  highp vec3 normalsplat3_7;
  highp vec3 normalsplat2_2nd_8;
  highp vec3 normalsplat2_9;
  highp vec3 normalsplat1_10;
  highp vec3 normalsplat0_11;
  mediump vec3 splatcol3_12;
  mediump vec3 splatcol2_2nd_13;
  mediump vec3 splatcol2_14;
  mediump vec3 splatcol1_15;
  mediump vec3 splatcol0_16;
  mediump vec4 splat_control_17;
  mediump vec3 colorMap_18;
  mediump vec3 finalCol_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_18 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_17 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_16 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_15 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_14 = tmpvar_24;
  highp vec2 P_25;
  P_25 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat2, P_25).xyz;
  splatcol2_2nd_13 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_10 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_9 = tmpvar_30;
  highp vec2 P_31;
  P_31 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap2, P_31).xyz * 2.0) - 1.0);
  normalsplat2_2nd_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_7 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_6 = tmpvar_34;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (splat_control_17.x * normalsplat0_11);
    tmpvar_5 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_5 + (splat_control_17.y * normalsplat1_10));
    tmpvar_5 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_5 + (splat_control_17.z * ((normalsplat2_9 * 0.5) + (normalsplat2_2nd_8 * 0.5))));
    tmpvar_5 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_5 + (splat_control_17.w * normalsplat3_7));
    tmpvar_5 = tmpvar_39;
    highp float tmpvar_40;
    tmpvar_40 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (normalize((tmpvar_5 + farnormal_6)), farnormal_6, vec3(tmpvar_40));
    tmpvar_5 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = ((((splat_control_17.x * _ColTex0) + (splat_control_17.y * _ColTex1)) + (splat_control_17.z * _ColTex2)) + (splat_control_17.w * _ColTex3));
    color_correction_35 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = (((((splat_control_17.x * splatcol0_16) + (splat_control_17.y * splatcol1_15)) + (splat_control_17.z * ((splatcol2_14 * 0.65) + (splatcol2_2nd_13 * 0.35)))) + (splat_control_17.w * splatcol3_12)) * (colorMap_18 / color_correction_35));
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (tmpvar_43, colorMap_18, vec3(tmpvar_40));
    finalCol_19 = tmpvar_44;
  } else {
    finalCol_19 = colorMap_18;
    tmpvar_5 = farnormal_6;
  };
  tmpvar_4 = finalCol_19;
  tmpvar_3 = tmpvar_5;
  mediump vec3 tmpvar_45;
  tmpvar_45 = normalize(xlv_TEXCOORD4);
  lightDir_2 = tmpvar_45;
  highp vec2 P_46;
  P_46 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  highp float tmpvar_47;
  tmpvar_47 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp float atten_48;
  atten_48 = ((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, P_46).w) * texture2D (_LightTextureB0, vec2(tmpvar_47)).w);
  lowp vec4 c_49;
  lowp float tmpvar_50;
  tmpvar_50 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_51;
  tmpvar_51 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_50) * (atten_48 * 2.0));
  c_49.xyz = tmpvar_51;
  c_49.w = 0.0;
  c_1.xyz = c_49.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = tmpvar_1.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_2.yzx * tmpvar_8.zxy) - (tmpvar_2.zxy * tmpvar_8.yzx));
  tmpvar_7.xyz = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)), tmpvar_8);
  if ((tmpvar_10 < 0.0)) {
    tmpvar_7.w = -1.0;
  } else {
    tmpvar_7.w = 1.0;
  };
  highp vec3 p_11;
  p_11 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_7.xyz;
  tmpvar_13 = (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)) * tmpvar_7.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_2.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_2.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_2.z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_14 * (((_World2Object * tmpvar_16).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_11, p_11));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = tmpvar_3;
  highp vec3 farnormal_6;
  highp vec3 normalsplat3_7;
  highp vec3 normalsplat2_2nd_8;
  highp vec3 normalsplat2_9;
  highp vec3 normalsplat1_10;
  highp vec3 normalsplat0_11;
  mediump vec3 splatcol3_12;
  mediump vec3 splatcol2_2nd_13;
  mediump vec3 splatcol2_14;
  mediump vec3 splatcol1_15;
  mediump vec3 splatcol0_16;
  mediump vec4 splat_control_17;
  mediump vec3 colorMap_18;
  mediump vec3 finalCol_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_18 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_17 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_16 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_15 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_14 = tmpvar_24;
  highp vec2 P_25;
  P_25 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat2, P_25).xyz;
  splatcol2_2nd_13 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  normalsplat0_11 = normal_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat1_10 = normal_29;
  lowp vec3 normal_30;
  normal_30.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_30.z = sqrt((1.0 - clamp (dot (normal_30.xy, normal_30.xy), 0.0, 1.0)));
  normalsplat2_9 = normal_30;
  highp vec2 P_31;
  P_31 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap2, P_31).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat2_2nd_8 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  normalsplat3_7 = normal_33;
  lowp vec3 normal_34;
  normal_34.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_34.z = sqrt((1.0 - clamp (dot (normal_34.xy, normal_34.xy), 0.0, 1.0)));
  farnormal_6 = normal_34;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (splat_control_17.x * normalsplat0_11);
    tmpvar_5 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_5 + (splat_control_17.y * normalsplat1_10));
    tmpvar_5 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_5 + (splat_control_17.z * ((normalsplat2_9 * 0.5) + (normalsplat2_2nd_8 * 0.5))));
    tmpvar_5 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_5 + (splat_control_17.w * normalsplat3_7));
    tmpvar_5 = tmpvar_39;
    highp float tmpvar_40;
    tmpvar_40 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (normalize((tmpvar_5 + farnormal_6)), farnormal_6, vec3(tmpvar_40));
    tmpvar_5 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = ((((splat_control_17.x * _ColTex0) + (splat_control_17.y * _ColTex1)) + (splat_control_17.z * _ColTex2)) + (splat_control_17.w * _ColTex3));
    color_correction_35 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = (((((splat_control_17.x * splatcol0_16) + (splat_control_17.y * splatcol1_15)) + (splat_control_17.z * ((splatcol2_14 * 0.65) + (splatcol2_2nd_13 * 0.35)))) + (splat_control_17.w * splatcol3_12)) * (colorMap_18 / color_correction_35));
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (tmpvar_43, colorMap_18, vec3(tmpvar_40));
    finalCol_19 = tmpvar_44;
  } else {
    finalCol_19 = colorMap_18;
    tmpvar_5 = farnormal_6;
  };
  tmpvar_4 = finalCol_19;
  tmpvar_3 = tmpvar_5;
  mediump vec3 tmpvar_45;
  tmpvar_45 = normalize(xlv_TEXCOORD4);
  lightDir_2 = tmpvar_45;
  highp vec2 P_46;
  P_46 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  highp float tmpvar_47;
  tmpvar_47 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp float atten_48;
  atten_48 = ((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, P_46).w) * texture2D (_LightTextureB0, vec2(tmpvar_47)).w);
  lowp vec4 c_49;
  lowp float tmpvar_50;
  tmpvar_50 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_51;
  tmpvar_51 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_50) * (atten_48 * 2.0));
  c_49.xyz = tmpvar_51;
  c_49.w = 0.0;
  c_1.xyz = c_49.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 402
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 474
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
#line 398
#line 413
uniform sampler2D _Control;
#line 426
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 430
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 486
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 490
uniform highp vec4 _Splat3_ST;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 413
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 417
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 422
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 491
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 494
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 498
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    #line 502
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 506
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 511
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 402
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 474
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
#line 398
#line 413
uniform sampler2D _Control;
#line 426
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 430
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 486
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 490
uniform highp vec4 _Splat3_ST;
#line 360
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 364
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 368
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 398
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 394
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 433
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 435
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 439
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 443
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 447
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 452
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 456
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 460
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 464
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 468
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 472
    o.Alpha = 0.0;
}
#line 513
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 515
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    #line 519
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    #line 523
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 527
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0));
    #line 531
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 19 [unity_Scale]
Matrix 13 [_LightMatrix0]
Vector 20 [_Control_ST]
Vector 21 [_Splat0_ST]
Vector 22 [_Splat1_ST]
Vector 23 [_Splat2_ST]
Vector 24 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 49 ALU
PARAM c[25] = { { 0, 1, 2, -1 },
		state.matrix.mvp,
		program.local[5..24] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
MUL R0.xyz, -vertex.normal.yzxw, c[0].yyxw;
MAD R0.xyz, vertex.normal.zxyw, c[0].xyyw, R0;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R2.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R1.xyz, vertex.normal.zxyw, R2.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R2.zxyw, -R1;
DP3 R0.x, R0, R1;
SLT R0.x, R0, c[0];
ABS R0.x, R0;
SGE R0.x, c[0], R0;
MAD R0.x, R0, c[0].z, c[0].w;
MUL R3.xyz, R0.x, R1;
MOV R1, c[18];
MOV R0.w, c[0].y;
MOV R0.xyz, c[17];
DP4 R4.z, R0, c[11];
DP4 R4.x, R0, c[9];
DP4 R4.y, R0, c[10];
MAD R0.xyz, R4, c[19].w, -vertex.position;
DP3 result.texcoord[5].y, R3, R0;
DP3 result.texcoord[5].x, R2, R0;
DP3 result.texcoord[5].z, vertex.normal, R0;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 R0.w, vertex.position, c[8];
DP4 R4.z, R1, c[11];
DP4 R4.x, R1, c[9];
DP4 R4.y, R1, c[10];
MAD R1.xyz, R4, c[19].w, -vertex.position;
DP3 result.texcoord[4].y, R1, R3;
DP3 result.texcoord[4].x, R1, R2;
DP3 result.texcoord[4].z, vertex.normal, R1;
ADD R1.xyz, R0, -c[17];
DP3 R1.x, R1, R1;
RSQ R1.x, R1.x;
DP4 result.texcoord[6].z, R0, c[15];
DP4 result.texcoord[6].y, R0, c[14];
DP4 result.texcoord[6].x, R0, c[13];
RCP result.texcoord[3].x, R1.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[21].xyxy, c[21];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[20], c[20].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[23].xyxy, c[23];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[22], c[22].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[24], c[24].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 49 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
Vector 19 [_Control_ST]
Vector 20 [_Splat0_ST]
Vector 21 [_Splat1_ST]
Vector 22 [_Splat2_ST]
Vector 23 [_Splat3_ST]
"vs_3_0
; 51 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c24, 1.00000000, 0.00000000, -1.00000000, 0
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
mul r0.xyz, -v2.yzxw, c24.xxyw
mad r0.xyz, v2.zxyw, c24.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r2.xyz, v2.yzxw, r0.zxyw, -r1
mul r1.xyz, r2.yzxw, v2.zxyw
mad r1.xyz, r2.zxyw, v2.yzxw, -r1
dp3 r0.x, r0, r1
if_lt r0.x, c24.y
mov r1.w, c24.z
else
mov r1.w, c24.x
endif
mov r0.w, c24.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r4.xyz, r1, c18.w, -v0
mul r0.xyz, v2.zxyw, r2.yzxw
mad r1.xyz, v2.yzxw, r2.zxyw, -r0
mul r3.xyz, r1, r1.w
mov r0, c10
dp4 r5.z, c17, r0
mov r0, c9
mov r1, c8
dp4 r5.y, c17, r0
dp4 r5.x, c17, r1
mad r0.xyz, r5, c18.w, -v0
dp3 o5.y, r0, r3
dp3 o5.z, v2, r0
dp3 o5.x, r0, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, r0, -c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
dp3 o6.y, r3, r4
dp3 o6.z, v2, r4
dp3 o6.x, r2, r4
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
rcp o4.x, r1.x
mad o1.zw, v3.xyxy, c20.xyxy, c20
mad o1.xy, v3, c19, c19.zwzw
mad o2.zw, v3.xyxy, c22.xyxy, c22
mad o2.xy, v3, c21, c21.zwzw
mad o3.xy, v3, c23, c23.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = tmpvar_1.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_2.yzx * tmpvar_8.zxy) - (tmpvar_2.zxy * tmpvar_8.yzx));
  tmpvar_7.xyz = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)), tmpvar_8);
  if ((tmpvar_10 < 0.0)) {
    tmpvar_7.w = -1.0;
  } else {
    tmpvar_7.w = 1.0;
  };
  highp vec3 p_11;
  p_11 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_7.xyz;
  tmpvar_13 = (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)) * tmpvar_7.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_2.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_2.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_2.z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_14 * (((_World2Object * tmpvar_16).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_11, p_11));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = tmpvar_3;
  highp vec3 farnormal_6;
  highp vec3 normalsplat3_7;
  highp vec3 normalsplat2_2nd_8;
  highp vec3 normalsplat2_9;
  highp vec3 normalsplat1_10;
  highp vec3 normalsplat0_11;
  mediump vec3 splatcol3_12;
  mediump vec3 splatcol2_2nd_13;
  mediump vec3 splatcol2_14;
  mediump vec3 splatcol1_15;
  mediump vec3 splatcol0_16;
  mediump vec4 splat_control_17;
  mediump vec3 colorMap_18;
  mediump vec3 finalCol_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_18 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_17 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_16 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_15 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_14 = tmpvar_24;
  highp vec2 P_25;
  P_25 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat2, P_25).xyz;
  splatcol2_2nd_13 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_10 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_9 = tmpvar_30;
  highp vec2 P_31;
  P_31 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap2, P_31).xyz * 2.0) - 1.0);
  normalsplat2_2nd_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_7 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_6 = tmpvar_34;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (splat_control_17.x * normalsplat0_11);
    tmpvar_5 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_5 + (splat_control_17.y * normalsplat1_10));
    tmpvar_5 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_5 + (splat_control_17.z * ((normalsplat2_9 * 0.5) + (normalsplat2_2nd_8 * 0.5))));
    tmpvar_5 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_5 + (splat_control_17.w * normalsplat3_7));
    tmpvar_5 = tmpvar_39;
    highp float tmpvar_40;
    tmpvar_40 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (normalize((tmpvar_5 + farnormal_6)), farnormal_6, vec3(tmpvar_40));
    tmpvar_5 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = ((((splat_control_17.x * _ColTex0) + (splat_control_17.y * _ColTex1)) + (splat_control_17.z * _ColTex2)) + (splat_control_17.w * _ColTex3));
    color_correction_35 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = (((((splat_control_17.x * splatcol0_16) + (splat_control_17.y * splatcol1_15)) + (splat_control_17.z * ((splatcol2_14 * 0.65) + (splatcol2_2nd_13 * 0.35)))) + (splat_control_17.w * splatcol3_12)) * (colorMap_18 / color_correction_35));
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (tmpvar_43, colorMap_18, vec3(tmpvar_40));
    finalCol_19 = tmpvar_44;
  } else {
    finalCol_19 = colorMap_18;
    tmpvar_5 = farnormal_6;
  };
  tmpvar_4 = finalCol_19;
  tmpvar_3 = tmpvar_5;
  mediump vec3 tmpvar_45;
  tmpvar_45 = normalize(xlv_TEXCOORD4);
  lightDir_2 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float atten_47;
  atten_47 = (texture2D (_LightTextureB0, vec2(tmpvar_46)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  lowp vec4 c_48;
  lowp float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_50;
  tmpvar_50 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_49) * (atten_47 * 2.0));
  c_48.xyz = tmpvar_50;
  c_48.w = 0.0;
  c_1.xyz = c_48.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = tmpvar_1.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_2.yzx * tmpvar_8.zxy) - (tmpvar_2.zxy * tmpvar_8.yzx));
  tmpvar_7.xyz = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)), tmpvar_8);
  if ((tmpvar_10 < 0.0)) {
    tmpvar_7.w = -1.0;
  } else {
    tmpvar_7.w = 1.0;
  };
  highp vec3 p_11;
  p_11 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_7.xyz;
  tmpvar_13 = (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)) * tmpvar_7.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_2.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_2.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_2.z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_14 * (((_World2Object * tmpvar_16).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_11, p_11));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = tmpvar_3;
  highp vec3 farnormal_6;
  highp vec3 normalsplat3_7;
  highp vec3 normalsplat2_2nd_8;
  highp vec3 normalsplat2_9;
  highp vec3 normalsplat1_10;
  highp vec3 normalsplat0_11;
  mediump vec3 splatcol3_12;
  mediump vec3 splatcol2_2nd_13;
  mediump vec3 splatcol2_14;
  mediump vec3 splatcol1_15;
  mediump vec3 splatcol0_16;
  mediump vec4 splat_control_17;
  mediump vec3 colorMap_18;
  mediump vec3 finalCol_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_18 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_17 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_16 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_15 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_14 = tmpvar_24;
  highp vec2 P_25;
  P_25 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat2, P_25).xyz;
  splatcol2_2nd_13 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  normalsplat0_11 = normal_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat1_10 = normal_29;
  lowp vec3 normal_30;
  normal_30.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_30.z = sqrt((1.0 - clamp (dot (normal_30.xy, normal_30.xy), 0.0, 1.0)));
  normalsplat2_9 = normal_30;
  highp vec2 P_31;
  P_31 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap2, P_31).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat2_2nd_8 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  normalsplat3_7 = normal_33;
  lowp vec3 normal_34;
  normal_34.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_34.z = sqrt((1.0 - clamp (dot (normal_34.xy, normal_34.xy), 0.0, 1.0)));
  farnormal_6 = normal_34;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (splat_control_17.x * normalsplat0_11);
    tmpvar_5 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_5 + (splat_control_17.y * normalsplat1_10));
    tmpvar_5 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_5 + (splat_control_17.z * ((normalsplat2_9 * 0.5) + (normalsplat2_2nd_8 * 0.5))));
    tmpvar_5 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_5 + (splat_control_17.w * normalsplat3_7));
    tmpvar_5 = tmpvar_39;
    highp float tmpvar_40;
    tmpvar_40 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (normalize((tmpvar_5 + farnormal_6)), farnormal_6, vec3(tmpvar_40));
    tmpvar_5 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = ((((splat_control_17.x * _ColTex0) + (splat_control_17.y * _ColTex1)) + (splat_control_17.z * _ColTex2)) + (splat_control_17.w * _ColTex3));
    color_correction_35 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = (((((splat_control_17.x * splatcol0_16) + (splat_control_17.y * splatcol1_15)) + (splat_control_17.z * ((splatcol2_14 * 0.65) + (splatcol2_2nd_13 * 0.35)))) + (splat_control_17.w * splatcol3_12)) * (colorMap_18 / color_correction_35));
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (tmpvar_43, colorMap_18, vec3(tmpvar_40));
    finalCol_19 = tmpvar_44;
  } else {
    finalCol_19 = colorMap_18;
    tmpvar_5 = farnormal_6;
  };
  tmpvar_4 = finalCol_19;
  tmpvar_3 = tmpvar_5;
  mediump vec3 tmpvar_45;
  tmpvar_45 = normalize(xlv_TEXCOORD4);
  lightDir_2 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float atten_47;
  atten_47 = (texture2D (_LightTextureB0, vec2(tmpvar_46)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  lowp vec4 c_48;
  lowp float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_50;
  tmpvar_50 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_49) * (atten_47 * 2.0));
  c_48.xyz = tmpvar_50;
  c_48.w = 0.0;
  c_1.xyz = c_48.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 394
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 466
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
#line 405
uniform sampler2D _Control;
#line 418
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 422
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 478
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 482
uniform highp vec4 _Splat3_ST;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 405
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 409
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 414
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 483
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 486
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 490
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    #line 494
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 498
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 503
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 394
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 466
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
#line 405
uniform sampler2D _Control;
#line 418
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 422
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 478
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 482
uniform highp vec4 _Splat3_ST;
#line 360
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 364
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 368
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 425
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 427
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 431
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 435
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 439
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 444
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 448
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 452
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 456
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 460
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 464
    o.Alpha = 0.0;
}
#line 505
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 507
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    #line 511
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    #line 515
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 519
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0));
    #line 523
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 19 [unity_Scale]
Matrix 13 [_LightMatrix0]
Vector 20 [_Control_ST]
Vector 21 [_Splat0_ST]
Vector 22 [_Splat1_ST]
Vector 23 [_Splat2_ST]
Vector 24 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 47 ALU
PARAM c[25] = { { 0, 1, 2, -1 },
		state.matrix.mvp,
		program.local[5..24] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
MUL R0.xyz, -vertex.normal.yzxw, c[0].yyxw;
MAD R0.xyz, vertex.normal.zxyw, c[0].xyyw, R0;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R2.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R1.xyz, vertex.normal.zxyw, R2.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R2.zxyw, -R1;
DP3 R0.x, R0, R1;
SLT R0.x, R0, c[0];
ABS R0.x, R0;
SGE R0.x, c[0], R0;
MAD R0.x, R0, c[0].z, c[0].w;
MUL R3.xyz, R0.x, R1;
MOV R1, c[18];
MOV R0.w, c[0].y;
MOV R0.xyz, c[17];
DP4 R4.z, R0, c[11];
DP4 R4.x, R0, c[9];
DP4 R4.y, R0, c[10];
MAD R0.xyz, R4, c[19].w, -vertex.position;
DP4 R4.z, R1, c[11];
DP4 R4.y, R1, c[10];
DP4 R4.x, R1, c[9];
DP3 result.texcoord[5].y, R3, R0;
DP3 result.texcoord[5].x, R2, R0;
DP3 result.texcoord[5].z, vertex.normal, R0;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 R0.w, vertex.position, c[8];
ADD R1.xyz, R0, -c[17];
DP3 R1.x, R1, R1;
RSQ R1.x, R1.x;
DP3 result.texcoord[4].y, R4, R3;
DP3 result.texcoord[4].x, R4, R2;
DP3 result.texcoord[4].z, vertex.normal, R4;
DP4 result.texcoord[6].y, R0, c[14];
DP4 result.texcoord[6].x, R0, c[13];
RCP result.texcoord[3].x, R1.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[21].xyxy, c[21];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[20], c[20].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[23].xyxy, c[23];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[22], c[22].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[24], c[24].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 47 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
Vector 19 [_Control_ST]
Vector 20 [_Splat0_ST]
Vector 21 [_Splat1_ST]
Vector 22 [_Splat2_ST]
Vector 23 [_Splat3_ST]
"vs_3_0
; 49 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c24, 1.00000000, 0.00000000, -1.00000000, 0
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
mul r0.xyz, -v2.yzxw, c24.xxyw
mad r0.xyz, v2.zxyw, c24.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r2.xyz, v2.yzxw, r0.zxyw, -r1
mul r1.xyz, r2.yzxw, v2.zxyw
mad r1.xyz, r2.zxyw, v2.yzxw, -r1
dp3 r0.x, r0, r1
if_lt r0.x, c24.y
mov r1.w, c24.z
else
mov r1.w, c24.x
endif
mov r0.w, c24.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
mad r4.xyz, r1, c18.w, -v0
mul r0.xyz, v2.zxyw, r2.yzxw
mad r1.xyz, v2.yzxw, r2.zxyw, -r0
mul r3.xyz, r1, r1.w
mov r0, c10
dp4 r5.z, c17, r0
mov r0, c9
dp4 r5.y, c17, r0
mov r1, c8
dp4 r5.x, c17, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, r0, -c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
dp3 o5.y, r5, r3
dp3 o6.y, r3, r4
dp3 o5.z, v2, r5
dp3 o5.x, r5, r2
dp3 o6.z, v2, r4
dp3 o6.x, r2, r4
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
rcp o4.x, r1.x
mad o1.zw, v3.xyxy, c20.xyxy, c20
mad o1.xy, v3, c19, c19.zwzw
mad o2.zw, v3.xyxy, c22.xyxy, c22
mad o2.xy, v3, c21, c21.zwzw
mad o3.xy, v3, c23, c23.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = tmpvar_1.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_2.yzx * tmpvar_8.zxy) - (tmpvar_2.zxy * tmpvar_8.yzx));
  tmpvar_7.xyz = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)), tmpvar_8);
  if ((tmpvar_10 < 0.0)) {
    tmpvar_7.w = -1.0;
  } else {
    tmpvar_7.w = 1.0;
  };
  highp vec3 p_11;
  p_11 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_7.xyz;
  tmpvar_13 = (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)) * tmpvar_7.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_2.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_2.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_2.z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_14 * (((_World2Object * tmpvar_16).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_11, p_11));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = tmpvar_3;
  highp vec3 farnormal_6;
  highp vec3 normalsplat3_7;
  highp vec3 normalsplat2_2nd_8;
  highp vec3 normalsplat2_9;
  highp vec3 normalsplat1_10;
  highp vec3 normalsplat0_11;
  mediump vec3 splatcol3_12;
  mediump vec3 splatcol2_2nd_13;
  mediump vec3 splatcol2_14;
  mediump vec3 splatcol1_15;
  mediump vec3 splatcol0_16;
  mediump vec4 splat_control_17;
  mediump vec3 colorMap_18;
  mediump vec3 finalCol_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_18 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_17 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_16 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_15 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_14 = tmpvar_24;
  highp vec2 P_25;
  P_25 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat2, P_25).xyz;
  splatcol2_2nd_13 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_10 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_9 = tmpvar_30;
  highp vec2 P_31;
  P_31 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap2, P_31).xyz * 2.0) - 1.0);
  normalsplat2_2nd_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_7 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_6 = tmpvar_34;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (splat_control_17.x * normalsplat0_11);
    tmpvar_5 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_5 + (splat_control_17.y * normalsplat1_10));
    tmpvar_5 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_5 + (splat_control_17.z * ((normalsplat2_9 * 0.5) + (normalsplat2_2nd_8 * 0.5))));
    tmpvar_5 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_5 + (splat_control_17.w * normalsplat3_7));
    tmpvar_5 = tmpvar_39;
    highp float tmpvar_40;
    tmpvar_40 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (normalize((tmpvar_5 + farnormal_6)), farnormal_6, vec3(tmpvar_40));
    tmpvar_5 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = ((((splat_control_17.x * _ColTex0) + (splat_control_17.y * _ColTex1)) + (splat_control_17.z * _ColTex2)) + (splat_control_17.w * _ColTex3));
    color_correction_35 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = (((((splat_control_17.x * splatcol0_16) + (splat_control_17.y * splatcol1_15)) + (splat_control_17.z * ((splatcol2_14 * 0.65) + (splatcol2_2nd_13 * 0.35)))) + (splat_control_17.w * splatcol3_12)) * (colorMap_18 / color_correction_35));
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (tmpvar_43, colorMap_18, vec3(tmpvar_40));
    finalCol_19 = tmpvar_44;
  } else {
    finalCol_19 = colorMap_18;
    tmpvar_5 = farnormal_6;
  };
  tmpvar_4 = finalCol_19;
  tmpvar_3 = tmpvar_5;
  lightDir_2 = xlv_TEXCOORD4;
  lowp float atten_45;
  atten_45 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  lowp vec4 c_46;
  lowp float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_48;
  tmpvar_48 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_47) * (atten_45 * 2.0));
  c_46.xyz = tmpvar_48;
  c_46.w = 0.0;
  c_1.xyz = c_46.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = tmpvar_1.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_2.yzx * tmpvar_8.zxy) - (tmpvar_2.zxy * tmpvar_8.yzx));
  tmpvar_7.xyz = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)), tmpvar_8);
  if ((tmpvar_10 < 0.0)) {
    tmpvar_7.w = -1.0;
  } else {
    tmpvar_7.w = 1.0;
  };
  highp vec3 p_11;
  p_11 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_7.xyz;
  tmpvar_13 = (((tmpvar_2.yzx * tmpvar_9.zxy) - (tmpvar_2.zxy * tmpvar_9.yzx)) * tmpvar_7.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_2.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_2.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_2.z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_14 * (((_World2Object * tmpvar_16).xyz * unity_Scale.w) - _glesVertex.xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_11, p_11));
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = tmpvar_3;
  highp vec3 farnormal_6;
  highp vec3 normalsplat3_7;
  highp vec3 normalsplat2_2nd_8;
  highp vec3 normalsplat2_9;
  highp vec3 normalsplat1_10;
  highp vec3 normalsplat0_11;
  mediump vec3 splatcol3_12;
  mediump vec3 splatcol2_2nd_13;
  mediump vec3 splatcol2_14;
  mediump vec3 splatcol1_15;
  mediump vec3 splatcol0_16;
  mediump vec4 splat_control_17;
  mediump vec3 colorMap_18;
  mediump vec3 finalCol_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_18 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_17 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_16 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_15 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_14 = tmpvar_24;
  highp vec2 P_25;
  P_25 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat2, P_25).xyz;
  splatcol2_2nd_13 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  normalsplat0_11 = normal_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat1_10 = normal_29;
  lowp vec3 normal_30;
  normal_30.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_30.z = sqrt((1.0 - clamp (dot (normal_30.xy, normal_30.xy), 0.0, 1.0)));
  normalsplat2_9 = normal_30;
  highp vec2 P_31;
  P_31 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap2, P_31).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat2_2nd_8 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  normalsplat3_7 = normal_33;
  lowp vec3 normal_34;
  normal_34.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_34.z = sqrt((1.0 - clamp (dot (normal_34.xy, normal_34.xy), 0.0, 1.0)));
  farnormal_6 = normal_34;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_35;
    highp vec3 tmpvar_36;
    tmpvar_36 = (splat_control_17.x * normalsplat0_11);
    tmpvar_5 = tmpvar_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (tmpvar_5 + (splat_control_17.y * normalsplat1_10));
    tmpvar_5 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_5 + (splat_control_17.z * ((normalsplat2_9 * 0.5) + (normalsplat2_2nd_8 * 0.5))));
    tmpvar_5 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_5 + (splat_control_17.w * normalsplat3_7));
    tmpvar_5 = tmpvar_39;
    highp float tmpvar_40;
    tmpvar_40 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (normalize((tmpvar_5 + farnormal_6)), farnormal_6, vec3(tmpvar_40));
    tmpvar_5 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = ((((splat_control_17.x * _ColTex0) + (splat_control_17.y * _ColTex1)) + (splat_control_17.z * _ColTex2)) + (splat_control_17.w * _ColTex3));
    color_correction_35 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = (((((splat_control_17.x * splatcol0_16) + (splat_control_17.y * splatcol1_15)) + (splat_control_17.z * ((splatcol2_14 * 0.65) + (splatcol2_2nd_13 * 0.35)))) + (splat_control_17.w * splatcol3_12)) * (colorMap_18 / color_correction_35));
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (tmpvar_43, colorMap_18, vec3(tmpvar_40));
    finalCol_19 = tmpvar_44;
  } else {
    finalCol_19 = colorMap_18;
    tmpvar_5 = farnormal_6;
  };
  tmpvar_4 = finalCol_19;
  tmpvar_3 = tmpvar_5;
  lightDir_2 = xlv_TEXCOORD4;
  lowp float atten_45;
  atten_45 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  lowp vec4 c_46;
  lowp float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_5, lightDir_2));
  highp vec3 tmpvar_48;
  tmpvar_48 = (((tmpvar_4 * _LightColor0.xyz) * tmpvar_47) * (atten_45 * 2.0));
  c_46.xyz = tmpvar_48;
  c_46.w = 0.0;
  c_1.xyz = c_46.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 393
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 465
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 404
uniform sampler2D _Control;
#line 417
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 421
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 477
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 481
uniform highp vec4 _Splat3_ST;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 404
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 408
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 413
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 482
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 485
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 489
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    #line 493
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 497
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 502
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 393
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 465
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 404
uniform sampler2D _Control;
#line 417
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 421
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 477
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 481
uniform highp vec4 _Splat3_ST;
#line 360
lowp vec4 LightingBlinnPhong( in SurfaceOutput s, in lowp vec3 lightDir, in mediump vec3 viewDir, in lowp float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    lowp float diff = max( 0.0, dot( s.Normal, lightDir));
    #line 364
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = (pow( nh, (s.Specular * 128.0)) * s.Gloss);
    lowp vec4 c;
    c.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * spec)) * (atten * 2.0));
    #line 368
    c.w = (s.Alpha + (((_LightColor0.w * _SpecColor.w) * spec) * atten));
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 424
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 426
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 430
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 434
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 438
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 443
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 447
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 451
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 455
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 459
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 463
    o.Alpha = 0.0;
}
#line 504
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 506
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    #line 510
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    #line 514
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 518
    o.Gloss = 0.0;
    surf( surfIN, o);
    lowp vec3 lightDir = IN.lightDir;
    lowp vec4 c = LightingBlinnPhong( o, lightDir, normalize(IN.viewDir), (texture( _LightTexture0, IN._LightCoord).w * 1.0));
    #line 522
    c.w = 0.0;
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 5
//   opengl - ALU: 97 to 109, TEX: 13 to 15
//   d3d9 - ALU: 85 to 97, TEX: 13 to 15, FLOW: 2 to 2
SubProgram "opengl " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
Vector 1 [_ColTex0]
Vector 2 [_ColTex1]
Vector 3 [_ColTex2]
Vector 4 [_ColTex3]
Float 5 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_LightTexture0] 2D
"3.0-!!ARBfp1.0
# 103 ALU, 14 TEX
PARAM c[8] = { program.local[0..5],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766, 2, 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
RCP R1.w, c[5].x;
MUL R1.w, fragment.texcoord[3].x, R1;
TEX R0, fragment.texcoord[0], texture[1], 2D;
TEX R1.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R2.xyz, R0.y, R1;
TEX R1.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R3.xyz, R0.x, R1, R2;
MUL R1.xyz, R0.y, c[2];
MAD R2.xyz, R0.x, c[1], R1;
MUL R5.xy, fragment.texcoord[1].zwzw, c[7].x;
MOV R4.w, c[6].y;
MAD R4.xyz, R0.z, c[3], R2;
TEX R1.xyz, R5, texture[4], 2D;
MUL R2.xyz, R1, c[7].y;
TEX R1.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R1.xyz, R1, c[6].w, R2;
MAD R2.xyz, R0.z, R1, R3;
TEX R3.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R1.xyz, R0.w, c[4], R4;
MAD R2.xyz, R0.w, R3, R2;
POW R1.w, R1.w, c[6].z;
RCP R3.x, R1.x;
RCP R3.y, R1.y;
RCP R3.z, R1.z;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R3.xyz, R1, R3;
MAD R4.xyz, -R2, R3, R1;
MUL R2.xyz, R2, R3;
MAD R4.xyz, R1.w, R4, R2;
TEX R2.yw, R5, texture[8], 2D;
TEX R3.yw, fragment.texcoord[1].zwzw, texture[8], 2D;
MAD R2.xy, R2.wyzw, c[7].z, -R4.w;
MAD R3.xy, R3.wyzw, c[7].z, -R4.w;
MUL R3.zw, R2.xyxy, R2.xyxy;
MUL R2.zw, R3.xyxy, R3.xyxy;
ADD_SAT R2.z, R2, R2.w;
ADD_SAT R3.z, R3, R3.w;
ADD R2.w, -R3.z, c[6].y;
RSQ R3.z, R2.w;
ADD R2.z, -R2, c[6].y;
RSQ R2.w, R2.z;
RCP R2.z, R3.z;
RCP R3.z, R2.w;
ADD R5.xyz, R3, R2;
TEX R2.yw, fragment.texcoord[1], texture[7], 2D;
TEX R3.yw, fragment.texcoord[0].zwzw, texture[6], 2D;
MAD R2.xy, R2.wyzw, c[7].z, -R4.w;
MAD R3.xy, R3.wyzw, c[7].z, -R4.w;
MUL R3.zw, R2.xyxy, R2.xyxy;
MUL R2.zw, R3.xyxy, R3.xyxy;
ADD_SAT R2.z, R2, R2.w;
ADD_SAT R3.z, R3, R3.w;
ADD R2.w, -R3.z, c[6].y;
RSQ R3.z, R2.w;
ADD R2.z, -R2, c[6].y;
RSQ R2.w, R2.z;
RCP R2.z, R3.z;
RCP R3.z, R2.w;
MUL R3.xyz, R0.x, R3;
MUL R2.xyz, R0.y, R2;
ADD R2.xyz, R3, R2;
TEX R3.yw, fragment.texcoord[2], texture[9], 2D;
MAD R3.xy, R3.wyzw, c[7].z, -R4.w;
MUL R0.xyz, R0.z, R5;
MUL R0.xyz, R0, c[7].w;
ADD R0.xyz, R2, R0;
MUL R3.zw, R3.xyxy, R3.xyxy;
ADD_SAT R2.z, R3, R3.w;
TEX R2.yw, fragment.texcoord[0], texture[10], 2D;
ADD R3.z, -R2, c[6].y;
MAD R2.xy, R2.wyzw, c[7].z, -R4.w;
MUL R2.zw, R2.xyxy, R2.xyxy;
ADD_SAT R2.z, R2, R2.w;
RSQ R3.z, R3.z;
RCP R3.z, R3.z;
MUL R3.xyz, R0.w, R3;
ADD R2.z, -R2, c[6].y;
RSQ R0.w, R2.z;
RCP R2.z, R0.w;
ADD R0.xyz, R0, R3;
ADD R0.xyz, R2, R0;
DP3 R2.w, R0, R0;
RSQ R2.w, R2.w;
MAD R3.xyz, -R2.w, R0, R2;
MUL R0.xyz, R2.w, R0;
SLT R0.w, fragment.texcoord[3].x, c[5].x;
ABS R0.w, R0;
CMP R0.w, -R0, c[6].x, c[6].y;
CMP R1.xyz, -R0.w, R1, R4;
MAD R0.xyz, R1.w, R3, R0;
CMP R0.xyz, -R0.w, R2, R0;
DP3 R2.w, fragment.texcoord[4], fragment.texcoord[4];
RSQ R1.w, R2.w;
MUL R2.xyz, R1.w, fragment.texcoord[4];
DP3 R0.x, R0, R2;
DP3 R0.w, fragment.texcoord[6], fragment.texcoord[6];
TEX R0.w, R0.w, texture[11], 2D;
MUL R1.xyz, R1, c[0];
MAX R0.x, R0, c[6];
MUL R0.w, R0, c[7].z;
MUL R0.xyz, R1, R0.x;
MUL result.color.xyz, R0, R0.w;
MOV result.color.w, c[6].x;
END
# 103 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
Vector 1 [_ColTex0]
Vector 2 [_ColTex1]
Vector 3 [_ColTex2]
Vector 4 [_ColTex3]
Float 5 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_LightTexture0] 2D
"ps_3_0
; 92 ALU, 14 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
dcl_2d s10
dcl_2d s11
def c6, -0.50000000, 2.00000000, -1.00000000, 1.00000000
def c7, 4.00000000, 0.50000000, 0.35009766, 0.64990234
def c8, 0.00000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4.xyz
dcl_texcoord6 v6.xyz
mul r9.xy, v1.zwzw, c6.x
texld r1, v0, s1
mov_pp r2, r1
texld r1.xyz, v1, s3
texld r10.yw, r9, s8
texld r11.yw, v2, s9
texld r0.xyz, v0, s0
mov_pp r12.xyz, r1
texld r1.xyz, v1.zwzw, s4
mov_pp r4.xyz, r1
texld r1.xyz, v2, s5
mov_pp r6.xyz, r1
texld r1.yw, v1, s7
mad_pp r8.xy, r1.wyzw, c6.y, c6.z
texld r7.yw, v0.zwzw, s6
mad_pp r7.xy, r7.wyzw, c6.y, c6.z
mul_pp r1.xy, r7, r7
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r8.xyxy, r8.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c6
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c6.w
rsq_pp r1.x, r1.x
texld r1.yw, v1.zwzw, s8
texld r5.xyz, r9, s4
mad_pp r9.xy, r1.wyzw, c6.y, c6.z
rcp_pp r8.z, r1.x
mad_pp r10.xy, r10.wyzw, c6.y, c6.z
mul_pp r1.xy, r9, r9
rcp_pp r7.z, r0.w
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r10.xyxy, r10.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c6
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c6.w
rsq_pp r1.x, r1.x
texld r1.yw, v0, s10
rcp_pp r10.z, r1.x
mad_pp r11.xy, r11.wyzw, c6.y, c6.z
mad_pp r1.xy, r1.wyzw, c6.y, c6.z
mul_pp r1.zw, r11.xyxy, r11.xyxy
rcp_pp r9.z, r0.w
add_pp_sat r0.w, r1.z, r1
mul_pp r11.zw, r1.xyxy, r1.xyxy
add_pp_sat r1.z, r11, r11.w
add_pp r0.w, -r0, c6
add_pp r1.z, -r1, c6.w
rsq_pp r0.w, r0.w
rsq_pp r1.z, r1.z
texld r3.xyz, v0.zwzw, s2
rcp_pp r11.z, r0.w
rcp_pp r1.z, r1.z
if_lt v3.x, c5.x
mul_pp r12.xyz, r2.y, r12
mul_pp r5.xyz, r5, c7.z
mad_pp r4.xyz, r4, c7.w, r5
mad_pp r3.xyz, r2.x, r3, r12
mad_pp r3.xyz, r2.z, r4, r3
mul r13.xyz, r2.y, c2
mad r12.xyz, r2.x, c1, r13
mad r12.xyz, r2.z, c3, r12
mad r4.xyz, r2.w, c4, r12
add r5.xyz, r9, r10
rcp r0.w, c5.x
mad_pp r3.xyz, r2.w, r6, r3
mul r5.xyz, r2.z, r5
mul r0.w, v3.x, r0
rcp_pp r4.x, r4.x
rcp_pp r4.z, r4.z
rcp_pp r4.y, r4.y
mul_pp r4.xyz, r0, r4
mad_pp r0.xyz, -r3, r4, r0
mul_pp r3.xyz, r3, r4
mul r4.xyz, r5, c7.y
mul r5.xyz, r2.y, r8
mul r2.xyz, r2.x, r7
add_pp r2.xyz, r2, r5
add_pp r2.xyz, r2, r4
mul r4.xyz, r2.w, r11
add_pp r2.xyz, r2, r4
add r4.xyz, r2, r1
pow r2, r0.w, c7.x
dp3 r0.w, r4, r4
rsq r1.w, r0.w
mov r0.w, r2.x
mad_pp r2.xyz, r0.w, r0, r3
mul r3.xyz, r1.w, r4
mad r0.xyz, -r1.w, r4, r1
mad r0.xyz, r0.w, r0, r3
else
mov_pp r2.xyz, r0
mov_pp r0.xyz, r1
endif
dp3_pp r0.w, v4, v4
rsq_pp r0.w, r0.w
mul_pp r1.xyz, r0.w, v4
dp3_pp r0.y, r0, r1
dp3 r0.x, v6, v6
texld r0.x, r0.x, s11
mul_pp r0.w, r0.x, c6.y
max_pp r0.y, r0, c8.x
mul_pp r1.xyz, r2, c0
mul_pp r0.xyz, r1, r0.y
mul oC0.xyz, r0, r0.w
mov_pp oC0.w, c8.x
"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
Vector 1 [_ColTex0]
Vector 2 [_ColTex1]
Vector 3 [_ColTex2]
Vector 4 [_ColTex3]
Float 5 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
"3.0-!!ARBfp1.0
# 97 ALU, 13 TEX
PARAM c[8] = { program.local[0..5],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766, 2, 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R2.xy, fragment.texcoord[1].zwzw, c[7].x;
MOV R1.w, c[6].y;
TEX R3.yw, R2, texture[8], 2D;
MAD R1.xy, R3.wyzw, c[7].z, -R1.w;
MUL R2.zw, R1.xyxy, R1.xyxy;
TEX R0.yw, fragment.texcoord[1].zwzw, texture[8], 2D;
MAD R0.xy, R0.wyzw, c[7].z, -R1.w;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD_SAT R1.z, R2, R2.w;
ADD R0.w, -R1.z, c[6].y;
RSQ R0.w, R0.w;
TEX R3.yw, fragment.texcoord[0].zwzw, texture[6], 2D;
MAD R3.xy, R3.wyzw, c[7].z, -R1.w;
ADD R0.z, -R0, c[6].y;
RSQ R0.z, R0.z;
MUL R2.zw, R3.xyxy, R3.xyxy;
RCP R1.z, R0.w;
RCP R0.z, R0.z;
ADD R4.xyz, R0, R1;
ADD_SAT R1.z, R2, R2.w;
TEX R5.yw, fragment.texcoord[1], texture[7], 2D;
MAD R1.xy, R5.wyzw, c[7].z, -R1.w;
MUL R3.zw, R1.xyxy, R1.xyxy;
ADD_SAT R3.z, R3, R3.w;
ADD R2.z, -R3, c[6].y;
TEX R0, fragment.texcoord[0], texture[1], 2D;
RSQ R2.w, R2.z;
ADD R1.z, -R1, c[6].y;
RSQ R2.z, R1.z;
RCP R1.z, R2.w;
RCP R3.z, R2.z;
MUL R3.xyz, R0.x, R3;
MUL R1.xyz, R0.y, R1;
ADD R1.xyz, R3, R1;
MUL R3.xyz, R0.z, R4;
MUL R3.xyz, R3, c[7].w;
ADD R1.xyz, R1, R3;
TEX R4.yw, fragment.texcoord[2], texture[9], 2D;
MAD R4.xy, R4.wyzw, c[7].z, -R1.w;
MUL R2.zw, R4.xyxy, R4.xyxy;
TEX R3.yw, fragment.texcoord[0], texture[10], 2D;
MAD R3.xy, R3.wyzw, c[7].z, -R1.w;
ADD_SAT R2.z, R2, R2.w;
ADD R1.w, -R2.z, c[6].y;
RSQ R3.z, R1.w;
MUL R2.zw, R3.xyxy, R3.xyxy;
ADD_SAT R1.w, R2.z, R2;
RCP R4.z, R3.z;
MUL R4.xyz, R0.w, R4;
ADD R1.w, -R1, c[6].y;
RSQ R1.w, R1.w;
RCP R3.z, R1.w;
ADD R1.xyz, R1, R4;
ADD R4.xyz, R3, R1;
DP3 R1.x, R4, R4;
RSQ R2.z, R1.x;
MAD R1.xyz, -R2.z, R4, R3;
RCP R1.w, c[5].x;
MUL R1.w, fragment.texcoord[3].x, R1;
POW R2.w, R1.w, c[6].z;
MUL R4.xyz, R2.z, R4;
MAD R4.xyz, R2.w, R1, R4;
MUL R1.xyz, R0.y, c[2];
SLT R1.w, fragment.texcoord[3].x, c[5].x;
ABS R1.w, R1;
CMP R1.w, -R1, c[6].x, c[6].y;
MAD R1.xyz, R0.x, c[1], R1;
CMP R4.xyz, -R1.w, R3, R4;
MAD R3.xyz, R0.z, c[3], R1;
TEX R1.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R5.xyz, R0.y, R1;
TEX R1.xyz, R2, texture[4], 2D;
TEX R2.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R2.xyz, R0.x, R2, R5;
MUL R5.xyz, R1, c[7].y;
TEX R1.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R1.xyz, R1, c[6].w, R5;
MAD R0.xyz, R0.z, R1, R2;
MAD R3.xyz, R0.w, c[4], R3;
RCP R2.x, R3.x;
RCP R2.y, R3.y;
RCP R2.z, R3.z;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R3.xyz, R1, R2;
TEX R2.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R0.xyz, R0.w, R2, R0;
MUL R2.xyz, R0, R3;
MAD R0.xyz, -R0, R3, R1;
MAD R0.xyz, R2.w, R0, R2;
DP3 R0.w, R4, fragment.texcoord[4];
CMP R0.xyz, -R1.w, R1, R0;
MAX R0.w, R0, c[6].x;
MUL R0.xyz, R0, c[0];
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, c[7].z;
MOV result.color.w, c[6].x;
END
# 97 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
Vector 1 [_ColTex0]
Vector 2 [_ColTex1]
Vector 3 [_ColTex2]
Vector 4 [_ColTex3]
Float 5 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
"ps_3_0
; 85 ALU, 13 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
dcl_2d s10
def c6, -0.50000000, 2.00000000, -1.00000000, 1.00000000
def c7, 4.00000000, 0.50000000, 0.35009766, 0.64990234
def c8, 0.00000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4.xyz
mul r9.xy, v1.zwzw, c6.x
texld r1, v0, s1
mov_pp r2, r1
texld r1.xyz, v1, s3
texld r10.yw, r9, s8
texld r11.yw, v2, s9
texld r0.xyz, v0, s0
mov_pp r12.xyz, r1
texld r1.xyz, v1.zwzw, s4
mov_pp r4.xyz, r1
texld r1.xyz, v2, s5
mov_pp r6.xyz, r1
texld r1.yw, v1, s7
mad_pp r8.xy, r1.wyzw, c6.y, c6.z
texld r7.yw, v0.zwzw, s6
mad_pp r7.xy, r7.wyzw, c6.y, c6.z
mul_pp r1.xy, r7, r7
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r8.xyxy, r8.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c6
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c6.w
rsq_pp r1.x, r1.x
texld r1.yw, v1.zwzw, s8
texld r5.xyz, r9, s4
mad_pp r9.xy, r1.wyzw, c6.y, c6.z
rcp_pp r8.z, r1.x
mad_pp r10.xy, r10.wyzw, c6.y, c6.z
mul_pp r1.xy, r9, r9
rcp_pp r7.z, r0.w
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r10.xyxy, r10.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c6
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c6.w
rsq_pp r1.x, r1.x
texld r1.yw, v0, s10
rcp_pp r10.z, r1.x
mad_pp r11.xy, r11.wyzw, c6.y, c6.z
mad_pp r1.xy, r1.wyzw, c6.y, c6.z
mul_pp r1.zw, r11.xyxy, r11.xyxy
rcp_pp r9.z, r0.w
add_pp_sat r0.w, r1.z, r1
mul_pp r11.zw, r1.xyxy, r1.xyxy
add_pp_sat r1.z, r11, r11.w
add_pp r0.w, -r0, c6
add_pp r1.z, -r1, c6.w
rsq_pp r0.w, r0.w
rsq_pp r1.z, r1.z
texld r3.xyz, v0.zwzw, s2
rcp_pp r11.z, r0.w
rcp_pp r1.z, r1.z
if_lt v3.x, c5.x
mul_pp r12.xyz, r2.y, r12
mul_pp r5.xyz, r5, c7.z
mad_pp r4.xyz, r4, c7.w, r5
mad_pp r3.xyz, r2.x, r3, r12
mad_pp r3.xyz, r2.z, r4, r3
mul r13.xyz, r2.y, c2
mad r12.xyz, r2.x, c1, r13
mad r12.xyz, r2.z, c3, r12
mad r4.xyz, r2.w, c4, r12
add r5.xyz, r9, r10
rcp r0.w, c5.x
mad_pp r3.xyz, r2.w, r6, r3
mul r5.xyz, r2.z, r5
mul r0.w, v3.x, r0
rcp_pp r4.x, r4.x
rcp_pp r4.z, r4.z
rcp_pp r4.y, r4.y
mul_pp r4.xyz, r0, r4
mad_pp r0.xyz, -r3, r4, r0
mul_pp r3.xyz, r3, r4
mul r4.xyz, r5, c7.y
mul r5.xyz, r2.y, r8
mul r2.xyz, r2.x, r7
add_pp r2.xyz, r2, r5
add_pp r2.xyz, r2, r4
mul r4.xyz, r2.w, r11
add_pp r2.xyz, r2, r4
add r4.xyz, r2, r1
pow r2, r0.w, c7.x
dp3 r0.w, r4, r4
rsq r1.w, r0.w
mov r0.w, r2.x
mul r2.xyz, r1.w, r4
mad r1.xyz, -r1.w, r4, r1
mad_pp r0.xyz, r0.w, r0, r3
mad r1.xyz, r0.w, r1, r2
else
endif
dp3_pp r0.w, r1, v4
max_pp r0.w, r0, c8.x
mul_pp r0.xyz, r0, c0
mul_pp r0.xyz, r0, r0.w
mul oC0.xyz, r0, c6.y
mov_pp oC0.w, c8.x
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
Vector 1 [_ColTex0]
Vector 2 [_ColTex1]
Vector 3 [_ColTex2]
Vector 4 [_ColTex3]
Float 5 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_LightTexture0] 2D
SetTexture 12 [_LightTextureB0] 2D
"3.0-!!ARBfp1.0
# 109 ALU, 15 TEX
PARAM c[8] = { program.local[0..5],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766, 2, 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
RCP R1.w, c[5].x;
MUL R1.w, fragment.texcoord[3].x, R1;
TEX R0, fragment.texcoord[0], texture[1], 2D;
TEX R1.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R2.xyz, R0.y, R1;
TEX R1.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R3.xyz, R0.x, R1, R2;
MUL R1.xyz, R0.y, c[2];
MAD R2.xyz, R0.x, c[1], R1;
MUL R5.xy, fragment.texcoord[1].zwzw, c[7].x;
MOV R4.w, c[6].y;
MAD R4.xyz, R0.z, c[3], R2;
TEX R1.xyz, R5, texture[4], 2D;
MUL R2.xyz, R1, c[7].y;
TEX R1.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R1.xyz, R1, c[6].w, R2;
MAD R2.xyz, R0.z, R1, R3;
TEX R3.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R1.xyz, R0.w, c[4], R4;
MAD R2.xyz, R0.w, R3, R2;
POW R1.w, R1.w, c[6].z;
RCP R3.x, R1.x;
RCP R3.y, R1.y;
RCP R3.z, R1.z;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R3.xyz, R1, R3;
MAD R4.xyz, -R2, R3, R1;
MUL R2.xyz, R2, R3;
MAD R4.xyz, R1.w, R4, R2;
TEX R2.yw, R5, texture[8], 2D;
TEX R3.yw, fragment.texcoord[1].zwzw, texture[8], 2D;
MAD R2.xy, R2.wyzw, c[7].z, -R4.w;
MAD R3.xy, R3.wyzw, c[7].z, -R4.w;
MUL R3.zw, R2.xyxy, R2.xyxy;
MUL R2.zw, R3.xyxy, R3.xyxy;
ADD_SAT R2.z, R2, R2.w;
ADD_SAT R3.z, R3, R3.w;
ADD R2.w, -R3.z, c[6].y;
RSQ R3.z, R2.w;
ADD R2.z, -R2, c[6].y;
RSQ R2.w, R2.z;
RCP R2.z, R3.z;
RCP R3.z, R2.w;
ADD R5.xyz, R3, R2;
TEX R2.yw, fragment.texcoord[1], texture[7], 2D;
TEX R3.yw, fragment.texcoord[0].zwzw, texture[6], 2D;
MAD R2.xy, R2.wyzw, c[7].z, -R4.w;
MAD R3.xy, R3.wyzw, c[7].z, -R4.w;
MUL R3.zw, R2.xyxy, R2.xyxy;
MUL R2.zw, R3.xyxy, R3.xyxy;
ADD_SAT R2.z, R2, R2.w;
ADD_SAT R3.z, R3, R3.w;
ADD R2.w, -R3.z, c[6].y;
RSQ R3.z, R2.w;
ADD R2.z, -R2, c[6].y;
RSQ R2.w, R2.z;
RCP R2.z, R3.z;
RCP R3.z, R2.w;
MUL R3.xyz, R0.x, R3;
MUL R2.xyz, R0.y, R2;
ADD R2.xyz, R3, R2;
TEX R3.yw, fragment.texcoord[2], texture[9], 2D;
MAD R3.xy, R3.wyzw, c[7].z, -R4.w;
MUL R0.xyz, R0.z, R5;
MUL R0.xyz, R0, c[7].w;
ADD R0.xyz, R2, R0;
MUL R3.zw, R3.xyxy, R3.xyxy;
ADD_SAT R2.z, R3, R3.w;
TEX R2.yw, fragment.texcoord[0], texture[10], 2D;
ADD R3.z, -R2, c[6].y;
MAD R2.xy, R2.wyzw, c[7].z, -R4.w;
MUL R2.zw, R2.xyxy, R2.xyxy;
ADD_SAT R2.z, R2, R2.w;
RSQ R3.z, R3.z;
RCP R3.z, R3.z;
MUL R3.xyz, R0.w, R3;
ADD R2.z, -R2, c[6].y;
RSQ R0.w, R2.z;
RCP R2.z, R0.w;
ADD R0.xyz, R0, R3;
ADD R0.xyz, R2, R0;
DP3 R2.w, R0, R0;
RSQ R2.w, R2.w;
MAD R3.xyz, -R2.w, R0, R2;
MUL R0.xyz, R2.w, R0;
SLT R0.w, fragment.texcoord[3].x, c[5].x;
ABS R0.w, R0;
CMP R0.w, -R0, c[6].x, c[6].y;
CMP R1.xyz, -R0.w, R1, R4;
MAD R0.xyz, R1.w, R3, R0;
CMP R0.xyz, -R0.w, R2, R0;
DP3 R2.w, fragment.texcoord[4], fragment.texcoord[4];
RSQ R1.w, R2.w;
MUL R2.xyz, R1.w, fragment.texcoord[4];
DP3 R0.x, R0, R2;
DP3 R0.y, fragment.texcoord[6], fragment.texcoord[6];
TEX R1.w, R0.y, texture[12], 2D;
RCP R0.w, fragment.texcoord[6].w;
MAD R0.zw, fragment.texcoord[6].xyxy, R0.w, c[7].w;
TEX R0.w, R0.zwzw, texture[11], 2D;
SLT R0.y, c[6].x, fragment.texcoord[6].z;
MUL R0.y, R0, R0.w;
MUL R0.y, R0, R1.w;
MUL R0.w, R0.y, c[7].z;
MUL R1.xyz, R1, c[0];
MAX R0.x, R0, c[6];
MUL R0.xyz, R1, R0.x;
MUL result.color.xyz, R0, R0.w;
MOV result.color.w, c[6].x;
END
# 109 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
Vector 1 [_ColTex0]
Vector 2 [_ColTex1]
Vector 3 [_ColTex2]
Vector 4 [_ColTex3]
Float 5 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_LightTexture0] 2D
SetTexture 12 [_LightTextureB0] 2D
"ps_3_0
; 97 ALU, 15 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
dcl_2d s10
dcl_2d s11
dcl_2d s12
def c6, -0.50000000, 2.00000000, -1.00000000, 1.00000000
def c7, 4.00000000, 0.50000000, 0.35009766, 0.64990234
def c8, 0.00000000, 1.00000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4.xyz
dcl_texcoord6 v6
mul r9.xy, v1.zwzw, c6.x
texld r1, v0, s1
mov_pp r2, r1
texld r1.xyz, v1, s3
texld r10.yw, r9, s8
texld r11.yw, v2, s9
texld r0.xyz, v0, s0
mov_pp r12.xyz, r1
texld r1.xyz, v1.zwzw, s4
mov_pp r4.xyz, r1
texld r1.xyz, v2, s5
mov_pp r6.xyz, r1
texld r1.yw, v1, s7
mad_pp r8.xy, r1.wyzw, c6.y, c6.z
texld r7.yw, v0.zwzw, s6
mad_pp r7.xy, r7.wyzw, c6.y, c6.z
mul_pp r1.xy, r7, r7
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r8.xyxy, r8.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c6
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c6.w
rsq_pp r1.x, r1.x
texld r1.yw, v1.zwzw, s8
texld r5.xyz, r9, s4
mad_pp r9.xy, r1.wyzw, c6.y, c6.z
rcp_pp r8.z, r1.x
mad_pp r10.xy, r10.wyzw, c6.y, c6.z
mul_pp r1.xy, r9, r9
rcp_pp r7.z, r0.w
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r10.xyxy, r10.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c6
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c6.w
rsq_pp r1.x, r1.x
texld r1.yw, v0, s10
rcp_pp r10.z, r1.x
mad_pp r11.xy, r11.wyzw, c6.y, c6.z
mad_pp r1.xy, r1.wyzw, c6.y, c6.z
mul_pp r1.zw, r11.xyxy, r11.xyxy
rcp_pp r9.z, r0.w
add_pp_sat r0.w, r1.z, r1
mul_pp r11.zw, r1.xyxy, r1.xyxy
add_pp_sat r1.z, r11, r11.w
add_pp r0.w, -r0, c6
add_pp r1.z, -r1, c6.w
rsq_pp r0.w, r0.w
rsq_pp r1.z, r1.z
texld r3.xyz, v0.zwzw, s2
rcp_pp r11.z, r0.w
rcp_pp r1.z, r1.z
if_lt v3.x, c5.x
mul_pp r12.xyz, r2.y, r12
mul_pp r5.xyz, r5, c7.z
mad_pp r4.xyz, r4, c7.w, r5
mad_pp r3.xyz, r2.x, r3, r12
mad_pp r3.xyz, r2.z, r4, r3
mul r13.xyz, r2.y, c2
mad r12.xyz, r2.x, c1, r13
mad r12.xyz, r2.z, c3, r12
mad r4.xyz, r2.w, c4, r12
add r5.xyz, r9, r10
rcp r0.w, c5.x
mad_pp r3.xyz, r2.w, r6, r3
mul r5.xyz, r2.z, r5
mul r0.w, v3.x, r0
rcp_pp r4.x, r4.x
rcp_pp r4.z, r4.z
rcp_pp r4.y, r4.y
mul_pp r4.xyz, r0, r4
mad_pp r0.xyz, -r3, r4, r0
mul_pp r3.xyz, r3, r4
mul r4.xyz, r5, c7.y
mul r5.xyz, r2.y, r8
mul r2.xyz, r2.x, r7
add_pp r2.xyz, r2, r5
add_pp r2.xyz, r2, r4
mul r4.xyz, r2.w, r11
add_pp r2.xyz, r2, r4
add r4.xyz, r2, r1
pow r2, r0.w, c7.x
dp3 r0.w, r4, r4
rsq r1.w, r0.w
mov r0.w, r2.x
mad_pp r2.xyz, r0.w, r0, r3
mul r3.xyz, r1.w, r4
mad r0.xyz, -r1.w, r4, r1
mad r0.xyz, r0.w, r0, r3
else
mov_pp r2.xyz, r0
mov_pp r0.xyz, r1
endif
dp3_pp r0.w, v4, v4
rsq_pp r0.w, r0.w
mul_pp r1.xyz, r0.w, v4
dp3_pp r0.y, r0, r1
rcp r0.x, v6.w
mad r1.xy, v6, r0.x, c7.y
texld r0.w, r1, s11
max_pp r0.z, r0.y, c8.x
dp3 r0.x, v6, v6
cmp r0.y, -v6.z, c8.x, c8
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s12
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, c6.y
mul_pp r1.xyz, r2, c0
mul_pp r0.xyz, r1, r0.z
mul oC0.xyz, r0, r0.w
mov_pp oC0.w, c8.x
"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_ColTex0]
Vector 2 [_ColTex1]
Vector 3 [_ColTex2]
Vector 4 [_ColTex3]
Float 5 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_LightTextureB0] 2D
SetTexture 12 [_LightTexture0] CUBE
"3.0-!!ARBfp1.0
# 105 ALU, 15 TEX
PARAM c[8] = { program.local[0..5],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766, 2, 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
RCP R1.w, c[5].x;
MUL R1.w, fragment.texcoord[3].x, R1;
TEX R0, fragment.texcoord[0], texture[1], 2D;
TEX R1.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R2.xyz, R0.y, R1;
TEX R1.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R3.xyz, R0.x, R1, R2;
MUL R1.xyz, R0.y, c[2];
MAD R2.xyz, R0.x, c[1], R1;
MUL R5.xy, fragment.texcoord[1].zwzw, c[7].x;
MOV R4.w, c[6].y;
MAD R4.xyz, R0.z, c[3], R2;
TEX R1.xyz, R5, texture[4], 2D;
MUL R2.xyz, R1, c[7].y;
TEX R1.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R1.xyz, R1, c[6].w, R2;
MAD R2.xyz, R0.z, R1, R3;
TEX R3.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R1.xyz, R0.w, c[4], R4;
MAD R2.xyz, R0.w, R3, R2;
POW R1.w, R1.w, c[6].z;
RCP R3.x, R1.x;
RCP R3.y, R1.y;
RCP R3.z, R1.z;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R3.xyz, R1, R3;
MAD R4.xyz, -R2, R3, R1;
MUL R2.xyz, R2, R3;
MAD R4.xyz, R1.w, R4, R2;
TEX R2.yw, R5, texture[8], 2D;
TEX R3.yw, fragment.texcoord[1].zwzw, texture[8], 2D;
MAD R2.xy, R2.wyzw, c[7].z, -R4.w;
MAD R3.xy, R3.wyzw, c[7].z, -R4.w;
MUL R3.zw, R2.xyxy, R2.xyxy;
MUL R2.zw, R3.xyxy, R3.xyxy;
ADD_SAT R2.z, R2, R2.w;
ADD_SAT R3.z, R3, R3.w;
ADD R2.w, -R3.z, c[6].y;
RSQ R3.z, R2.w;
ADD R2.z, -R2, c[6].y;
RSQ R2.w, R2.z;
RCP R2.z, R3.z;
RCP R3.z, R2.w;
ADD R5.xyz, R3, R2;
TEX R2.yw, fragment.texcoord[1], texture[7], 2D;
TEX R3.yw, fragment.texcoord[0].zwzw, texture[6], 2D;
MAD R2.xy, R2.wyzw, c[7].z, -R4.w;
MAD R3.xy, R3.wyzw, c[7].z, -R4.w;
MUL R3.zw, R2.xyxy, R2.xyxy;
MUL R2.zw, R3.xyxy, R3.xyxy;
ADD_SAT R2.z, R2, R2.w;
ADD_SAT R3.z, R3, R3.w;
ADD R2.w, -R3.z, c[6].y;
RSQ R3.z, R2.w;
ADD R2.z, -R2, c[6].y;
RSQ R2.w, R2.z;
RCP R2.z, R3.z;
RCP R3.z, R2.w;
MUL R3.xyz, R0.x, R3;
MUL R2.xyz, R0.y, R2;
ADD R2.xyz, R3, R2;
TEX R3.yw, fragment.texcoord[2], texture[9], 2D;
MAD R3.xy, R3.wyzw, c[7].z, -R4.w;
MUL R0.xyz, R0.z, R5;
MUL R0.xyz, R0, c[7].w;
ADD R0.xyz, R2, R0;
MUL R3.zw, R3.xyxy, R3.xyxy;
ADD_SAT R2.z, R3, R3.w;
TEX R2.yw, fragment.texcoord[0], texture[10], 2D;
ADD R3.z, -R2, c[6].y;
MAD R2.xy, R2.wyzw, c[7].z, -R4.w;
MUL R2.zw, R2.xyxy, R2.xyxy;
ADD_SAT R2.z, R2, R2.w;
RSQ R3.z, R3.z;
RCP R3.z, R3.z;
MUL R3.xyz, R0.w, R3;
ADD R2.z, -R2, c[6].y;
RSQ R0.w, R2.z;
RCP R2.z, R0.w;
ADD R0.xyz, R0, R3;
ADD R0.xyz, R2, R0;
DP3 R2.w, R0, R0;
RSQ R2.w, R2.w;
MAD R3.xyz, -R2.w, R0, R2;
MUL R0.xyz, R2.w, R0;
SLT R0.w, fragment.texcoord[3].x, c[5].x;
ABS R0.w, R0;
CMP R0.w, -R0, c[6].x, c[6].y;
MAD R0.xyz, R1.w, R3, R0;
CMP R1.xyz, -R0.w, R1, R4;
CMP R0.xyz, -R0.w, R2, R0;
DP3 R3.w, fragment.texcoord[4], fragment.texcoord[4];
RSQ R2.w, R3.w;
MUL R3.xyz, R2.w, fragment.texcoord[4];
DP3 R0.x, R0, R3;
DP3 R0.y, fragment.texcoord[6], fragment.texcoord[6];
TEX R0.w, fragment.texcoord[6], texture[12], CUBE;
TEX R1.w, R0.y, texture[11], 2D;
MUL R0.y, R1.w, R0.w;
MUL R0.w, R0.y, c[7].z;
MUL R1.xyz, R1, c[0];
MAX R0.x, R0, c[6];
MUL R0.xyz, R1, R0.x;
MUL result.color.xyz, R0, R0.w;
MOV result.color.w, c[6].x;
END
# 105 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_ColTex0]
Vector 2 [_ColTex1]
Vector 3 [_ColTex2]
Vector 4 [_ColTex3]
Float 5 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_LightTextureB0] 2D
SetTexture 12 [_LightTexture0] CUBE
"ps_3_0
; 93 ALU, 15 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
dcl_2d s10
dcl_2d s11
dcl_cube s12
def c6, -0.50000000, 2.00000000, -1.00000000, 1.00000000
def c7, 4.00000000, 0.50000000, 0.35009766, 0.64990234
def c8, 0.00000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4.xyz
dcl_texcoord6 v6.xyz
mul r9.xy, v1.zwzw, c6.x
texld r1, v0, s1
mov_pp r2, r1
texld r1.xyz, v1, s3
texld r10.yw, r9, s8
texld r11.yw, v2, s9
texld r0.xyz, v0, s0
mov_pp r12.xyz, r1
texld r1.xyz, v1.zwzw, s4
mov_pp r4.xyz, r1
texld r1.xyz, v2, s5
mov_pp r6.xyz, r1
texld r1.yw, v1, s7
mad_pp r8.xy, r1.wyzw, c6.y, c6.z
texld r7.yw, v0.zwzw, s6
mad_pp r7.xy, r7.wyzw, c6.y, c6.z
mul_pp r1.xy, r7, r7
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r8.xyxy, r8.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c6
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c6.w
rsq_pp r1.x, r1.x
texld r1.yw, v1.zwzw, s8
texld r5.xyz, r9, s4
mad_pp r9.xy, r1.wyzw, c6.y, c6.z
rcp_pp r8.z, r1.x
mad_pp r10.xy, r10.wyzw, c6.y, c6.z
mul_pp r1.xy, r9, r9
rcp_pp r7.z, r0.w
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r10.xyxy, r10.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c6
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c6.w
rsq_pp r1.x, r1.x
texld r1.yw, v0, s10
rcp_pp r10.z, r1.x
mad_pp r11.xy, r11.wyzw, c6.y, c6.z
mad_pp r1.xy, r1.wyzw, c6.y, c6.z
mul_pp r1.zw, r11.xyxy, r11.xyxy
rcp_pp r9.z, r0.w
add_pp_sat r0.w, r1.z, r1
mul_pp r11.zw, r1.xyxy, r1.xyxy
add_pp_sat r1.z, r11, r11.w
add_pp r0.w, -r0, c6
add_pp r1.z, -r1, c6.w
rsq_pp r0.w, r0.w
rsq_pp r1.z, r1.z
texld r3.xyz, v0.zwzw, s2
rcp_pp r11.z, r0.w
rcp_pp r1.z, r1.z
if_lt v3.x, c5.x
mul_pp r12.xyz, r2.y, r12
mul_pp r5.xyz, r5, c7.z
mad_pp r4.xyz, r4, c7.w, r5
mad_pp r3.xyz, r2.x, r3, r12
mad_pp r3.xyz, r2.z, r4, r3
mul r13.xyz, r2.y, c2
mad r12.xyz, r2.x, c1, r13
mad r12.xyz, r2.z, c3, r12
mad r4.xyz, r2.w, c4, r12
add r5.xyz, r9, r10
rcp r0.w, c5.x
mad_pp r3.xyz, r2.w, r6, r3
mul r5.xyz, r2.z, r5
mul r0.w, v3.x, r0
rcp_pp r4.x, r4.x
rcp_pp r4.z, r4.z
rcp_pp r4.y, r4.y
mul_pp r4.xyz, r0, r4
mad_pp r0.xyz, -r3, r4, r0
mul_pp r3.xyz, r3, r4
mul r4.xyz, r5, c7.y
mul r5.xyz, r2.y, r8
mul r2.xyz, r2.x, r7
add_pp r2.xyz, r2, r5
add_pp r2.xyz, r2, r4
mul r4.xyz, r2.w, r11
add_pp r2.xyz, r2, r4
add r4.xyz, r2, r1
pow r2, r0.w, c7.x
dp3 r0.w, r4, r4
rsq r1.w, r0.w
mov r0.w, r2.x
mad_pp r2.xyz, r0.w, r0, r3
mul r3.xyz, r1.w, r4
mad r0.xyz, -r1.w, r4, r1
mad r0.xyz, r0.w, r0, r3
else
mov_pp r2.xyz, r0
mov_pp r0.xyz, r1
endif
dp3_pp r0.w, v4, v4
rsq_pp r0.w, r0.w
mul_pp r1.xyz, r0.w, v4
dp3_pp r0.x, r0, r1
max_pp r0.y, r0.x, c8.x
dp3 r0.x, v6, v6
texld r0.w, v6, s12
texld r0.x, r0.x, s11
mul r0.x, r0, r0.w
mul_pp r0.w, r0.x, c6.y
mul_pp r1.xyz, r2, c0
mul_pp r0.xyz, r1, r0.y
mul oC0.xyz, r0, r0.w
mov_pp oC0.w, c8.x
"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_ColTex0]
Vector 2 [_ColTex1]
Vector 3 [_ColTex2]
Vector 4 [_ColTex3]
Float 5 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_LightTexture0] 2D
"3.0-!!ARBfp1.0
# 99 ALU, 14 TEX
PARAM c[8] = { program.local[0..5],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766, 2, 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
TEX R0, fragment.texcoord[0], texture[1], 2D;
MUL R1.xyz, R0.y, c[2];
MAD R1.xyz, R0.x, c[1], R1;
MAD R1.xyz, R0.z, c[3], R1;
TEX R2.xyz, fragment.texcoord[1], texture[3], 2D;
MOV R1.w, c[6].y;
MAD R1.xyz, R0.w, c[4], R1;
MUL R6.xy, fragment.texcoord[1].zwzw, c[7].x;
MUL R4.xyz, R0.y, R2;
TEX R3.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
TEX R2.xyz, R6, texture[4], 2D;
MAD R4.xyz, R0.x, R3, R4;
MUL R3.xyz, R2, c[7].y;
TEX R2.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R2.xyz, R2, c[6].w, R3;
MAD R4.xyz, R0.z, R2, R4;
TEX R3.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R3.xyz, R0.w, R3, R4;
RCP R2.x, R1.x;
RCP R2.y, R1.y;
RCP R2.z, R1.z;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R2.xyz, R1, R2;
MAD R4.xyz, -R3, R2, R1;
MUL R5.xyz, R3, R2;
TEX R2.yw, R6, texture[8], 2D;
TEX R3.yw, fragment.texcoord[1].zwzw, texture[8], 2D;
MAD R2.xy, R2.wyzw, c[7].z, -R1.w;
MAD R3.xy, R3.wyzw, c[7].z, -R1.w;
MUL R3.zw, R2.xyxy, R2.xyxy;
MUL R2.zw, R3.xyxy, R3.xyxy;
ADD_SAT R2.z, R2, R2.w;
ADD_SAT R3.z, R3, R3.w;
ADD R2.w, -R3.z, c[6].y;
RSQ R3.z, R2.w;
ADD R2.z, -R2, c[6].y;
RSQ R2.w, R2.z;
RCP R2.z, R3.z;
RCP R3.z, R2.w;
ADD R6.xyz, R3, R2;
TEX R2.yw, fragment.texcoord[1], texture[7], 2D;
TEX R3.yw, fragment.texcoord[0].zwzw, texture[6], 2D;
MAD R2.xy, R2.wyzw, c[7].z, -R1.w;
MAD R3.xy, R3.wyzw, c[7].z, -R1.w;
MUL R3.zw, R2.xyxy, R2.xyxy;
MUL R2.zw, R3.xyxy, R3.xyxy;
ADD_SAT R2.z, R2, R2.w;
ADD_SAT R3.z, R3, R3.w;
ADD R2.w, -R3.z, c[6].y;
RSQ R3.z, R2.w;
ADD R2.z, -R2, c[6].y;
RSQ R2.w, R2.z;
RCP R2.z, R3.z;
RCP R3.z, R2.w;
MUL R3.xyz, R0.x, R3;
MUL R2.xyz, R0.y, R2;
ADD R2.xyz, R3, R2;
TEX R3.yw, fragment.texcoord[2], texture[9], 2D;
MAD R3.xy, R3.wyzw, c[7].z, -R1.w;
MUL R0.xyz, R0.z, R6;
MUL R0.xyz, R0, c[7].w;
ADD R0.xyz, R2, R0;
MUL R3.zw, R3.xyxy, R3.xyxy;
TEX R2.yw, fragment.texcoord[0], texture[10], 2D;
MAD R2.xy, R2.wyzw, c[7].z, -R1.w;
ADD_SAT R2.z, R3, R3.w;
ADD R1.w, -R2.z, c[6].y;
RSQ R3.z, R1.w;
MUL R2.zw, R2.xyxy, R2.xyxy;
ADD_SAT R1.w, R2.z, R2;
RCP R3.z, R3.z;
MUL R3.xyz, R0.w, R3;
ADD R1.w, -R1, c[6].y;
RSQ R0.w, R1.w;
RCP R2.z, R0.w;
ADD R0.xyz, R0, R3;
ADD R0.xyz, R2, R0;
DP3 R1.w, R0, R0;
RCP R0.w, c[5].x;
RSQ R2.w, R1.w;
MUL R0.w, fragment.texcoord[3].x, R0;
POW R1.w, R0.w, c[6].z;
MAD R3.xyz, R1.w, R4, R5;
MAD R4.xyz, -R2.w, R0, R2;
SLT R0.w, fragment.texcoord[3].x, c[5].x;
MUL R0.xyz, R2.w, R0;
MAD R0.xyz, R1.w, R4, R0;
ABS R0.w, R0;
CMP R0.w, -R0, c[6].x, c[6].y;
CMP R1.xyz, -R0.w, R1, R3;
CMP R2.xyz, -R0.w, R2, R0;
DP3 R0.w, R2, fragment.texcoord[4];
MUL R0.xyz, R1, c[0];
TEX R1.w, fragment.texcoord[6], texture[11], 2D;
MAX R0.w, R0, c[6].x;
MUL R1.x, R1.w, c[7].z;
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, R1.x;
MOV result.color.w, c[6].x;
END
# 99 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_ColTex0]
Vector 2 [_ColTex1]
Vector 3 [_ColTex2]
Vector 4 [_ColTex3]
Float 5 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_LightTexture0] 2D
"ps_3_0
; 86 ALU, 14 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
dcl_2d s10
dcl_2d s11
def c6, -0.50000000, 2.00000000, -1.00000000, 1.00000000
def c7, 4.00000000, 0.50000000, 0.35009766, 0.64990234
def c8, 0.00000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4.xyz
dcl_texcoord6 v6.xy
mul r9.xy, v1.zwzw, c6.x
texld r1, v0, s1
mov_pp r2, r1
texld r1.xyz, v1, s3
texld r10.yw, r9, s8
texld r11.yw, v2, s9
texld r0.xyz, v0, s0
mov_pp r12.xyz, r1
texld r1.xyz, v1.zwzw, s4
mov_pp r4.xyz, r1
texld r1.xyz, v2, s5
mov_pp r6.xyz, r1
texld r1.yw, v1, s7
mad_pp r8.xy, r1.wyzw, c6.y, c6.z
texld r7.yw, v0.zwzw, s6
mad_pp r7.xy, r7.wyzw, c6.y, c6.z
mul_pp r1.xy, r7, r7
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r8.xyxy, r8.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c6
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c6.w
rsq_pp r1.x, r1.x
texld r1.yw, v1.zwzw, s8
texld r5.xyz, r9, s4
mad_pp r9.xy, r1.wyzw, c6.y, c6.z
rcp_pp r8.z, r1.x
mad_pp r10.xy, r10.wyzw, c6.y, c6.z
mul_pp r1.xy, r9, r9
rcp_pp r7.z, r0.w
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r10.xyxy, r10.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c6
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c6.w
rsq_pp r1.x, r1.x
texld r1.yw, v0, s10
rcp_pp r10.z, r1.x
mad_pp r11.xy, r11.wyzw, c6.y, c6.z
mad_pp r1.xy, r1.wyzw, c6.y, c6.z
mul_pp r1.zw, r11.xyxy, r11.xyxy
rcp_pp r9.z, r0.w
add_pp_sat r0.w, r1.z, r1
mul_pp r11.zw, r1.xyxy, r1.xyxy
add_pp_sat r1.z, r11, r11.w
add_pp r0.w, -r0, c6
add_pp r1.z, -r1, c6.w
rsq_pp r0.w, r0.w
rsq_pp r1.z, r1.z
texld r3.xyz, v0.zwzw, s2
rcp_pp r11.z, r0.w
rcp_pp r1.z, r1.z
if_lt v3.x, c5.x
mul_pp r12.xyz, r2.y, r12
mul_pp r5.xyz, r5, c7.z
mad_pp r4.xyz, r4, c7.w, r5
mad_pp r3.xyz, r2.x, r3, r12
mad_pp r3.xyz, r2.z, r4, r3
mul r13.xyz, r2.y, c2
mad r12.xyz, r2.x, c1, r13
mad r12.xyz, r2.z, c3, r12
mad r4.xyz, r2.w, c4, r12
add r5.xyz, r9, r10
rcp r0.w, c5.x
mad_pp r3.xyz, r2.w, r6, r3
mul r5.xyz, r2.z, r5
mul r0.w, v3.x, r0
rcp_pp r4.x, r4.x
rcp_pp r4.z, r4.z
rcp_pp r4.y, r4.y
mul_pp r4.xyz, r0, r4
mad_pp r0.xyz, -r3, r4, r0
mul_pp r3.xyz, r3, r4
mul r4.xyz, r5, c7.y
mul r5.xyz, r2.y, r8
mul r2.xyz, r2.x, r7
add_pp r2.xyz, r2, r5
add_pp r2.xyz, r2, r4
mul r4.xyz, r2.w, r11
add_pp r2.xyz, r2, r4
add r4.xyz, r2, r1
pow r2, r0.w, c7.x
dp3 r0.w, r4, r4
rsq r1.w, r0.w
mov r0.w, r2.x
mul r2.xyz, r1.w, r4
mad r1.xyz, -r1.w, r4, r1
mad_pp r0.xyz, r0.w, r0, r3
mad r1.xyz, r0.w, r1, r2
else
endif
mul_pp r2.xyz, r0, c0
dp3_pp r0.x, r1, v4
texld r0.w, v6, s11
max_pp r0.x, r0, c8
mul_pp r0.w, r0, c6.y
mul_pp r0.xyz, r2, r0.x
mul oC0.xyz, r0, r0.w
mov_pp oC0.w, c8.x
"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}

}
	}
	Pass {
		Name "PREPASS"
		Tags { "LightMode" = "PrePassBase" }
		Fog {Mode Off}
Program "vp" {
// Vertex combos: 1
//   opengl - ALU: 40 to 40
//   d3d9 - ALU: 40 to 40, FLOW: 2 to 2
SubProgram "opengl " {
Keywords { }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 9 [_WorldSpaceCameraPos]
Matrix 5 [_Object2World]
Vector 10 [unity_Scale]
Vector 11 [_Control_ST]
Vector 12 [_Splat0_ST]
Vector 13 [_Splat1_ST]
Vector 14 [_Splat2_ST]
Vector 15 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 40 ALU
PARAM c[16] = { { 0, 1, 2, -1 },
		state.matrix.mvp,
		program.local[5..15] };
TEMP R0;
TEMP R1;
TEMP R2;
MUL R0.xyz, -vertex.normal.yzxw, c[0].yyxw;
MAD R0.xyz, vertex.normal.zxyw, c[0].xyyw, R0;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R2.xyz, vertex.normal.zxyw, R1.yzxw;
MAD R2.xyz, vertex.normal.yzxw, R1.zxyw, -R2;
DP3 R0.x, R0, R2;
SLT R0.x, R0, c[0];
ABS R0.x, R0;
SGE R0.x, c[0], R0;
MAD R0.x, R0, c[0].z, c[0].w;
MUL R2.xyz, R0.x, R2;
DP3 R0.y, R2, c[5];
DP3 R0.x, R1, c[5];
DP3 R0.z, vertex.normal, c[5];
MUL result.texcoord[4].xyz, R0, c[10].w;
DP3 R0.y, R2, c[6];
DP3 R2.y, R2, c[7];
DP3 R0.x, R1, c[6];
DP3 R0.z, vertex.normal, c[6];
MUL result.texcoord[5].xyz, R0, c[10].w;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
ADD R0.xyz, R0, -c[9];
DP3 R0.x, R0, R0;
RSQ R0.x, R0.x;
DP3 R2.x, R1, c[7];
DP3 R2.z, vertex.normal, c[7];
MUL result.texcoord[6].xyz, R2, c[10].w;
RCP result.texcoord[3].x, R0.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[12].xyxy, c[12];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[11], c[11].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[14].xyxy, c[14];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[13], c[13].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[15], c[15].zwzw;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 40 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Vector 9 [unity_Scale]
Vector 10 [_Control_ST]
Vector 11 [_Splat0_ST]
Vector 12 [_Splat1_ST]
Vector 13 [_Splat2_ST]
Vector 14 [_Splat3_ST]
"vs_3_0
; 40 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c15, 1.00000000, 0.00000000, -1.00000000, 0
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
mul r0.xyz, -v2.yzxw, c15.xxyw
mad r0.xyz, v2.zxyw, c15.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1.yzxw, v2.zxyw
mad r2.xyz, r1.zxyw, v2.yzxw, -r2
dp3 r0.x, r0, r2
if_lt r0.x, c15.y
mov r0.w, c15.z
else
mov r0.w, c15.x
endif
mul r0.xyz, v2.zxyw, r1.yzxw
mad r0.xyz, v2.yzxw, r1.zxyw, -r0
mul r3.xyz, r0, r0.w
dp3 r0.y, r3, c4
dp3 r0.x, r1, c4
dp3 r0.z, v2, c4
mul o5.xyz, r0, c9.w
dp3 r0.y, r3, c5
dp3 r0.x, r1, c5
dp3 r0.z, v2, c5
mul o6.xyz, r0, c9.w
dp4 r2.z, v0, c6
dp4 r2.x, v0, c4
dp4 r2.y, v0, c5
add r2.xyz, r2, -c8
dp3 r0.x, r2, r2
rsq r0.w, r0.x
dp3 r0.y, r3, c6
dp3 r0.x, r1, c6
dp3 r0.z, v2, c6
mul o7.xyz, r0, c9.w
rcp o4.x, r0.w
mad o1.zw, v3.xyxy, c11.xyxy, c11
mad o1.xy, v3, c10, c10.zwzw
mad o2.zw, v3.xyxy, c13.xyxy, c13
mad o2.xy, v3, c12, c12.zwzw
mad o3.xy, v3, c14, c14.zwzw
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = tmpvar_1.w;
  highp vec3 tmpvar_6;
  tmpvar_6 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_7;
  tmpvar_7 = ((tmpvar_2.yzx * tmpvar_6.zxy) - (tmpvar_2.zxy * tmpvar_6.yzx));
  tmpvar_5.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = dot (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)), tmpvar_6);
  if ((tmpvar_8 < 0.0)) {
    tmpvar_5.w = -1.0;
  } else {
    tmpvar_5.w = 1.0;
  };
  highp vec3 p_9;
  p_9 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_5.xyz;
  tmpvar_11 = (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)) * tmpvar_5.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_2.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_2.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_2.z;
  vec3 v_13;
  v_13.x = _Object2World[0].x;
  v_13.y = _Object2World[1].x;
  v_13.z = _Object2World[2].x;
  vec3 v_14;
  v_14.x = _Object2World[0].y;
  v_14.y = _Object2World[1].y;
  v_14.z = _Object2World[2].y;
  vec3 v_15;
  v_15.x = _Object2World[0].z;
  v_15.y = _Object2World[1].z;
  v_15.z = _Object2World[2].z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_9, p_9));
  xlv_TEXCOORD4 = ((tmpvar_12 * v_13) * unity_Scale.w);
  xlv_TEXCOORD5 = ((tmpvar_12 * v_14) * unity_Scale.w);
  xlv_TEXCOORD6 = ((tmpvar_12 * v_15) * unity_Scale.w);
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_3;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec4 splat_control_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_11 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_10 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_9 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_8 = tmpvar_15;
  highp vec2 P_16;
  P_16 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap2, P_16).xyz * 2.0) - 1.0);
  normalsplat2_2nd_7 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_6 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_5 = tmpvar_19;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    highp vec3 tmpvar_20;
    tmpvar_20 = (splat_control_11.x * normalsplat0_10);
    tmpvar_4 = tmpvar_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = (tmpvar_4 + (splat_control_11.y * normalsplat1_9));
    tmpvar_4 = tmpvar_21;
    highp vec3 tmpvar_22;
    tmpvar_22 = (tmpvar_4 + (splat_control_11.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_4 + (splat_control_11.w * normalsplat3_6));
    tmpvar_4 = tmpvar_23;
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0)));
    tmpvar_4 = tmpvar_24;
  } else {
    tmpvar_4 = farnormal_5;
  };
  highp float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD4, tmpvar_4);
  worldN_2.x = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, tmpvar_4);
  worldN_2.y = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, tmpvar_4);
  worldN_2.z = tmpvar_27;
  tmpvar_3 = worldN_2;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = tmpvar_1.w;
  highp vec3 tmpvar_6;
  tmpvar_6 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_7;
  tmpvar_7 = ((tmpvar_2.yzx * tmpvar_6.zxy) - (tmpvar_2.zxy * tmpvar_6.yzx));
  tmpvar_5.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = dot (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)), tmpvar_6);
  if ((tmpvar_8 < 0.0)) {
    tmpvar_5.w = -1.0;
  } else {
    tmpvar_5.w = 1.0;
  };
  highp vec3 p_9;
  p_9 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec3 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_5.xyz;
  tmpvar_11 = (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)) * tmpvar_5.w);
  highp mat3 tmpvar_12;
  tmpvar_12[0].x = tmpvar_10.x;
  tmpvar_12[0].y = tmpvar_11.x;
  tmpvar_12[0].z = tmpvar_2.x;
  tmpvar_12[1].x = tmpvar_10.y;
  tmpvar_12[1].y = tmpvar_11.y;
  tmpvar_12[1].z = tmpvar_2.y;
  tmpvar_12[2].x = tmpvar_10.z;
  tmpvar_12[2].y = tmpvar_11.z;
  tmpvar_12[2].z = tmpvar_2.z;
  vec3 v_13;
  v_13.x = _Object2World[0].x;
  v_13.y = _Object2World[1].x;
  v_13.z = _Object2World[2].x;
  vec3 v_14;
  v_14.x = _Object2World[0].y;
  v_14.y = _Object2World[1].y;
  v_14.z = _Object2World[2].y;
  vec3 v_15;
  v_15.x = _Object2World[0].z;
  v_15.y = _Object2World[1].z;
  v_15.z = _Object2World[2].z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_9, p_9));
  xlv_TEXCOORD4 = ((tmpvar_12 * v_13) * unity_Scale.w);
  xlv_TEXCOORD5 = ((tmpvar_12 * v_14) * unity_Scale.w);
  xlv_TEXCOORD6 = ((tmpvar_12 * v_15) * unity_Scale.w);
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp float _SplattingDistance;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_4 = tmpvar_3;
  highp vec3 farnormal_5;
  highp vec3 normalsplat3_6;
  highp vec3 normalsplat2_2nd_7;
  highp vec3 normalsplat2_8;
  highp vec3 normalsplat1_9;
  highp vec3 normalsplat0_10;
  mediump vec4 splat_control_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_11 = tmpvar_12;
  lowp vec3 normal_13;
  normal_13.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_13.z = sqrt((1.0 - clamp (dot (normal_13.xy, normal_13.xy), 0.0, 1.0)));
  normalsplat0_10 = normal_13;
  lowp vec3 normal_14;
  normal_14.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_14.z = sqrt((1.0 - clamp (dot (normal_14.xy, normal_14.xy), 0.0, 1.0)));
  normalsplat1_9 = normal_14;
  lowp vec3 normal_15;
  normal_15.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_15.z = sqrt((1.0 - clamp (dot (normal_15.xy, normal_15.xy), 0.0, 1.0)));
  normalsplat2_8 = normal_15;
  highp vec2 P_16;
  P_16 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_17;
  normal_17.xy = ((texture2D (_BumpMap2, P_16).wy * 2.0) - 1.0);
  normal_17.z = sqrt((1.0 - clamp (dot (normal_17.xy, normal_17.xy), 0.0, 1.0)));
  normalsplat2_2nd_7 = normal_17;
  lowp vec3 normal_18;
  normal_18.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  normalsplat3_6 = normal_18;
  lowp vec3 normal_19;
  normal_19.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_19.z = sqrt((1.0 - clamp (dot (normal_19.xy, normal_19.xy), 0.0, 1.0)));
  farnormal_5 = normal_19;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    highp vec3 tmpvar_20;
    tmpvar_20 = (splat_control_11.x * normalsplat0_10);
    tmpvar_4 = tmpvar_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = (tmpvar_4 + (splat_control_11.y * normalsplat1_9));
    tmpvar_4 = tmpvar_21;
    highp vec3 tmpvar_22;
    tmpvar_22 = (tmpvar_4 + (splat_control_11.z * ((normalsplat2_8 * 0.5) + (normalsplat2_2nd_7 * 0.5))));
    tmpvar_4 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_4 + (splat_control_11.w * normalsplat3_6));
    tmpvar_4 = tmpvar_23;
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (normalize((tmpvar_4 + farnormal_5)), farnormal_5, vec3(pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0)));
    tmpvar_4 = tmpvar_24;
  } else {
    tmpvar_4 = farnormal_5;
  };
  highp float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD4, tmpvar_4);
  worldN_2.x = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, tmpvar_4);
  worldN_2.y = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, tmpvar_4);
  worldN_2.z = tmpvar_27;
  tmpvar_3 = worldN_2;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec3 TtoW0;
    highp vec3 TtoW1;
    highp vec3 TtoW2;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 475
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 479
uniform highp vec4 _Splat3_ST;
#line 499
#line 402
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 406
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 411
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 480
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 483
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 487
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    #line 491
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    #line 495
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD5 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD6 = vec3(xl_retval.TtoW2);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec3 TtoW0;
    highp vec3 TtoW1;
    highp vec3 TtoW2;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 475
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 479
uniform highp vec4 _Splat3_ST;
#line 499
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 422
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 424
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 428
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 432
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 436
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 441
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 445
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 449
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 453
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 457
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 461
    o.Alpha = 0.0;
}
#line 499
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    #line 503
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    #line 507
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 511
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    #line 515
    lowp vec3 worldN;
    worldN.x = dot( IN.TtoW0, o.Normal);
    worldN.y = dot( IN.TtoW1, o.Normal);
    worldN.z = dot( IN.TtoW2, o.Normal);
    #line 519
    o.Normal = worldN;
    lowp vec4 res;
    res.xyz = ((o.Normal * 0.5) + 0.5);
    res.w = o.Specular;
    #line 523
    return res;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD4);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD5);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 1
//   opengl - ALU: 71 to 71, TEX: 7 to 7
//   d3d9 - ALU: 67 to 67, TEX: 7 to 7
SubProgram "opengl " {
Keywords { }
Float 0 [_SplattingDistance]
SetTexture 0 [_Control] 2D
SetTexture 1 [_BumpMap0] 2D
SetTexture 2 [_BumpMap1] 2D
SetTexture 3 [_BumpMap2] 2D
SetTexture 4 [_BumpMap3] 2D
SetTexture 5 [_TerrainNormalMap] 2D
"3.0-!!ARBfp1.0
# 71 ALU, 7 TEX
PARAM c[3] = { program.local[0],
		{ 0, 1, 2, 4 },
		{ -0.5, 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0.xy, fragment.texcoord[1].zwzw, c[2].x;
TEX R1.yw, R0, texture[3], 2D;
MAD R1.xy, R1.wyzw, c[1].z, -c[1].y;
MUL R1.zw, R1.xyxy, R1.xyxy;
TEX R0.yw, fragment.texcoord[1].zwzw, texture[3], 2D;
MAD R0.xy, R0.wyzw, c[1].z, -c[1].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD_SAT R1.z, R1, R1.w;
ADD R0.w, -R1.z, c[1].y;
RSQ R0.w, R0.w;
TEX R2.yw, fragment.texcoord[0].zwzw, texture[1], 2D;
ADD R0.z, -R0, c[1].y;
RSQ R0.z, R0.z;
RCP R1.z, R0.w;
RCP R0.z, R0.z;
ADD R3.xyz, R0, R1;
TEX R1.yw, fragment.texcoord[1], texture[2], 2D;
TEX R0, fragment.texcoord[0], texture[0], 2D;
MAD R1.xy, R1.wyzw, c[1].z, -c[1].y;
MAD R2.xy, R2.wyzw, c[1].z, -c[1].y;
MUL R2.zw, R1.xyxy, R1.xyxy;
MUL R1.zw, R2.xyxy, R2.xyxy;
ADD_SAT R1.z, R1, R1.w;
ADD_SAT R2.z, R2, R2.w;
ADD R1.w, -R2.z, c[1].y;
RSQ R2.z, R1.w;
ADD R1.z, -R1, c[1].y;
RSQ R1.w, R1.z;
RCP R1.z, R2.z;
RCP R2.z, R1.w;
MUL R2.xyz, R0.x, R2;
MUL R1.xyz, R0.y, R1;
ADD R1.xyz, R2, R1;
TEX R2.yw, fragment.texcoord[2], texture[4], 2D;
MAD R2.xy, R2.wyzw, c[1].z, -c[1].y;
MUL R0.xyz, R0.z, R3;
MUL R0.xyz, R0, c[2].y;
ADD R0.xyz, R1, R0;
MUL R2.zw, R2.xyxy, R2.xyxy;
ADD_SAT R1.z, R2, R2.w;
TEX R1.yw, fragment.texcoord[0], texture[5], 2D;
ADD R2.z, -R1, c[1].y;
MAD R1.xy, R1.wyzw, c[1].z, -c[1].y;
MUL R1.zw, R1.xyxy, R1.xyxy;
ADD_SAT R1.z, R1, R1.w;
RSQ R2.z, R2.z;
RCP R2.z, R2.z;
MUL R2.xyz, R0.w, R2;
ADD R1.z, -R1, c[1].y;
RSQ R0.w, R1.z;
RCP R1.w, c[0].x;
MUL R1.w, fragment.texcoord[3].x, R1;
RCP R1.z, R0.w;
ADD R0.xyz, R0, R2;
ADD R0.xyz, R1, R0;
DP3 R0.w, R0, R0;
RSQ R0.w, R0.w;
MAD R2.xyz, -R0.w, R0, R1;
MUL R0.xyz, R0.w, R0;
SLT R0.w, fragment.texcoord[3].x, c[0].x;
POW R1.w, R1.w, c[1].w;
MAD R2.xyz, R1.w, R2, R0;
ABS R0.w, R0;
CMP R0.x, -R0.w, c[1], c[1].y;
CMP R1.xyz, -R0.x, R1, R2;
DP3 R0.z, fragment.texcoord[6], R1;
DP3 R0.x, R1, fragment.texcoord[4];
DP3 R0.y, R1, fragment.texcoord[5];
MAD result.color.xyz, R0, c[2].y, c[2].y;
MOV result.color.w, c[1].x;
END
# 71 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { }
Float 0 [_SplattingDistance]
SetTexture 0 [_Control] 2D
SetTexture 1 [_BumpMap0] 2D
SetTexture 2 [_BumpMap1] 2D
SetTexture 3 [_BumpMap2] 2D
SetTexture 4 [_BumpMap3] 2D
SetTexture 5 [_TerrainNormalMap] 2D
"ps_3_0
; 67 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c1, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c2, 4.00000000, -0.50000000, 0.50000000, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v1.zwzw, c2.y
texld r1.yw, r0, s3
mad_pp r1.xy, r1.wyzw, c1.z, c1.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
texld r0.yw, v1.zwzw, s3
mad_pp r0.xy, r0.wyzw, c1.z, c1.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp_sat r1.z, r1, r1.w
add_pp r0.w, -r1.z, c1.y
rsq_pp r0.w, r0.w
texld r2.yw, v0.zwzw, s1
add_pp r0.z, -r0, c1.y
rsq_pp r0.z, r0.z
rcp_pp r1.z, r0.w
rcp_pp r0.z, r0.z
add r3.xyz, r0, r1
texld r1.yw, v1, s2
texld r0, v0, s0
mad_pp r1.xy, r1.wyzw, c1.z, c1.w
mad_pp r2.xy, r2.wyzw, c1.z, c1.w
mul_pp r2.zw, r1.xyxy, r1.xyxy
mul_pp r1.zw, r2.xyxy, r2.xyxy
add_pp_sat r1.z, r1, r1.w
add_pp_sat r2.z, r2, r2.w
add_pp r1.w, -r2.z, c1.y
rsq_pp r2.z, r1.w
add_pp r1.z, -r1, c1.y
rsq_pp r1.w, r1.z
rcp_pp r1.z, r2.z
rcp_pp r2.z, r1.w
mul r2.xyz, r0.x, r2
mul r1.xyz, r0.y, r1
mul r0.xyz, r0.z, r3
add_pp r1.xyz, r2, r1
mul r2.xyz, r0, c2.z
add_pp r2.xyz, r1, r2
texld r3.yw, v2, s4
mad_pp r0.xy, r3.wyzw, c1.z, c1.w
mul_pp r3.xy, r0, r0
texld r1.yw, v0, s5
mad_pp r1.xy, r1.wyzw, c1.z, c1.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
add_pp_sat r1.z, r1, r1.w
add_pp_sat r0.z, r3.x, r3.y
add_pp r0.z, -r0, c1.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
mul r0.xyz, r0.w, r0
add_pp r1.z, -r1, c1.y
rsq_pp r0.w, r1.z
add_pp r0.xyz, r2, r0
rcp_pp r1.z, r0.w
add r2.xyz, r1, r0
dp3 r0.y, r2, r2
rsq r2.w, r0.y
mad r3.xyz, -r2.w, r2, r1
rcp r0.x, c0.x
mul r1.w, v3.x, r0.x
pow r0, r1.w, c2.x
mov r0.z, r0.x
add r0.y, v3.x, -c0.x
cmp r0.x, r0.y, c1, c1.y
mul r2.xyz, r2.w, r2
mad r2.xyz, r0.z, r3, r2
abs_pp r0.x, r0
cmp_pp r1.xyz, -r0.x, r1, r2
dp3 r0.z, v6, r1
dp3 r0.x, r1, v4
dp3 r0.y, r1, v5
mad_pp oC0.xyz, r0, c2.z, c2.z
mov_pp oC0.w, c1.x
"
}

SubProgram "gles " {
Keywords { }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { }
"!!GLES3"
}

}
	}
	Pass {
		Name "PREPASS"
		Tags { "LightMode" = "PrePassFinal" }
		ZWrite Off
Program "vp" {
// Vertex combos: 6
//   opengl - ALU: 28 to 44
//   d3d9 - ALU: 28 to 43, FLOW: 2 to 2
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 9 [_WorldSpaceCameraPos]
Vector 10 [_ProjectionParams]
Vector 11 [unity_SHAr]
Vector 12 [unity_SHAg]
Vector 13 [unity_SHAb]
Vector 14 [unity_SHBr]
Vector 15 [unity_SHBg]
Vector 16 [unity_SHBb]
Vector 17 [unity_SHC]
Matrix 5 [_Object2World]
Vector 18 [unity_Scale]
Vector 19 [_Control_ST]
Vector 20 [_Splat0_ST]
Vector 21 [_Splat1_ST]
Vector 22 [_Splat2_ST]
Vector 23 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 39 ALU
PARAM c[24] = { { 0.5, 1 },
		state.matrix.mvp,
		program.local[5..23] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R1.xyz, vertex.normal, c[18].w;
DP3 R2.w, R1, c[6];
DP3 R0.x, R1, c[5];
DP3 R0.z, R1, c[7];
MOV R0.y, R2.w;
MUL R1, R0.xyzz, R0.yzzx;
MOV R0.w, c[0].y;
DP4 R2.z, R0, c[13];
DP4 R2.y, R0, c[12];
DP4 R2.x, R0, c[11];
MUL R0.y, R2.w, R2.w;
DP4 R3.z, R1, c[16];
DP4 R3.y, R1, c[15];
DP4 R3.x, R1, c[14];
DP4 R1.w, vertex.position, c[4];
DP4 R1.z, vertex.position, c[3];
MAD R0.x, R0, R0, -R0.y;
ADD R3.xyz, R2, R3;
MUL R2.xyz, R0.x, c[17];
DP4 R1.x, vertex.position, c[1];
DP4 R1.y, vertex.position, c[2];
MUL R0.xyz, R1.xyww, c[0].x;
MUL R0.y, R0, c[10].x;
ADD result.texcoord[4].xy, R0, R0.z;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
ADD R0.xyz, R0, -c[9];
DP3 R0.x, R0, R0;
RSQ R0.x, R0.x;
ADD result.texcoord[5].xyz, R3, R2;
MOV result.position, R1;
MOV result.texcoord[4].zw, R1;
RCP result.texcoord[3].x, R0.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[20].xyxy, c[20];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[19], c[19].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[22].xyxy, c[22];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[21], c[21].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[23], c[23].zwzw;
END
# 39 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Vector 11 [unity_SHAr]
Vector 12 [unity_SHAg]
Vector 13 [unity_SHAb]
Vector 14 [unity_SHBr]
Vector 15 [unity_SHBg]
Vector 16 [unity_SHBb]
Vector 17 [unity_SHC]
Matrix 4 [_Object2World]
Vector 18 [unity_Scale]
Vector 19 [_Control_ST]
Vector 20 [_Splat0_ST]
Vector 21 [_Splat1_ST]
Vector 22 [_Splat2_ST]
Vector 23 [_Splat3_ST]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c24, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
mul r1.xyz, v2, c18.w
dp3 r2.w, r1, c5
dp3 r0.x, r1, c4
dp3 r0.z, r1, c6
mov r0.y, r2.w
mul r1, r0.xyzz, r0.yzzx
mov r0.w, c24.y
dp4 r2.z, r0, c13
dp4 r2.y, r0, c12
dp4 r2.x, r0, c11
mul r0.y, r2.w, r2.w
dp4 r3.z, r1, c16
dp4 r3.y, r1, c15
dp4 r3.x, r1, c14
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
mad r0.x, r0, r0, -r0.y
add r3.xyz, r2, r3
mul r2.xyz, r0.x, c17
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c24.x
mul r0.y, r0, c9.x
mad o5.xy, r0.z, c10.zwzw, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, r0, -c8
dp3 r0.x, r0, r0
rsq r0.x, r0.x
add o6.xyz, r3, r2
mov o0, r1
mov o5.zw, r1
rcp o4.x, r0.x
mad o1.zw, v3.xyxy, c20.xyxy, c20
mad o1.xy, v3, c19, c19.zwzw
mad o2.zw, v3.xyxy, c22.xyxy, c22
mad o2.xy, v3, c21, c21.zwzw
mad o3.xy, v3, c23, c23.zwzw
"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_5.zw;
  mat3 tmpvar_9;
  tmpvar_9[0] = _Object2World[0].xyz;
  tmpvar_9[1] = _Object2World[1].xyz;
  tmpvar_9[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = (tmpvar_9 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_11;
  mediump vec4 normal_12;
  normal_12 = tmpvar_10;
  highp float vC_13;
  mediump vec3 x3_14;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAr, normal_12);
  x1_16.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHAg, normal_12);
  x1_16.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHAb, normal_12);
  x1_16.z = tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20 = (normal_12.xyzz * normal_12.yzzx);
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBr, tmpvar_20);
  x2_15.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHBg, tmpvar_20);
  x2_15.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHBb, tmpvar_20);
  x2_15.z = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = ((normal_12.x * normal_12.x) - (normal_12.y * normal_12.y));
  vC_13 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (unity_SHC.xyz * vC_13);
  x3_14 = tmpvar_25;
  tmpvar_11 = ((x1_16 + x2_15) + x3_14);
  tmpvar_3 = tmpvar_11;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _LightBuffer;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = tmpvar_4;
  highp vec3 farnormal_7;
  highp vec3 normalsplat3_8;
  highp vec3 normalsplat2_2nd_9;
  highp vec3 normalsplat2_10;
  highp vec3 normalsplat1_11;
  highp vec3 normalsplat0_12;
  mediump vec3 splatcol3_13;
  mediump vec3 splatcol2_2nd_14;
  mediump vec3 splatcol2_15;
  mediump vec3 splatcol1_16;
  mediump vec3 splatcol0_17;
  mediump vec4 splat_control_18;
  mediump vec3 colorMap_19;
  mediump vec3 finalCol_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_19 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_17 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_16 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_15 = tmpvar_25;
  highp vec2 P_26;
  P_26 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat2, P_26).xyz;
  splatcol2_2nd_14 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_12 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_10 = tmpvar_31;
  highp vec2 P_32;
  P_32 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap2, P_32).xyz * 2.0) - 1.0);
  normalsplat2_2nd_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_7 = tmpvar_35;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (splat_control_18.x * normalsplat0_12);
    tmpvar_6 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_6 + (splat_control_18.y * normalsplat1_11));
    tmpvar_6 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_6 + (splat_control_18.z * ((normalsplat2_10 * 0.5) + (normalsplat2_2nd_9 * 0.5))));
    tmpvar_6 = tmpvar_39;
    highp vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_6 + (splat_control_18.w * normalsplat3_8));
    tmpvar_6 = tmpvar_40;
    highp float tmpvar_41;
    tmpvar_41 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_42;
    tmpvar_42 = mix (normalize((tmpvar_6 + farnormal_7)), farnormal_7, vec3(tmpvar_41));
    tmpvar_6 = tmpvar_42;
    highp vec3 tmpvar_43;
    tmpvar_43 = ((((splat_control_18.x * _ColTex0) + (splat_control_18.y * _ColTex1)) + (splat_control_18.z * _ColTex2)) + (splat_control_18.w * _ColTex3));
    color_correction_36 = tmpvar_43;
    mediump vec3 tmpvar_44;
    tmpvar_44 = (((((splat_control_18.x * splatcol0_17) + (splat_control_18.y * splatcol1_16)) + (splat_control_18.z * ((splatcol2_15 * 0.65) + (splatcol2_2nd_14 * 0.35)))) + (splat_control_18.w * splatcol3_13)) * (colorMap_19 / color_correction_36));
    highp vec3 tmpvar_45;
    tmpvar_45 = mix (tmpvar_44, colorMap_19, vec3(tmpvar_41));
    finalCol_20 = tmpvar_45;
  } else {
    finalCol_20 = colorMap_19;
    tmpvar_6 = farnormal_7;
  };
  tmpvar_5 = finalCol_20;
  tmpvar_4 = tmpvar_6;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_47.w;
  highp vec3 tmpvar_48;
  tmpvar_48 = (tmpvar_47.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_48;
  lowp vec4 c_49;
  mediump vec3 tmpvar_50;
  tmpvar_50 = (tmpvar_5 * light_3.xyz);
  c_49.xyz = tmpvar_50;
  c_49.w = 0.0;
  c_2 = c_49;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_5.zw;
  mat3 tmpvar_9;
  tmpvar_9[0] = _Object2World[0].xyz;
  tmpvar_9[1] = _Object2World[1].xyz;
  tmpvar_9[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = (tmpvar_9 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_11;
  mediump vec4 normal_12;
  normal_12 = tmpvar_10;
  highp float vC_13;
  mediump vec3 x3_14;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAr, normal_12);
  x1_16.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHAg, normal_12);
  x1_16.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHAb, normal_12);
  x1_16.z = tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20 = (normal_12.xyzz * normal_12.yzzx);
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBr, tmpvar_20);
  x2_15.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHBg, tmpvar_20);
  x2_15.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHBb, tmpvar_20);
  x2_15.z = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = ((normal_12.x * normal_12.x) - (normal_12.y * normal_12.y));
  vC_13 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (unity_SHC.xyz * vC_13);
  x3_14 = tmpvar_25;
  tmpvar_11 = ((x1_16 + x2_15) + x3_14);
  tmpvar_3 = tmpvar_11;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _LightBuffer;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = tmpvar_4;
  highp vec3 farnormal_7;
  highp vec3 normalsplat3_8;
  highp vec3 normalsplat2_2nd_9;
  highp vec3 normalsplat2_10;
  highp vec3 normalsplat1_11;
  highp vec3 normalsplat0_12;
  mediump vec3 splatcol3_13;
  mediump vec3 splatcol2_2nd_14;
  mediump vec3 splatcol2_15;
  mediump vec3 splatcol1_16;
  mediump vec3 splatcol0_17;
  mediump vec4 splat_control_18;
  mediump vec3 colorMap_19;
  mediump vec3 finalCol_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_19 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_17 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_16 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_15 = tmpvar_25;
  highp vec2 P_26;
  P_26 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat2, P_26).xyz;
  splatcol2_2nd_14 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat0_12 = normal_29;
  lowp vec3 normal_30;
  normal_30.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_30.z = sqrt((1.0 - clamp (dot (normal_30.xy, normal_30.xy), 0.0, 1.0)));
  normalsplat1_11 = normal_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  normalsplat2_10 = normal_31;
  highp vec2 P_32;
  P_32 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_BumpMap2, P_32).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  normalsplat2_2nd_9 = normal_33;
  lowp vec3 normal_34;
  normal_34.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_34.z = sqrt((1.0 - clamp (dot (normal_34.xy, normal_34.xy), 0.0, 1.0)));
  normalsplat3_8 = normal_34;
  lowp vec3 normal_35;
  normal_35.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_35.z = sqrt((1.0 - clamp (dot (normal_35.xy, normal_35.xy), 0.0, 1.0)));
  farnormal_7 = normal_35;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (splat_control_18.x * normalsplat0_12);
    tmpvar_6 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_6 + (splat_control_18.y * normalsplat1_11));
    tmpvar_6 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_6 + (splat_control_18.z * ((normalsplat2_10 * 0.5) + (normalsplat2_2nd_9 * 0.5))));
    tmpvar_6 = tmpvar_39;
    highp vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_6 + (splat_control_18.w * normalsplat3_8));
    tmpvar_6 = tmpvar_40;
    highp float tmpvar_41;
    tmpvar_41 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_42;
    tmpvar_42 = mix (normalize((tmpvar_6 + farnormal_7)), farnormal_7, vec3(tmpvar_41));
    tmpvar_6 = tmpvar_42;
    highp vec3 tmpvar_43;
    tmpvar_43 = ((((splat_control_18.x * _ColTex0) + (splat_control_18.y * _ColTex1)) + (splat_control_18.z * _ColTex2)) + (splat_control_18.w * _ColTex3));
    color_correction_36 = tmpvar_43;
    mediump vec3 tmpvar_44;
    tmpvar_44 = (((((splat_control_18.x * splatcol0_17) + (splat_control_18.y * splatcol1_16)) + (splat_control_18.z * ((splatcol2_15 * 0.65) + (splatcol2_2nd_14 * 0.35)))) + (splat_control_18.w * splatcol3_13)) * (colorMap_19 / color_correction_36));
    highp vec3 tmpvar_45;
    tmpvar_45 = mix (tmpvar_44, colorMap_19, vec3(tmpvar_41));
    finalCol_20 = tmpvar_45;
  } else {
    finalCol_20 = colorMap_19;
    tmpvar_6 = farnormal_7;
  };
  tmpvar_5 = finalCol_20;
  tmpvar_4 = tmpvar_6;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_47.w;
  highp vec3 tmpvar_48;
  tmpvar_48 = (tmpvar_47.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_48;
  lowp vec4 c_49;
  mediump vec3 tmpvar_50;
  tmpvar_50 = (tmpvar_5 * light_3.xyz);
  c_49.xyz = tmpvar_50;
  c_49.w = 0.0;
  c_2 = c_49;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec4 screen;
    highp vec3 vlight;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 474
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 478
uniform highp vec4 _Splat3_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 498
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 402
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 406
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 411
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 479
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 482
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 486
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    #line 490
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    o.screen = ComputeScreenPos( o.pos);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    o.vlight = ShadeSH9( vec4( worldN, 1.0));
    #line 494
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec4(xl_retval.screen);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec4 screen;
    highp vec3 vlight;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 474
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 478
uniform highp vec4 _Splat3_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 498
#line 371
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 373
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * _SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * _SpecColor.w));
    #line 377
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 422
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 424
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 428
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 432
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 436
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 441
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 445
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 449
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 453
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 457
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 461
    o.Alpha = 0.0;
}
#line 498
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    #line 502
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    #line 506
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 510
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    #line 514
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light = (-log2(light));
    light.xyz += IN.vlight;
    #line 518
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.screen = vec4(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_ProjectionParams]
Vector 15 [unity_ShadowFadeCenterAndType]
Matrix 9 [_Object2World]
Vector 16 [unity_LightmapST]
Vector 17 [_Control_ST]
Vector 18 [_Splat0_ST]
Vector 19 [_Splat1_ST]
Vector 20 [_Splat2_ST]
Vector 21 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 28 ALU
PARAM c[22] = { { 0.5, 1 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		program.local[9..21] };
TEMP R0;
TEMP R1;
TEMP R2;
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
MUL R1.xyz, R0.xyww, c[0].x;
MUL R1.y, R1, c[14].x;
ADD result.texcoord[4].xy, R1, R1.z;
DP4 R1.z, vertex.position, c[11];
DP4 R1.x, vertex.position, c[9];
DP4 R1.y, vertex.position, c[10];
ADD R2.xyz, R1, -c[13];
MOV result.position, R0;
DP3 R0.x, R2, R2;
RSQ R0.x, R0.x;
ADD R1.xyz, R1, -c[15];
RCP result.texcoord[3].x, R0.x;
MOV R0.x, c[0].y;
ADD R0.y, R0.x, -c[15].w;
DP4 R0.x, vertex.position, c[3];
MOV result.texcoord[4].zw, R0;
MUL result.texcoord[6].xyz, R1, c[15].w;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[18].xyxy, c[18];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[17], c[17].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[20].xyxy, c[20];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[19], c[19].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[21], c[21].zwzw;
MAD result.texcoord[5].xy, vertex.texcoord[1], c[16], c[16].zwzw;
MUL result.texcoord[6].w, -R0.x, R0.y;
END
# 28 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [unity_ShadowFadeCenterAndType]
Matrix 8 [_Object2World]
Vector 16 [unity_LightmapST]
Vector 17 [_Control_ST]
Vector 18 [_Splat0_ST]
Vector 19 [_Splat1_ST]
Vector 20 [_Splat2_ST]
Vector 21 [_Splat3_ST]
"vs_3_0
; 28 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c22, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_texcoord0 v3
dcl_texcoord1 v4
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r1.xyz, r0.xyww, c22.x
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, r1, -c12
mov o0, r0
dp3 r0.x, r2, r2
rsq r0.x, r0.x
add r1.xyz, r1, -c15
rcp o4.x, r0.x
mov r0.x, c15.w
add r0.y, c22, -r0.x
dp4 r0.x, v0, c2
mov o5.zw, r0
mul o7.xyz, r1, c15.w
mad o1.zw, v3.xyxy, c18.xyxy, c18
mad o1.xy, v3, c17, c17.zwzw
mad o2.zw, v3.xyxy, c20.xyxy, c20
mad o2.xy, v3, c19, c19.zwzw
mad o3.xy, v3, c21, c21.zwzw
mad o6.xy, v4, c16, c16.zwzw
mul o7.w, -r0.x, r0.y
"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_5.zw;
  tmpvar_3.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_3.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 unity_LightmapFade;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = tmpvar_7;
  highp vec3 farnormal_10;
  highp vec3 normalsplat3_11;
  highp vec3 normalsplat2_2nd_12;
  highp vec3 normalsplat2_13;
  highp vec3 normalsplat1_14;
  highp vec3 normalsplat0_15;
  mediump vec3 splatcol3_16;
  mediump vec3 splatcol2_2nd_17;
  mediump vec3 splatcol2_18;
  mediump vec3 splatcol1_19;
  mediump vec3 splatcol0_20;
  mediump vec4 splat_control_21;
  mediump vec3 colorMap_22;
  mediump vec3 finalCol_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_22 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_21 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_20 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_19 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_18 = tmpvar_28;
  highp vec2 P_29;
  P_29 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_Splat2, P_29).xyz;
  splatcol2_2nd_17 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_15 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_14 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_13 = tmpvar_34;
  highp vec2 P_35;
  P_35 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap2, P_35).xyz * 2.0) - 1.0);
  normalsplat2_2nd_12 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_11 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_10 = tmpvar_38;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_39;
    highp vec3 tmpvar_40;
    tmpvar_40 = (splat_control_21.x * normalsplat0_15);
    tmpvar_9 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = (tmpvar_9 + (splat_control_21.y * normalsplat1_14));
    tmpvar_9 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_9 + (splat_control_21.z * ((normalsplat2_13 * 0.5) + (normalsplat2_2nd_12 * 0.5))));
    tmpvar_9 = tmpvar_42;
    highp vec3 tmpvar_43;
    tmpvar_43 = (tmpvar_9 + (splat_control_21.w * normalsplat3_11));
    tmpvar_9 = tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_45;
    tmpvar_45 = mix (normalize((tmpvar_9 + farnormal_10)), farnormal_10, vec3(tmpvar_44));
    tmpvar_9 = tmpvar_45;
    highp vec3 tmpvar_46;
    tmpvar_46 = ((((splat_control_21.x * _ColTex0) + (splat_control_21.y * _ColTex1)) + (splat_control_21.z * _ColTex2)) + (splat_control_21.w * _ColTex3));
    color_correction_39 = tmpvar_46;
    mediump vec3 tmpvar_47;
    tmpvar_47 = (((((splat_control_21.x * splatcol0_20) + (splat_control_21.y * splatcol1_19)) + (splat_control_21.z * ((splatcol2_18 * 0.65) + (splatcol2_2nd_17 * 0.35)))) + (splat_control_21.w * splatcol3_16)) * (colorMap_22 / color_correction_39));
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (tmpvar_47, colorMap_22, vec3(tmpvar_44));
    finalCol_23 = tmpvar_48;
  } else {
    finalCol_23 = colorMap_22;
    tmpvar_9 = farnormal_10;
  };
  tmpvar_8 = finalCol_23;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_6 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_50.w;
  highp float tmpvar_51;
  tmpvar_51 = ((sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_51;
  lowp vec3 tmpvar_52;
  tmpvar_52 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD5).xyz);
  lmFull_4 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD5).xyz);
  lmIndirect_3 = tmpvar_53;
  light_6.xyz = (tmpvar_50.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = (tmpvar_8 * light_6.xyz);
  c_54.xyz = tmpvar_55;
  c_54.w = 0.0;
  c_2 = c_54;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_5.zw;
  tmpvar_3.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_3.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 unity_LightmapFade;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = tmpvar_7;
  highp vec3 farnormal_10;
  highp vec3 normalsplat3_11;
  highp vec3 normalsplat2_2nd_12;
  highp vec3 normalsplat2_13;
  highp vec3 normalsplat1_14;
  highp vec3 normalsplat0_15;
  mediump vec3 splatcol3_16;
  mediump vec3 splatcol2_2nd_17;
  mediump vec3 splatcol2_18;
  mediump vec3 splatcol1_19;
  mediump vec3 splatcol0_20;
  mediump vec4 splat_control_21;
  mediump vec3 colorMap_22;
  mediump vec3 finalCol_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_22 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_21 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_20 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_19 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_18 = tmpvar_28;
  highp vec2 P_29;
  P_29 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_Splat2, P_29).xyz;
  splatcol2_2nd_17 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat0_15 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  normalsplat1_14 = normal_33;
  lowp vec3 normal_34;
  normal_34.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_34.z = sqrt((1.0 - clamp (dot (normal_34.xy, normal_34.xy), 0.0, 1.0)));
  normalsplat2_13 = normal_34;
  highp vec2 P_35;
  P_35 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_36;
  normal_36.xy = ((texture2D (_BumpMap2, P_35).wy * 2.0) - 1.0);
  normal_36.z = sqrt((1.0 - clamp (dot (normal_36.xy, normal_36.xy), 0.0, 1.0)));
  normalsplat2_2nd_12 = normal_36;
  lowp vec3 normal_37;
  normal_37.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_37.z = sqrt((1.0 - clamp (dot (normal_37.xy, normal_37.xy), 0.0, 1.0)));
  normalsplat3_11 = normal_37;
  lowp vec3 normal_38;
  normal_38.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_38.z = sqrt((1.0 - clamp (dot (normal_38.xy, normal_38.xy), 0.0, 1.0)));
  farnormal_10 = normal_38;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_39;
    highp vec3 tmpvar_40;
    tmpvar_40 = (splat_control_21.x * normalsplat0_15);
    tmpvar_9 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = (tmpvar_9 + (splat_control_21.y * normalsplat1_14));
    tmpvar_9 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_9 + (splat_control_21.z * ((normalsplat2_13 * 0.5) + (normalsplat2_2nd_12 * 0.5))));
    tmpvar_9 = tmpvar_42;
    highp vec3 tmpvar_43;
    tmpvar_43 = (tmpvar_9 + (splat_control_21.w * normalsplat3_11));
    tmpvar_9 = tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_45;
    tmpvar_45 = mix (normalize((tmpvar_9 + farnormal_10)), farnormal_10, vec3(tmpvar_44));
    tmpvar_9 = tmpvar_45;
    highp vec3 tmpvar_46;
    tmpvar_46 = ((((splat_control_21.x * _ColTex0) + (splat_control_21.y * _ColTex1)) + (splat_control_21.z * _ColTex2)) + (splat_control_21.w * _ColTex3));
    color_correction_39 = tmpvar_46;
    mediump vec3 tmpvar_47;
    tmpvar_47 = (((((splat_control_21.x * splatcol0_20) + (splat_control_21.y * splatcol1_19)) + (splat_control_21.z * ((splatcol2_18 * 0.65) + (splatcol2_2nd_17 * 0.35)))) + (splat_control_21.w * splatcol3_16)) * (colorMap_22 / color_correction_39));
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (tmpvar_47, colorMap_22, vec3(tmpvar_44));
    finalCol_23 = tmpvar_48;
  } else {
    finalCol_23 = colorMap_22;
    tmpvar_9 = farnormal_10;
  };
  tmpvar_8 = finalCol_23;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_6 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_50.w;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (unity_Lightmap, xlv_TEXCOORD5);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (unity_LightmapInd, xlv_TEXCOORD5);
  highp float tmpvar_53;
  tmpvar_53 = ((sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((8.0 * tmpvar_51.w) * tmpvar_51.xyz);
  lmFull_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = ((8.0 * tmpvar_52.w) * tmpvar_52.xyz);
  lmIndirect_3 = tmpvar_55;
  light_6.xyz = (tmpvar_50.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = (tmpvar_8 * light_6.xyz);
  c_56.xyz = tmpvar_57;
  c_56.w = 0.0;
  c_2 = c_56;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 475
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 479
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
#line 499
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 503
uniform lowp vec4 unity_Ambient;
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 402
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 406
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 411
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 481
v2f_surf vert_surf( in appdata_full v ) {
    #line 483
    v2f_surf o;
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    #line 487
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    #line 491
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    o.screen = ComputeScreenPos( o.pos);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    #line 495
    o.lmapFadePos.xyz = (((_Object2World * v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
    o.lmapFadePos.w = ((-(glstate_matrix_modelview0 * v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec2 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec4(xl_retval.screen);
    xlv_TEXCOORD5 = vec2(xl_retval.lmap);
    xlv_TEXCOORD6 = vec4(xl_retval.lmapFadePos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 475
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 479
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
#line 499
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 503
uniform lowp vec4 unity_Ambient;
#line 177
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 179
    return (2.0 * color.xyz);
}
#line 371
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 373
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * _SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * _SpecColor.w));
    #line 377
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 422
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 424
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 428
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 432
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 436
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 441
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 445
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 449
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 453
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 457
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 461
    o.Alpha = 0.0;
}
#line 504
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 507
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    surfIN.uv_Splat2 = IN.pack1.zw;
    #line 511
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 515
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 519
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light = (-log2(light));
    #line 523
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmtex2 = texture( unity_LightmapInd, IN.lmap.xy);
    mediump float lmFade = ((length(IN.lmapFadePos) * unity_LightmapFade.z) + unity_LightmapFade.w);
    mediump vec3 lmFull = DecodeLightmap( lmtex);
    #line 527
    mediump vec3 lmIndirect = DecodeLightmap( lmtex2);
    mediump vec3 lm = mix( lmIndirect, lmFull, vec3( xll_saturate_f(lmFade)));
    light.xyz += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    #line 531
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec2 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.screen = vec4(xlv_TEXCOORD4);
    xlt_IN.lmap = vec2(xlv_TEXCOORD5);
    xlt_IN.lmapFadePos = vec4(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_ProjectionParams]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 15 [unity_Scale]
Vector 16 [unity_LightmapST]
Vector 17 [_Control_ST]
Vector 18 [_Splat0_ST]
Vector 19 [_Splat1_ST]
Vector 20 [_Splat2_ST]
Vector 21 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 44 ALU
PARAM c[23] = { { 0.5, 1, 0, 2 },
		state.matrix.mvp,
		program.local[5..21],
		{ -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0.xyz, -vertex.normal.yzxw, c[0].yyzw;
MAD R0.xyz, vertex.normal.zxyw, c[0].zyyw, R0;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R3.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R1.xyz, vertex.normal.zxyw, R3.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R3.zxyw, -R1;
DP3 R0.x, R0, R1;
SLT R0.x, R0, c[0].z;
ABS R0.x, R0;
SGE R0.x, c[0].z, R0;
MUL R0.x, R0, c[0].w;
ADD R0.x, R0, c[22];
MUL R0.xyz, R0.x, R1;
MOV R1.xyz, c[13];
MOV R1.w, c[0].y;
DP4 R2.z, R1, c[11];
DP4 R2.x, R1, c[9];
DP4 R2.y, R1, c[10];
MAD R2.xyz, R2, c[15].w, -vertex.position;
DP4 R1.w, vertex.position, c[4];
DP4 R1.z, vertex.position, c[3];
DP4 R1.x, vertex.position, c[1];
DP4 R1.y, vertex.position, c[2];
DP3 result.texcoord[6].y, R2, R0;
MUL R0.xyz, R1.xyww, c[0].x;
MUL R0.y, R0, c[14].x;
ADD result.texcoord[4].xy, R0, R0.z;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
ADD R0.xyz, R0, -c[13];
DP3 R0.x, R0, R0;
RSQ R0.x, R0.x;
DP3 result.texcoord[6].x, R2, R3;
DP3 result.texcoord[6].z, vertex.normal, R2;
MOV result.position, R1;
MOV result.texcoord[4].zw, R1;
RCP result.texcoord[3].x, R0.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[18].xyxy, c[18];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[17], c[17].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[20].xyxy, c[20];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[19], c[19].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[21], c[21].zwzw;
MAD result.texcoord[5].xy, vertex.texcoord[1], c[16], c[16].zwzw;
END
# 44 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 15 [unity_Scale]
Vector 16 [unity_LightmapST]
Vector 17 [_Control_ST]
Vector 18 [_Splat0_ST]
Vector 19 [_Splat1_ST]
Vector 20 [_Splat2_ST]
Vector 21 [_Splat3_ST]
"vs_3_0
; 43 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c22, 1.00000000, 0.00000000, -1.00000000, 0.50000000
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mul r0.xyz, -v2.yzxw, c22.xxyw
mad r0.xyz, v2.zxyw, c22.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1.yzxw, v2.zxyw
mad r2.xyz, r1.zxyw, v2.yzxw, -r2
dp3 r0.x, r0, r2
if_lt r0.x, c22.y
mov r0.w, c22.z
else
mov r0.w, c22.x
endif
mul r0.xyz, v2.zxyw, r1.yzxw
mad r0.xyz, v2.yzxw, r1.zxyw, -r0
mul r4.xyz, r0, r0.w
mov r2.xyz, c12
mov r2.w, c22.x
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
dp4 r3.z, r2, c10
dp4 r3.x, r2, c8
dp4 r3.y, r2, c9
mad r3.xyz, r3, c15.w, -v0
dp3 o7.x, r3, r1
mul r2.xyz, r0.xyww, c22.w
mul r2.y, r2, c13.x
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, r1, -c12
dp3 r1.x, r1, r1
mov o0, r0
rsq r0.x, r1.x
dp3 o7.y, r3, r4
mad o5.xy, r2.z, c14.zwzw, r2
dp3 o7.z, v2, r3
mov o5.zw, r0
rcp o4.x, r0.x
mad o1.zw, v3.xyxy, c18.xyxy, c18
mad o1.xy, v3, c17, c17.zwzw
mad o2.zw, v3.xyxy, c20.xyxy, c20
mad o2.xy, v3, c19, c19.zwzw
mad o3.xy, v3, c21, c21.zwzw
mad o6.xy, v4, c16, c16.zwzw
"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = tmpvar_1.w;
  highp vec3 tmpvar_6;
  tmpvar_6 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_7;
  tmpvar_7 = ((tmpvar_2.yzx * tmpvar_6.zxy) - (tmpvar_2.zxy * tmpvar_6.yzx));
  tmpvar_5.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = dot (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)), tmpvar_6);
  if ((tmpvar_8 < 0.0)) {
    tmpvar_5.w = -1.0;
  } else {
    tmpvar_5.w = 1.0;
  };
  highp vec3 p_9;
  p_9 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_10;
  tmpvar_10 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_10 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_10.zw;
  highp vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_5.xyz;
  tmpvar_15 = (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)) * tmpvar_5.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_14.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_2.x;
  tmpvar_16[1].x = tmpvar_14.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_2.y;
  tmpvar_16[2].x = tmpvar_14.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_2.z;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_9, p_9));
  xlv_TEXCOORD4 = o_11;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = (tmpvar_16 * (((_World2Object * tmpvar_17).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = tmpvar_4;
  highp vec3 farnormal_7;
  highp vec3 normalsplat3_8;
  highp vec3 normalsplat2_2nd_9;
  highp vec3 normalsplat2_10;
  highp vec3 normalsplat1_11;
  highp vec3 normalsplat0_12;
  mediump vec3 splatcol3_13;
  mediump vec3 splatcol2_2nd_14;
  mediump vec3 splatcol2_15;
  mediump vec3 splatcol1_16;
  mediump vec3 splatcol0_17;
  mediump vec4 splat_control_18;
  mediump vec3 colorMap_19;
  mediump vec3 finalCol_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_19 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_17 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_16 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_15 = tmpvar_25;
  highp vec2 P_26;
  P_26 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat2, P_26).xyz;
  splatcol2_2nd_14 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_12 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_10 = tmpvar_31;
  highp vec2 P_32;
  P_32 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap2, P_32).xyz * 2.0) - 1.0);
  normalsplat2_2nd_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_7 = tmpvar_35;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (splat_control_18.x * normalsplat0_12);
    tmpvar_6 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_6 + (splat_control_18.y * normalsplat1_11));
    tmpvar_6 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_6 + (splat_control_18.z * ((normalsplat2_10 * 0.5) + (normalsplat2_2nd_9 * 0.5))));
    tmpvar_6 = tmpvar_39;
    highp vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_6 + (splat_control_18.w * normalsplat3_8));
    tmpvar_6 = tmpvar_40;
    highp float tmpvar_41;
    tmpvar_41 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_42;
    tmpvar_42 = mix (normalize((tmpvar_6 + farnormal_7)), farnormal_7, vec3(tmpvar_41));
    tmpvar_6 = tmpvar_42;
    highp vec3 tmpvar_43;
    tmpvar_43 = ((((splat_control_18.x * _ColTex0) + (splat_control_18.y * _ColTex1)) + (splat_control_18.z * _ColTex2)) + (splat_control_18.w * _ColTex3));
    color_correction_36 = tmpvar_43;
    mediump vec3 tmpvar_44;
    tmpvar_44 = (((((splat_control_18.x * splatcol0_17) + (splat_control_18.y * splatcol1_16)) + (splat_control_18.z * ((splatcol2_15 * 0.65) + (splatcol2_2nd_14 * 0.35)))) + (splat_control_18.w * splatcol3_13)) * (colorMap_19 / color_correction_36));
    highp vec3 tmpvar_45;
    tmpvar_45 = mix (tmpvar_44, colorMap_19, vec3(tmpvar_41));
    finalCol_20 = tmpvar_45;
  } else {
    finalCol_20 = colorMap_19;
    tmpvar_6 = farnormal_7;
  };
  tmpvar_5 = finalCol_20;
  tmpvar_4 = tmpvar_6;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_48;
  mediump vec3 viewDir_49;
  viewDir_49 = tmpvar_47;
  highp float nh_50;
  mat3 tmpvar_51;
  tmpvar_51[0].x = 0.816497;
  tmpvar_51[0].y = -0.408248;
  tmpvar_51[0].z = -0.408248;
  tmpvar_51[1].x = 0.0;
  tmpvar_51[1].y = 0.707107;
  tmpvar_51[1].z = -0.707107;
  tmpvar_51[2].x = 0.57735;
  tmpvar_51[2].y = 0.57735;
  tmpvar_51[2].z = 0.57735;
  mediump vec3 normal_52;
  normal_52 = tmpvar_6;
  mediump vec3 scalePerBasisVector_53;
  mediump vec3 lm_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD5).xyz);
  lm_54 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD5).xyz);
  scalePerBasisVector_53 = tmpvar_56;
  lm_54 = (lm_54 * dot (clamp ((tmpvar_51 * normal_52), 0.0, 1.0), scalePerBasisVector_53));
  vec3 v_57;
  v_57.x = tmpvar_51[0].x;
  v_57.y = tmpvar_51[1].x;
  v_57.z = tmpvar_51[2].x;
  vec3 v_58;
  v_58.x = tmpvar_51[0].y;
  v_58.y = tmpvar_51[1].y;
  v_58.z = tmpvar_51[2].y;
  vec3 v_59;
  v_59.x = tmpvar_51[0].z;
  v_59.y = tmpvar_51[1].z;
  v_59.z = tmpvar_51[2].z;
  mediump float tmpvar_60;
  tmpvar_60 = max (0.0, dot (tmpvar_6, normalize((normalize((((scalePerBasisVector_53.x * v_57) + (scalePerBasisVector_53.y * v_58)) + (scalePerBasisVector_53.z * v_59))) + viewDir_49))));
  nh_50 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61.xyz = lm_54;
  tmpvar_61.w = pow (nh_50, 0.0);
  tmpvar_48 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (-(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001)))) + tmpvar_48);
  light_3 = tmpvar_62;
  lowp vec4 c_63;
  mediump vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_5 * tmpvar_62.xyz);
  c_63.xyz = tmpvar_64;
  c_63.w = 0.0;
  c_2 = c_63;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = tmpvar_1.w;
  highp vec3 tmpvar_6;
  tmpvar_6 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_7;
  tmpvar_7 = ((tmpvar_2.yzx * tmpvar_6.zxy) - (tmpvar_2.zxy * tmpvar_6.yzx));
  tmpvar_5.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = dot (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)), tmpvar_6);
  if ((tmpvar_8 < 0.0)) {
    tmpvar_5.w = -1.0;
  } else {
    tmpvar_5.w = 1.0;
  };
  highp vec3 p_9;
  p_9 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_10;
  tmpvar_10 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_10 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_10.zw;
  highp vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_5.xyz;
  tmpvar_15 = (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)) * tmpvar_5.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_14.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_2.x;
  tmpvar_16[1].x = tmpvar_14.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_2.y;
  tmpvar_16[2].x = tmpvar_14.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_2.z;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_9, p_9));
  xlv_TEXCOORD4 = o_11;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = (tmpvar_16 * (((_World2Object * tmpvar_17).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = tmpvar_4;
  highp vec3 farnormal_7;
  highp vec3 normalsplat3_8;
  highp vec3 normalsplat2_2nd_9;
  highp vec3 normalsplat2_10;
  highp vec3 normalsplat1_11;
  highp vec3 normalsplat0_12;
  mediump vec3 splatcol3_13;
  mediump vec3 splatcol2_2nd_14;
  mediump vec3 splatcol2_15;
  mediump vec3 splatcol1_16;
  mediump vec3 splatcol0_17;
  mediump vec4 splat_control_18;
  mediump vec3 colorMap_19;
  mediump vec3 finalCol_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_19 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_17 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_16 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_15 = tmpvar_25;
  highp vec2 P_26;
  P_26 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat2, P_26).xyz;
  splatcol2_2nd_14 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat0_12 = normal_29;
  lowp vec3 normal_30;
  normal_30.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_30.z = sqrt((1.0 - clamp (dot (normal_30.xy, normal_30.xy), 0.0, 1.0)));
  normalsplat1_11 = normal_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  normalsplat2_10 = normal_31;
  highp vec2 P_32;
  P_32 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_BumpMap2, P_32).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  normalsplat2_2nd_9 = normal_33;
  lowp vec3 normal_34;
  normal_34.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_34.z = sqrt((1.0 - clamp (dot (normal_34.xy, normal_34.xy), 0.0, 1.0)));
  normalsplat3_8 = normal_34;
  lowp vec3 normal_35;
  normal_35.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_35.z = sqrt((1.0 - clamp (dot (normal_35.xy, normal_35.xy), 0.0, 1.0)));
  farnormal_7 = normal_35;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (splat_control_18.x * normalsplat0_12);
    tmpvar_6 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_6 + (splat_control_18.y * normalsplat1_11));
    tmpvar_6 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_6 + (splat_control_18.z * ((normalsplat2_10 * 0.5) + (normalsplat2_2nd_9 * 0.5))));
    tmpvar_6 = tmpvar_39;
    highp vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_6 + (splat_control_18.w * normalsplat3_8));
    tmpvar_6 = tmpvar_40;
    highp float tmpvar_41;
    tmpvar_41 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_42;
    tmpvar_42 = mix (normalize((tmpvar_6 + farnormal_7)), farnormal_7, vec3(tmpvar_41));
    tmpvar_6 = tmpvar_42;
    highp vec3 tmpvar_43;
    tmpvar_43 = ((((splat_control_18.x * _ColTex0) + (splat_control_18.y * _ColTex1)) + (splat_control_18.z * _ColTex2)) + (splat_control_18.w * _ColTex3));
    color_correction_36 = tmpvar_43;
    mediump vec3 tmpvar_44;
    tmpvar_44 = (((((splat_control_18.x * splatcol0_17) + (splat_control_18.y * splatcol1_16)) + (splat_control_18.z * ((splatcol2_15 * 0.65) + (splatcol2_2nd_14 * 0.35)))) + (splat_control_18.w * splatcol3_13)) * (colorMap_19 / color_correction_36));
    highp vec3 tmpvar_45;
    tmpvar_45 = mix (tmpvar_44, colorMap_19, vec3(tmpvar_41));
    finalCol_20 = tmpvar_45;
  } else {
    finalCol_20 = colorMap_19;
    tmpvar_6 = farnormal_7;
  };
  tmpvar_5 = finalCol_20;
  tmpvar_4 = tmpvar_6;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (unity_Lightmap, xlv_TEXCOORD5);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (unity_LightmapInd, xlv_TEXCOORD5);
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_50;
  mediump vec3 viewDir_51;
  viewDir_51 = tmpvar_49;
  highp float nh_52;
  mat3 tmpvar_53;
  tmpvar_53[0].x = 0.816497;
  tmpvar_53[0].y = -0.408248;
  tmpvar_53[0].z = -0.408248;
  tmpvar_53[1].x = 0.0;
  tmpvar_53[1].y = 0.707107;
  tmpvar_53[1].z = -0.707107;
  tmpvar_53[2].x = 0.57735;
  tmpvar_53[2].y = 0.57735;
  tmpvar_53[2].z = 0.57735;
  mediump vec3 normal_54;
  normal_54 = tmpvar_6;
  mediump vec3 scalePerBasisVector_55;
  mediump vec3 lm_56;
  lowp vec3 tmpvar_57;
  tmpvar_57 = ((8.0 * tmpvar_47.w) * tmpvar_47.xyz);
  lm_56 = tmpvar_57;
  lowp vec3 tmpvar_58;
  tmpvar_58 = ((8.0 * tmpvar_48.w) * tmpvar_48.xyz);
  scalePerBasisVector_55 = tmpvar_58;
  lm_56 = (lm_56 * dot (clamp ((tmpvar_53 * normal_54), 0.0, 1.0), scalePerBasisVector_55));
  vec3 v_59;
  v_59.x = tmpvar_53[0].x;
  v_59.y = tmpvar_53[1].x;
  v_59.z = tmpvar_53[2].x;
  vec3 v_60;
  v_60.x = tmpvar_53[0].y;
  v_60.y = tmpvar_53[1].y;
  v_60.z = tmpvar_53[2].y;
  vec3 v_61;
  v_61.x = tmpvar_53[0].z;
  v_61.y = tmpvar_53[1].z;
  v_61.z = tmpvar_53[2].z;
  mediump float tmpvar_62;
  tmpvar_62 = max (0.0, dot (tmpvar_6, normalize((normalize((((scalePerBasisVector_55.x * v_59) + (scalePerBasisVector_55.y * v_60)) + (scalePerBasisVector_55.z * v_61))) + viewDir_51))));
  nh_52 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63.xyz = lm_56;
  tmpvar_63.w = pow (nh_52, 0.0);
  tmpvar_50 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (-(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001)))) + tmpvar_50);
  light_3 = tmpvar_64;
  lowp vec4 c_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_5 * tmpvar_64.xyz);
  c_65.xyz = tmpvar_66;
  c_65.w = 0.0;
  c_2 = c_65;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 475
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 479
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
#line 500
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 504
uniform lowp vec4 unity_Ambient;
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 402
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 406
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 411
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 481
v2f_surf vert_surf( in appdata_full v ) {
    #line 483
    v2f_surf o;
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    #line 487
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    #line 491
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    o.screen = ComputeScreenPos( o.pos);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    #line 495
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.viewDir = (rotation * ObjSpaceViewDir( v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec2 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec4(xl_retval.screen);
    xlv_TEXCOORD5 = vec2(xl_retval.lmap);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 475
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 479
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
#line 500
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 504
uniform lowp vec4 unity_Ambient;
#line 177
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 179
    return (2.0 * color.xyz);
}
#line 325
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 329
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 334
    return lm;
}
#line 379
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 381
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 385
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * _SpecColor.xyz) * s.Gloss) * spec);
    #line 389
    return vec4( lm, spec);
}
#line 371
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 373
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * _SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * _SpecColor.w));
    #line 377
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 422
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 424
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 428
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 432
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 436
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 441
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 445
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 449
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 453
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 457
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 461
    o.Alpha = 0.0;
}
#line 505
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 508
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    surfIN.uv_Splat2 = IN.pack1.zw;
    #line 512
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 516
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 520
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light = (-log2(light));
    #line 524
    mediump vec3 specColor;
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    mediump vec4 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor);
    #line 528
    light += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec2 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.screen = vec4(xlv_TEXCOORD4);
    xlt_IN.lmap = vec2(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 9 [_WorldSpaceCameraPos]
Vector 10 [_ProjectionParams]
Vector 11 [unity_SHAr]
Vector 12 [unity_SHAg]
Vector 13 [unity_SHAb]
Vector 14 [unity_SHBr]
Vector 15 [unity_SHBg]
Vector 16 [unity_SHBb]
Vector 17 [unity_SHC]
Matrix 5 [_Object2World]
Vector 18 [unity_Scale]
Vector 19 [_Control_ST]
Vector 20 [_Splat0_ST]
Vector 21 [_Splat1_ST]
Vector 22 [_Splat2_ST]
Vector 23 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 39 ALU
PARAM c[24] = { { 0.5, 1 },
		state.matrix.mvp,
		program.local[5..23] };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R1.xyz, vertex.normal, c[18].w;
DP3 R2.w, R1, c[6];
DP3 R0.x, R1, c[5];
DP3 R0.z, R1, c[7];
MOV R0.y, R2.w;
MUL R1, R0.xyzz, R0.yzzx;
MOV R0.w, c[0].y;
DP4 R2.z, R0, c[13];
DP4 R2.y, R0, c[12];
DP4 R2.x, R0, c[11];
MUL R0.y, R2.w, R2.w;
DP4 R3.z, R1, c[16];
DP4 R3.y, R1, c[15];
DP4 R3.x, R1, c[14];
DP4 R1.w, vertex.position, c[4];
DP4 R1.z, vertex.position, c[3];
MAD R0.x, R0, R0, -R0.y;
ADD R3.xyz, R2, R3;
MUL R2.xyz, R0.x, c[17];
DP4 R1.x, vertex.position, c[1];
DP4 R1.y, vertex.position, c[2];
MUL R0.xyz, R1.xyww, c[0].x;
MUL R0.y, R0, c[10].x;
ADD result.texcoord[4].xy, R0, R0.z;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
ADD R0.xyz, R0, -c[9];
DP3 R0.x, R0, R0;
RSQ R0.x, R0.x;
ADD result.texcoord[5].xyz, R3, R2;
MOV result.position, R1;
MOV result.texcoord[4].zw, R1;
RCP result.texcoord[3].x, R0.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[20].xyxy, c[20];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[19], c[19].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[22].xyxy, c[22];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[21], c[21].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[23], c[23].zwzw;
END
# 39 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Vector 11 [unity_SHAr]
Vector 12 [unity_SHAg]
Vector 13 [unity_SHAb]
Vector 14 [unity_SHBr]
Vector 15 [unity_SHBg]
Vector 16 [unity_SHBb]
Vector 17 [unity_SHC]
Matrix 4 [_Object2World]
Vector 18 [unity_Scale]
Vector 19 [_Control_ST]
Vector 20 [_Splat0_ST]
Vector 21 [_Splat1_ST]
Vector 22 [_Splat2_ST]
Vector 23 [_Splat3_ST]
"vs_3_0
; 39 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c24, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
mul r1.xyz, v2, c18.w
dp3 r2.w, r1, c5
dp3 r0.x, r1, c4
dp3 r0.z, r1, c6
mov r0.y, r2.w
mul r1, r0.xyzz, r0.yzzx
mov r0.w, c24.y
dp4 r2.z, r0, c13
dp4 r2.y, r0, c12
dp4 r2.x, r0, c11
mul r0.y, r2.w, r2.w
dp4 r3.z, r1, c16
dp4 r3.y, r1, c15
dp4 r3.x, r1, c14
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
mad r0.x, r0, r0, -r0.y
add r3.xyz, r2, r3
mul r2.xyz, r0.x, c17
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c24.x
mul r0.y, r0, c9.x
mad o5.xy, r0.z, c10.zwzw, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, r0, -c8
dp3 r0.x, r0, r0
rsq r0.x, r0.x
add o6.xyz, r3, r2
mov o0, r1
mov o5.zw, r1
rcp o4.x, r0.x
mad o1.zw, v3.xyxy, c20.xyxy, c20
mad o1.xy, v3, c19, c19.zwzw
mad o2.zw, v3.xyxy, c22.xyxy, c22
mad o2.xy, v3, c21, c21.zwzw
mad o3.xy, v3, c23, c23.zwzw
"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_5.zw;
  mat3 tmpvar_9;
  tmpvar_9[0] = _Object2World[0].xyz;
  tmpvar_9[1] = _Object2World[1].xyz;
  tmpvar_9[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = (tmpvar_9 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_11;
  mediump vec4 normal_12;
  normal_12 = tmpvar_10;
  highp float vC_13;
  mediump vec3 x3_14;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAr, normal_12);
  x1_16.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHAg, normal_12);
  x1_16.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHAb, normal_12);
  x1_16.z = tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20 = (normal_12.xyzz * normal_12.yzzx);
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBr, tmpvar_20);
  x2_15.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHBg, tmpvar_20);
  x2_15.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHBb, tmpvar_20);
  x2_15.z = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = ((normal_12.x * normal_12.x) - (normal_12.y * normal_12.y));
  vC_13 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (unity_SHC.xyz * vC_13);
  x3_14 = tmpvar_25;
  tmpvar_11 = ((x1_16 + x2_15) + x3_14);
  tmpvar_3 = tmpvar_11;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _LightBuffer;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = tmpvar_4;
  highp vec3 farnormal_7;
  highp vec3 normalsplat3_8;
  highp vec3 normalsplat2_2nd_9;
  highp vec3 normalsplat2_10;
  highp vec3 normalsplat1_11;
  highp vec3 normalsplat0_12;
  mediump vec3 splatcol3_13;
  mediump vec3 splatcol2_2nd_14;
  mediump vec3 splatcol2_15;
  mediump vec3 splatcol1_16;
  mediump vec3 splatcol0_17;
  mediump vec4 splat_control_18;
  mediump vec3 colorMap_19;
  mediump vec3 finalCol_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_19 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_17 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_16 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_15 = tmpvar_25;
  highp vec2 P_26;
  P_26 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat2, P_26).xyz;
  splatcol2_2nd_14 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_12 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_10 = tmpvar_31;
  highp vec2 P_32;
  P_32 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap2, P_32).xyz * 2.0) - 1.0);
  normalsplat2_2nd_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_7 = tmpvar_35;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (splat_control_18.x * normalsplat0_12);
    tmpvar_6 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_6 + (splat_control_18.y * normalsplat1_11));
    tmpvar_6 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_6 + (splat_control_18.z * ((normalsplat2_10 * 0.5) + (normalsplat2_2nd_9 * 0.5))));
    tmpvar_6 = tmpvar_39;
    highp vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_6 + (splat_control_18.w * normalsplat3_8));
    tmpvar_6 = tmpvar_40;
    highp float tmpvar_41;
    tmpvar_41 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_42;
    tmpvar_42 = mix (normalize((tmpvar_6 + farnormal_7)), farnormal_7, vec3(tmpvar_41));
    tmpvar_6 = tmpvar_42;
    highp vec3 tmpvar_43;
    tmpvar_43 = ((((splat_control_18.x * _ColTex0) + (splat_control_18.y * _ColTex1)) + (splat_control_18.z * _ColTex2)) + (splat_control_18.w * _ColTex3));
    color_correction_36 = tmpvar_43;
    mediump vec3 tmpvar_44;
    tmpvar_44 = (((((splat_control_18.x * splatcol0_17) + (splat_control_18.y * splatcol1_16)) + (splat_control_18.z * ((splatcol2_15 * 0.65) + (splatcol2_2nd_14 * 0.35)))) + (splat_control_18.w * splatcol3_13)) * (colorMap_19 / color_correction_36));
    highp vec3 tmpvar_45;
    tmpvar_45 = mix (tmpvar_44, colorMap_19, vec3(tmpvar_41));
    finalCol_20 = tmpvar_45;
  } else {
    finalCol_20 = colorMap_19;
    tmpvar_6 = farnormal_7;
  };
  tmpvar_5 = finalCol_20;
  tmpvar_4 = tmpvar_6;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_47.w;
  highp vec3 tmpvar_48;
  tmpvar_48 = (tmpvar_47.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_48;
  lowp vec4 c_49;
  mediump vec3 tmpvar_50;
  tmpvar_50 = (tmpvar_5 * light_3.xyz);
  c_49.xyz = tmpvar_50;
  c_49.w = 0.0;
  c_2 = c_49;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_5.zw;
  mat3 tmpvar_9;
  tmpvar_9[0] = _Object2World[0].xyz;
  tmpvar_9[1] = _Object2World[1].xyz;
  tmpvar_9[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = (tmpvar_9 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_11;
  mediump vec4 normal_12;
  normal_12 = tmpvar_10;
  highp float vC_13;
  mediump vec3 x3_14;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAr, normal_12);
  x1_16.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHAg, normal_12);
  x1_16.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHAb, normal_12);
  x1_16.z = tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20 = (normal_12.xyzz * normal_12.yzzx);
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBr, tmpvar_20);
  x2_15.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHBg, tmpvar_20);
  x2_15.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (unity_SHBb, tmpvar_20);
  x2_15.z = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = ((normal_12.x * normal_12.x) - (normal_12.y * normal_12.y));
  vC_13 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (unity_SHC.xyz * vC_13);
  x3_14 = tmpvar_25;
  tmpvar_11 = ((x1_16 + x2_15) + x3_14);
  tmpvar_3 = tmpvar_11;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _LightBuffer;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = tmpvar_4;
  highp vec3 farnormal_7;
  highp vec3 normalsplat3_8;
  highp vec3 normalsplat2_2nd_9;
  highp vec3 normalsplat2_10;
  highp vec3 normalsplat1_11;
  highp vec3 normalsplat0_12;
  mediump vec3 splatcol3_13;
  mediump vec3 splatcol2_2nd_14;
  mediump vec3 splatcol2_15;
  mediump vec3 splatcol1_16;
  mediump vec3 splatcol0_17;
  mediump vec4 splat_control_18;
  mediump vec3 colorMap_19;
  mediump vec3 finalCol_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_19 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_17 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_16 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_15 = tmpvar_25;
  highp vec2 P_26;
  P_26 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat2, P_26).xyz;
  splatcol2_2nd_14 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat0_12 = normal_29;
  lowp vec3 normal_30;
  normal_30.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_30.z = sqrt((1.0 - clamp (dot (normal_30.xy, normal_30.xy), 0.0, 1.0)));
  normalsplat1_11 = normal_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  normalsplat2_10 = normal_31;
  highp vec2 P_32;
  P_32 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_BumpMap2, P_32).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  normalsplat2_2nd_9 = normal_33;
  lowp vec3 normal_34;
  normal_34.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_34.z = sqrt((1.0 - clamp (dot (normal_34.xy, normal_34.xy), 0.0, 1.0)));
  normalsplat3_8 = normal_34;
  lowp vec3 normal_35;
  normal_35.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_35.z = sqrt((1.0 - clamp (dot (normal_35.xy, normal_35.xy), 0.0, 1.0)));
  farnormal_7 = normal_35;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (splat_control_18.x * normalsplat0_12);
    tmpvar_6 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_6 + (splat_control_18.y * normalsplat1_11));
    tmpvar_6 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_6 + (splat_control_18.z * ((normalsplat2_10 * 0.5) + (normalsplat2_2nd_9 * 0.5))));
    tmpvar_6 = tmpvar_39;
    highp vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_6 + (splat_control_18.w * normalsplat3_8));
    tmpvar_6 = tmpvar_40;
    highp float tmpvar_41;
    tmpvar_41 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_42;
    tmpvar_42 = mix (normalize((tmpvar_6 + farnormal_7)), farnormal_7, vec3(tmpvar_41));
    tmpvar_6 = tmpvar_42;
    highp vec3 tmpvar_43;
    tmpvar_43 = ((((splat_control_18.x * _ColTex0) + (splat_control_18.y * _ColTex1)) + (splat_control_18.z * _ColTex2)) + (splat_control_18.w * _ColTex3));
    color_correction_36 = tmpvar_43;
    mediump vec3 tmpvar_44;
    tmpvar_44 = (((((splat_control_18.x * splatcol0_17) + (splat_control_18.y * splatcol1_16)) + (splat_control_18.z * ((splatcol2_15 * 0.65) + (splatcol2_2nd_14 * 0.35)))) + (splat_control_18.w * splatcol3_13)) * (colorMap_19 / color_correction_36));
    highp vec3 tmpvar_45;
    tmpvar_45 = mix (tmpvar_44, colorMap_19, vec3(tmpvar_41));
    finalCol_20 = tmpvar_45;
  } else {
    finalCol_20 = colorMap_19;
    tmpvar_6 = farnormal_7;
  };
  tmpvar_5 = finalCol_20;
  tmpvar_4 = tmpvar_6;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_47.w;
  highp vec3 tmpvar_48;
  tmpvar_48 = (tmpvar_47.xyz + xlv_TEXCOORD5);
  light_3.xyz = tmpvar_48;
  lowp vec4 c_49;
  mediump vec3 tmpvar_50;
  tmpvar_50 = (tmpvar_5 * light_3.xyz);
  c_49.xyz = tmpvar_50;
  c_49.w = 0.0;
  c_2 = c_49;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec4 screen;
    highp vec3 vlight;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 474
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 478
uniform highp vec4 _Splat3_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 498
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 402
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 406
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 411
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 479
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 482
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 486
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    #line 490
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    o.screen = ComputeScreenPos( o.pos);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    o.vlight = ShadeSH9( vec4( worldN, 1.0));
    #line 494
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec4(xl_retval.screen);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec4 screen;
    highp vec3 vlight;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 474
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat2_ST;
#line 478
uniform highp vec4 _Splat3_ST;
uniform sampler2D _LightBuffer;
uniform lowp vec4 unity_Ambient;
#line 498
#line 371
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 373
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * _SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * _SpecColor.w));
    #line 377
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 422
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 424
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 428
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 432
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 436
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 441
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 445
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 449
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 453
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 457
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 461
    o.Alpha = 0.0;
}
#line 498
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    surfIN.uv_Control = IN.pack0.xy;
    #line 502
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    surfIN.uv_Splat2 = IN.pack1.zw;
    surfIN.uv_Splat3 = IN.pack2.xy;
    #line 506
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 510
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    surf( surfIN, o);
    #line 514
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    light.xyz += IN.vlight;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    #line 518
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.screen = vec4(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_ProjectionParams]
Vector 15 [unity_ShadowFadeCenterAndType]
Matrix 9 [_Object2World]
Vector 16 [unity_LightmapST]
Vector 17 [_Control_ST]
Vector 18 [_Splat0_ST]
Vector 19 [_Splat1_ST]
Vector 20 [_Splat2_ST]
Vector 21 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 28 ALU
PARAM c[22] = { { 0.5, 1 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		program.local[9..21] };
TEMP R0;
TEMP R1;
TEMP R2;
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
MUL R1.xyz, R0.xyww, c[0].x;
MUL R1.y, R1, c[14].x;
ADD result.texcoord[4].xy, R1, R1.z;
DP4 R1.z, vertex.position, c[11];
DP4 R1.x, vertex.position, c[9];
DP4 R1.y, vertex.position, c[10];
ADD R2.xyz, R1, -c[13];
MOV result.position, R0;
DP3 R0.x, R2, R2;
RSQ R0.x, R0.x;
ADD R1.xyz, R1, -c[15];
RCP result.texcoord[3].x, R0.x;
MOV R0.x, c[0].y;
ADD R0.y, R0.x, -c[15].w;
DP4 R0.x, vertex.position, c[3];
MOV result.texcoord[4].zw, R0;
MUL result.texcoord[6].xyz, R1, c[15].w;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[18].xyxy, c[18];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[17], c[17].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[20].xyxy, c[20];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[19], c[19].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[21], c[21].zwzw;
MAD result.texcoord[5].xy, vertex.texcoord[1], c[16], c[16].zwzw;
MUL result.texcoord[6].w, -R0.x, R0.y;
END
# 28 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [unity_ShadowFadeCenterAndType]
Matrix 8 [_Object2World]
Vector 16 [unity_LightmapST]
Vector 17 [_Control_ST]
Vector 18 [_Splat0_ST]
Vector 19 [_Splat1_ST]
Vector 20 [_Splat2_ST]
Vector 21 [_Splat3_ST]
"vs_3_0
; 28 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c22, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_texcoord0 v3
dcl_texcoord1 v4
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r1.xyz, r0.xyww, c22.x
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, r1, -c12
mov o0, r0
dp3 r0.x, r2, r2
rsq r0.x, r0.x
add r1.xyz, r1, -c15
rcp o4.x, r0.x
mov r0.x, c15.w
add r0.y, c22, -r0.x
dp4 r0.x, v0, c2
mov o5.zw, r0
mul o7.xyz, r1, c15.w
mad o1.zw, v3.xyxy, c18.xyxy, c18
mad o1.xy, v3, c17, c17.zwzw
mad o2.zw, v3.xyxy, c20.xyxy, c20
mad o2.xy, v3, c19, c19.zwzw
mad o3.xy, v3, c21, c21.zwzw
mad o6.xy, v4, c16, c16.zwzw
mul o7.w, -r0.x, r0.y
"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_5.zw;
  tmpvar_3.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_3.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 unity_LightmapFade;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = tmpvar_7;
  highp vec3 farnormal_10;
  highp vec3 normalsplat3_11;
  highp vec3 normalsplat2_2nd_12;
  highp vec3 normalsplat2_13;
  highp vec3 normalsplat1_14;
  highp vec3 normalsplat0_15;
  mediump vec3 splatcol3_16;
  mediump vec3 splatcol2_2nd_17;
  mediump vec3 splatcol2_18;
  mediump vec3 splatcol1_19;
  mediump vec3 splatcol0_20;
  mediump vec4 splat_control_21;
  mediump vec3 colorMap_22;
  mediump vec3 finalCol_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_22 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_21 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_20 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_19 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_18 = tmpvar_28;
  highp vec2 P_29;
  P_29 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_Splat2, P_29).xyz;
  splatcol2_2nd_17 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_15 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_14 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_13 = tmpvar_34;
  highp vec2 P_35;
  P_35 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap2, P_35).xyz * 2.0) - 1.0);
  normalsplat2_2nd_12 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_11 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_10 = tmpvar_38;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_39;
    highp vec3 tmpvar_40;
    tmpvar_40 = (splat_control_21.x * normalsplat0_15);
    tmpvar_9 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = (tmpvar_9 + (splat_control_21.y * normalsplat1_14));
    tmpvar_9 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_9 + (splat_control_21.z * ((normalsplat2_13 * 0.5) + (normalsplat2_2nd_12 * 0.5))));
    tmpvar_9 = tmpvar_42;
    highp vec3 tmpvar_43;
    tmpvar_43 = (tmpvar_9 + (splat_control_21.w * normalsplat3_11));
    tmpvar_9 = tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_45;
    tmpvar_45 = mix (normalize((tmpvar_9 + farnormal_10)), farnormal_10, vec3(tmpvar_44));
    tmpvar_9 = tmpvar_45;
    highp vec3 tmpvar_46;
    tmpvar_46 = ((((splat_control_21.x * _ColTex0) + (splat_control_21.y * _ColTex1)) + (splat_control_21.z * _ColTex2)) + (splat_control_21.w * _ColTex3));
    color_correction_39 = tmpvar_46;
    mediump vec3 tmpvar_47;
    tmpvar_47 = (((((splat_control_21.x * splatcol0_20) + (splat_control_21.y * splatcol1_19)) + (splat_control_21.z * ((splatcol2_18 * 0.65) + (splatcol2_2nd_17 * 0.35)))) + (splat_control_21.w * splatcol3_16)) * (colorMap_22 / color_correction_39));
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (tmpvar_47, colorMap_22, vec3(tmpvar_44));
    finalCol_23 = tmpvar_48;
  } else {
    finalCol_23 = colorMap_22;
    tmpvar_9 = farnormal_10;
  };
  tmpvar_8 = finalCol_23;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_6 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_50.w;
  highp float tmpvar_51;
  tmpvar_51 = ((sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_51;
  lowp vec3 tmpvar_52;
  tmpvar_52 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD5).xyz);
  lmFull_4 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD5).xyz);
  lmIndirect_3 = tmpvar_53;
  light_6.xyz = (tmpvar_50.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = (tmpvar_8 * light_6.xyz);
  c_54.xyz = tmpvar_55;
  c_54.w = 0.0;
  c_2 = c_54;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_5.zw;
  tmpvar_3.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_3.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 unity_LightmapFade;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = tmpvar_7;
  highp vec3 farnormal_10;
  highp vec3 normalsplat3_11;
  highp vec3 normalsplat2_2nd_12;
  highp vec3 normalsplat2_13;
  highp vec3 normalsplat1_14;
  highp vec3 normalsplat0_15;
  mediump vec3 splatcol3_16;
  mediump vec3 splatcol2_2nd_17;
  mediump vec3 splatcol2_18;
  mediump vec3 splatcol1_19;
  mediump vec3 splatcol0_20;
  mediump vec4 splat_control_21;
  mediump vec3 colorMap_22;
  mediump vec3 finalCol_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_22 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_21 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_20 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_19 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_18 = tmpvar_28;
  highp vec2 P_29;
  P_29 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_Splat2, P_29).xyz;
  splatcol2_2nd_17 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  normalsplat0_15 = normal_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  normalsplat1_14 = normal_33;
  lowp vec3 normal_34;
  normal_34.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_34.z = sqrt((1.0 - clamp (dot (normal_34.xy, normal_34.xy), 0.0, 1.0)));
  normalsplat2_13 = normal_34;
  highp vec2 P_35;
  P_35 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_36;
  normal_36.xy = ((texture2D (_BumpMap2, P_35).wy * 2.0) - 1.0);
  normal_36.z = sqrt((1.0 - clamp (dot (normal_36.xy, normal_36.xy), 0.0, 1.0)));
  normalsplat2_2nd_12 = normal_36;
  lowp vec3 normal_37;
  normal_37.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_37.z = sqrt((1.0 - clamp (dot (normal_37.xy, normal_37.xy), 0.0, 1.0)));
  normalsplat3_11 = normal_37;
  lowp vec3 normal_38;
  normal_38.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_38.z = sqrt((1.0 - clamp (dot (normal_38.xy, normal_38.xy), 0.0, 1.0)));
  farnormal_10 = normal_38;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_39;
    highp vec3 tmpvar_40;
    tmpvar_40 = (splat_control_21.x * normalsplat0_15);
    tmpvar_9 = tmpvar_40;
    highp vec3 tmpvar_41;
    tmpvar_41 = (tmpvar_9 + (splat_control_21.y * normalsplat1_14));
    tmpvar_9 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_9 + (splat_control_21.z * ((normalsplat2_13 * 0.5) + (normalsplat2_2nd_12 * 0.5))));
    tmpvar_9 = tmpvar_42;
    highp vec3 tmpvar_43;
    tmpvar_43 = (tmpvar_9 + (splat_control_21.w * normalsplat3_11));
    tmpvar_9 = tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_45;
    tmpvar_45 = mix (normalize((tmpvar_9 + farnormal_10)), farnormal_10, vec3(tmpvar_44));
    tmpvar_9 = tmpvar_45;
    highp vec3 tmpvar_46;
    tmpvar_46 = ((((splat_control_21.x * _ColTex0) + (splat_control_21.y * _ColTex1)) + (splat_control_21.z * _ColTex2)) + (splat_control_21.w * _ColTex3));
    color_correction_39 = tmpvar_46;
    mediump vec3 tmpvar_47;
    tmpvar_47 = (((((splat_control_21.x * splatcol0_20) + (splat_control_21.y * splatcol1_19)) + (splat_control_21.z * ((splatcol2_18 * 0.65) + (splatcol2_2nd_17 * 0.35)))) + (splat_control_21.w * splatcol3_16)) * (colorMap_22 / color_correction_39));
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (tmpvar_47, colorMap_22, vec3(tmpvar_44));
    finalCol_23 = tmpvar_48;
  } else {
    finalCol_23 = colorMap_22;
    tmpvar_9 = farnormal_10;
  };
  tmpvar_8 = finalCol_23;
  tmpvar_7 = tmpvar_9;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_6 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_50.w;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (unity_Lightmap, xlv_TEXCOORD5);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (unity_LightmapInd, xlv_TEXCOORD5);
  highp float tmpvar_53;
  tmpvar_53 = ((sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((8.0 * tmpvar_51.w) * tmpvar_51.xyz);
  lmFull_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = ((8.0 * tmpvar_52.w) * tmpvar_52.xyz);
  lmIndirect_3 = tmpvar_55;
  light_6.xyz = (tmpvar_50.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = (tmpvar_8 * light_6.xyz);
  c_56.xyz = tmpvar_57;
  c_56.w = 0.0;
  c_2 = c_56;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 475
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 479
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
#line 499
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 503
uniform lowp vec4 unity_Ambient;
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 402
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 406
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 411
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 481
v2f_surf vert_surf( in appdata_full v ) {
    #line 483
    v2f_surf o;
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    #line 487
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    #line 491
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    o.screen = ComputeScreenPos( o.pos);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    #line 495
    o.lmapFadePos.xyz = (((_Object2World * v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
    o.lmapFadePos.w = ((-(glstate_matrix_modelview0 * v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec2 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec4(xl_retval.screen);
    xlv_TEXCOORD5 = vec2(xl_retval.lmap);
    xlv_TEXCOORD6 = vec4(xl_retval.lmapFadePos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec4 lmapFadePos;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 475
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 479
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
#line 499
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 503
uniform lowp vec4 unity_Ambient;
#line 177
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 179
    return (2.0 * color.xyz);
}
#line 371
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 373
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * _SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * _SpecColor.w));
    #line 377
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 422
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 424
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 428
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 432
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 436
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 441
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 445
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 449
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 453
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 457
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 461
    o.Alpha = 0.0;
}
#line 504
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 507
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    surfIN.uv_Splat2 = IN.pack1.zw;
    #line 511
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 515
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 519
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    #line 523
    lowp vec4 lmtex2 = texture( unity_LightmapInd, IN.lmap.xy);
    mediump float lmFade = ((length(IN.lmapFadePos) * unity_LightmapFade.z) + unity_LightmapFade.w);
    mediump vec3 lmFull = DecodeLightmap( lmtex);
    mediump vec3 lmIndirect = DecodeLightmap( lmtex2);
    #line 527
    mediump vec3 lm = mix( lmIndirect, lmFull, vec3( xll_saturate_f(lmFade)));
    light.xyz += lm;
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec2 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.screen = vec4(xlv_TEXCOORD4);
    xlt_IN.lmap = vec2(xlv_TEXCOORD5);
    xlt_IN.lmapFadePos = vec4(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Vector 13 [_WorldSpaceCameraPos]
Vector 14 [_ProjectionParams]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 15 [unity_Scale]
Vector 16 [unity_LightmapST]
Vector 17 [_Control_ST]
Vector 18 [_Splat0_ST]
Vector 19 [_Splat1_ST]
Vector 20 [_Splat2_ST]
Vector 21 [_Splat3_ST]
"3.0-!!ARBvp1.0
# 44 ALU
PARAM c[23] = { { 0.5, 1, 0, 2 },
		state.matrix.mvp,
		program.local[5..21],
		{ -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0.xyz, -vertex.normal.yzxw, c[0].yyzw;
MAD R0.xyz, vertex.normal.zxyw, c[0].zyyw, R0;
MUL R1.xyz, vertex.normal.zxyw, R0.yzxw;
MAD R3.xyz, vertex.normal.yzxw, R0.zxyw, -R1;
MUL R1.xyz, vertex.normal.zxyw, R3.yzxw;
MAD R1.xyz, vertex.normal.yzxw, R3.zxyw, -R1;
DP3 R0.x, R0, R1;
SLT R0.x, R0, c[0].z;
ABS R0.x, R0;
SGE R0.x, c[0].z, R0;
MUL R0.x, R0, c[0].w;
ADD R0.x, R0, c[22];
MUL R0.xyz, R0.x, R1;
MOV R1.xyz, c[13];
MOV R1.w, c[0].y;
DP4 R2.z, R1, c[11];
DP4 R2.x, R1, c[9];
DP4 R2.y, R1, c[10];
MAD R2.xyz, R2, c[15].w, -vertex.position;
DP4 R1.w, vertex.position, c[4];
DP4 R1.z, vertex.position, c[3];
DP4 R1.x, vertex.position, c[1];
DP4 R1.y, vertex.position, c[2];
DP3 result.texcoord[6].y, R2, R0;
MUL R0.xyz, R1.xyww, c[0].x;
MUL R0.y, R0, c[14].x;
ADD result.texcoord[4].xy, R0, R0.z;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
ADD R0.xyz, R0, -c[13];
DP3 R0.x, R0, R0;
RSQ R0.x, R0.x;
DP3 result.texcoord[6].x, R2, R3;
DP3 result.texcoord[6].z, vertex.normal, R2;
MOV result.position, R1;
MOV result.texcoord[4].zw, R1;
RCP result.texcoord[3].x, R0.x;
MAD result.texcoord[0].zw, vertex.texcoord[0].xyxy, c[18].xyxy, c[18];
MAD result.texcoord[0].xy, vertex.texcoord[0], c[17], c[17].zwzw;
MAD result.texcoord[1].zw, vertex.texcoord[0].xyxy, c[20].xyxy, c[20];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[19], c[19].zwzw;
MAD result.texcoord[2].xy, vertex.texcoord[0], c[21], c[21].zwzw;
MAD result.texcoord[5].xy, vertex.texcoord[1], c[16], c[16].zwzw;
END
# 44 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 15 [unity_Scale]
Vector 16 [unity_LightmapST]
Vector 17 [_Control_ST]
Vector 18 [_Splat0_ST]
Vector 19 [_Splat1_ST]
Vector 20 [_Splat2_ST]
Vector 21 [_Splat3_ST]
"vs_3_0
; 43 ALU, 2 FLOW
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c22, 1.00000000, 0.00000000, -1.00000000, 0.50000000
dcl_position0 v0
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mul r0.xyz, -v2.yzxw, c22.xxyw
mad r0.xyz, v2.zxyw, c22.yxxw, r0
mul r1.xyz, v2.zxyw, r0.yzxw
mad r1.xyz, v2.yzxw, r0.zxyw, -r1
mul r2.xyz, r1.yzxw, v2.zxyw
mad r2.xyz, r1.zxyw, v2.yzxw, -r2
dp3 r0.x, r0, r2
if_lt r0.x, c22.y
mov r0.w, c22.z
else
mov r0.w, c22.x
endif
mul r0.xyz, v2.zxyw, r1.yzxw
mad r0.xyz, v2.yzxw, r1.zxyw, -r0
mul r4.xyz, r0, r0.w
mov r2.xyz, c12
mov r2.w, c22.x
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
dp4 r3.z, r2, c10
dp4 r3.x, r2, c8
dp4 r3.y, r2, c9
mad r3.xyz, r3, c15.w, -v0
dp3 o7.x, r3, r1
mul r2.xyz, r0.xyww, c22.w
mul r2.y, r2, c13.x
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, r1, -c12
dp3 r1.x, r1, r1
mov o0, r0
rsq r0.x, r1.x
dp3 o7.y, r3, r4
mad o5.xy, r2.z, c14.zwzw, r2
dp3 o7.z, v2, r3
mov o5.zw, r0
rcp o4.x, r0.x
mad o1.zw, v3.xyxy, c18.xyxy, c18
mad o1.xy, v3, c17, c17.zwzw
mad o2.zw, v3.xyxy, c20.xyxy, c20
mad o2.xy, v3, c19, c19.zwzw
mad o3.xy, v3, c21, c21.zwzw
mad o6.xy, v4, c16, c16.zwzw
"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = tmpvar_1.w;
  highp vec3 tmpvar_6;
  tmpvar_6 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_7;
  tmpvar_7 = ((tmpvar_2.yzx * tmpvar_6.zxy) - (tmpvar_2.zxy * tmpvar_6.yzx));
  tmpvar_5.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = dot (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)), tmpvar_6);
  if ((tmpvar_8 < 0.0)) {
    tmpvar_5.w = -1.0;
  } else {
    tmpvar_5.w = 1.0;
  };
  highp vec3 p_9;
  p_9 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_10;
  tmpvar_10 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_10 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_10.zw;
  highp vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_5.xyz;
  tmpvar_15 = (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)) * tmpvar_5.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_14.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_2.x;
  tmpvar_16[1].x = tmpvar_14.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_2.y;
  tmpvar_16[2].x = tmpvar_14.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_2.z;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_9, p_9));
  xlv_TEXCOORD4 = o_11;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = (tmpvar_16 * (((_World2Object * tmpvar_17).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = tmpvar_4;
  highp vec3 farnormal_7;
  highp vec3 normalsplat3_8;
  highp vec3 normalsplat2_2nd_9;
  highp vec3 normalsplat2_10;
  highp vec3 normalsplat1_11;
  highp vec3 normalsplat0_12;
  mediump vec3 splatcol3_13;
  mediump vec3 splatcol2_2nd_14;
  mediump vec3 splatcol2_15;
  mediump vec3 splatcol1_16;
  mediump vec3 splatcol0_17;
  mediump vec4 splat_control_18;
  mediump vec3 colorMap_19;
  mediump vec3 finalCol_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_19 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_17 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_16 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_15 = tmpvar_25;
  highp vec2 P_26;
  P_26 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat2, P_26).xyz;
  splatcol2_2nd_14 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalsplat0_12 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).xyz * 2.0) - 1.0);
  normalsplat1_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).xyz * 2.0) - 1.0);
  normalsplat2_10 = tmpvar_31;
  highp vec2 P_32;
  P_32 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap2, P_32).xyz * 2.0) - 1.0);
  normalsplat2_2nd_9 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap3, xlv_TEXCOORD2).xyz * 2.0) - 1.0);
  normalsplat3_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  farnormal_7 = tmpvar_35;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (splat_control_18.x * normalsplat0_12);
    tmpvar_6 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_6 + (splat_control_18.y * normalsplat1_11));
    tmpvar_6 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_6 + (splat_control_18.z * ((normalsplat2_10 * 0.5) + (normalsplat2_2nd_9 * 0.5))));
    tmpvar_6 = tmpvar_39;
    highp vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_6 + (splat_control_18.w * normalsplat3_8));
    tmpvar_6 = tmpvar_40;
    highp float tmpvar_41;
    tmpvar_41 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_42;
    tmpvar_42 = mix (normalize((tmpvar_6 + farnormal_7)), farnormal_7, vec3(tmpvar_41));
    tmpvar_6 = tmpvar_42;
    highp vec3 tmpvar_43;
    tmpvar_43 = ((((splat_control_18.x * _ColTex0) + (splat_control_18.y * _ColTex1)) + (splat_control_18.z * _ColTex2)) + (splat_control_18.w * _ColTex3));
    color_correction_36 = tmpvar_43;
    mediump vec3 tmpvar_44;
    tmpvar_44 = (((((splat_control_18.x * splatcol0_17) + (splat_control_18.y * splatcol1_16)) + (splat_control_18.z * ((splatcol2_15 * 0.65) + (splatcol2_2nd_14 * 0.35)))) + (splat_control_18.w * splatcol3_13)) * (colorMap_19 / color_correction_36));
    highp vec3 tmpvar_45;
    tmpvar_45 = mix (tmpvar_44, colorMap_19, vec3(tmpvar_41));
    finalCol_20 = tmpvar_45;
  } else {
    finalCol_20 = colorMap_19;
    tmpvar_6 = farnormal_7;
  };
  tmpvar_5 = finalCol_20;
  tmpvar_4 = tmpvar_6;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_48;
  mediump vec3 viewDir_49;
  viewDir_49 = tmpvar_47;
  highp float nh_50;
  mat3 tmpvar_51;
  tmpvar_51[0].x = 0.816497;
  tmpvar_51[0].y = -0.408248;
  tmpvar_51[0].z = -0.408248;
  tmpvar_51[1].x = 0.0;
  tmpvar_51[1].y = 0.707107;
  tmpvar_51[1].z = -0.707107;
  tmpvar_51[2].x = 0.57735;
  tmpvar_51[2].y = 0.57735;
  tmpvar_51[2].z = 0.57735;
  mediump vec3 normal_52;
  normal_52 = tmpvar_6;
  mediump vec3 scalePerBasisVector_53;
  mediump vec3 lm_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD5).xyz);
  lm_54 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD5).xyz);
  scalePerBasisVector_53 = tmpvar_56;
  lm_54 = (lm_54 * dot (clamp ((tmpvar_51 * normal_52), 0.0, 1.0), scalePerBasisVector_53));
  vec3 v_57;
  v_57.x = tmpvar_51[0].x;
  v_57.y = tmpvar_51[1].x;
  v_57.z = tmpvar_51[2].x;
  vec3 v_58;
  v_58.x = tmpvar_51[0].y;
  v_58.y = tmpvar_51[1].y;
  v_58.z = tmpvar_51[2].y;
  vec3 v_59;
  v_59.x = tmpvar_51[0].z;
  v_59.y = tmpvar_51[1].z;
  v_59.z = tmpvar_51[2].z;
  mediump float tmpvar_60;
  tmpvar_60 = max (0.0, dot (tmpvar_6, normalize((normalize((((scalePerBasisVector_53.x * v_57) + (scalePerBasisVector_53.y * v_58)) + (scalePerBasisVector_53.z * v_59))) + viewDir_49))));
  nh_50 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61.xyz = lm_54;
  tmpvar_61.w = pow (nh_50, 0.0);
  tmpvar_48 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_48);
  light_3 = tmpvar_62;
  lowp vec4 c_63;
  mediump vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_5 * tmpvar_62.xyz);
  c_63.xyz = tmpvar_64;
  c_63.w = 0.0;
  c_2 = c_63;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec4 _Splat3_ST;
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat1_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Control_ST;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = tmpvar_1.w;
  highp vec3 tmpvar_6;
  tmpvar_6 = ((vec3(0.0, 1.0, 1.0) * tmpvar_2.zxy) - (vec3(1.0, 1.0, 0.0) * tmpvar_2.yzx));
  highp vec3 tmpvar_7;
  tmpvar_7 = ((tmpvar_2.yzx * tmpvar_6.zxy) - (tmpvar_2.zxy * tmpvar_6.yzx));
  tmpvar_5.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = dot (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)), tmpvar_6);
  if ((tmpvar_8 < 0.0)) {
    tmpvar_5.w = -1.0;
  } else {
    tmpvar_5.w = 1.0;
  };
  highp vec3 p_9;
  p_9 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec4 tmpvar_10;
  tmpvar_10 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _Control_ST.xy) + _Control_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord0.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_10 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_10.zw;
  highp vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_5.xyz;
  tmpvar_15 = (((tmpvar_2.yzx * tmpvar_7.zxy) - (tmpvar_2.zxy * tmpvar_7.yzx)) * tmpvar_5.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_14.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_2.x;
  tmpvar_16[1].x = tmpvar_14.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_2.y;
  tmpvar_16[2].x = tmpvar_14.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_2.z;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = _WorldSpaceCameraPos;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
  xlv_TEXCOORD3 = sqrt(dot (p_9, p_9));
  xlv_TEXCOORD4 = o_11;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD6 = (tmpvar_16 * (((_World2Object * tmpvar_17).xyz * unity_Scale.w) - _glesVertex.xyz));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp float xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_Lightmap;
uniform sampler2D _LightBuffer;
uniform highp float _SplattingDistance;
uniform highp vec3 _ColTex3;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex0;
uniform sampler2D _Splat3;
uniform sampler2D _Splat2;
uniform sampler2D _Splat1;
uniform sampler2D _Splat0;
uniform sampler2D _BumpMap3;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap0;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _CustomColorMap;
uniform sampler2D _Control;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = tmpvar_4;
  highp vec3 farnormal_7;
  highp vec3 normalsplat3_8;
  highp vec3 normalsplat2_2nd_9;
  highp vec3 normalsplat2_10;
  highp vec3 normalsplat1_11;
  highp vec3 normalsplat0_12;
  mediump vec3 splatcol3_13;
  mediump vec3 splatcol2_2nd_14;
  mediump vec3 splatcol2_15;
  mediump vec3 splatcol1_16;
  mediump vec3 splatcol0_17;
  mediump vec4 splat_control_18;
  mediump vec3 colorMap_19;
  mediump vec3 finalCol_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_CustomColorMap, xlv_TEXCOORD0.xy).xyz;
  colorMap_19 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_Control, xlv_TEXCOORD0.xy);
  splat_control_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_Splat0, xlv_TEXCOORD0.zw).xyz;
  splatcol0_17 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_Splat1, xlv_TEXCOORD1.xy).xyz;
  splatcol1_16 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Splat2, xlv_TEXCOORD1.zw).xyz;
  splatcol2_15 = tmpvar_25;
  highp vec2 P_26;
  P_26 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Splat2, P_26).xyz;
  splatcol2_2nd_14 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_Splat3, xlv_TEXCOORD2).xyz;
  splatcol3_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2D (_BumpMap0, xlv_TEXCOORD0.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  normalsplat0_12 = normal_29;
  lowp vec3 normal_30;
  normal_30.xy = ((texture2D (_BumpMap1, xlv_TEXCOORD1.xy).wy * 2.0) - 1.0);
  normal_30.z = sqrt((1.0 - clamp (dot (normal_30.xy, normal_30.xy), 0.0, 1.0)));
  normalsplat1_11 = normal_30;
  lowp vec3 normal_31;
  normal_31.xy = ((texture2D (_BumpMap2, xlv_TEXCOORD1.zw).wy * 2.0) - 1.0);
  normal_31.z = sqrt((1.0 - clamp (dot (normal_31.xy, normal_31.xy), 0.0, 1.0)));
  normalsplat2_10 = normal_31;
  highp vec2 P_32;
  P_32 = (xlv_TEXCOORD1.zw * -0.5);
  lowp vec3 normal_33;
  normal_33.xy = ((texture2D (_BumpMap2, P_32).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  normalsplat2_2nd_9 = normal_33;
  lowp vec3 normal_34;
  normal_34.xy = ((texture2D (_BumpMap3, xlv_TEXCOORD2).wy * 2.0) - 1.0);
  normal_34.z = sqrt((1.0 - clamp (dot (normal_34.xy, normal_34.xy), 0.0, 1.0)));
  normalsplat3_8 = normal_34;
  lowp vec3 normal_35;
  normal_35.xy = ((texture2D (_TerrainNormalMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_35.z = sqrt((1.0 - clamp (dot (normal_35.xy, normal_35.xy), 0.0, 1.0)));
  farnormal_7 = normal_35;
  if ((xlv_TEXCOORD3 < _SplattingDistance)) {
    mediump vec3 color_correction_36;
    highp vec3 tmpvar_37;
    tmpvar_37 = (splat_control_18.x * normalsplat0_12);
    tmpvar_6 = tmpvar_37;
    highp vec3 tmpvar_38;
    tmpvar_38 = (tmpvar_6 + (splat_control_18.y * normalsplat1_11));
    tmpvar_6 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_6 + (splat_control_18.z * ((normalsplat2_10 * 0.5) + (normalsplat2_2nd_9 * 0.5))));
    tmpvar_6 = tmpvar_39;
    highp vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_6 + (splat_control_18.w * normalsplat3_8));
    tmpvar_6 = tmpvar_40;
    highp float tmpvar_41;
    tmpvar_41 = pow ((xlv_TEXCOORD3 / _SplattingDistance), 4.0);
    highp vec3 tmpvar_42;
    tmpvar_42 = mix (normalize((tmpvar_6 + farnormal_7)), farnormal_7, vec3(tmpvar_41));
    tmpvar_6 = tmpvar_42;
    highp vec3 tmpvar_43;
    tmpvar_43 = ((((splat_control_18.x * _ColTex0) + (splat_control_18.y * _ColTex1)) + (splat_control_18.z * _ColTex2)) + (splat_control_18.w * _ColTex3));
    color_correction_36 = tmpvar_43;
    mediump vec3 tmpvar_44;
    tmpvar_44 = (((((splat_control_18.x * splatcol0_17) + (splat_control_18.y * splatcol1_16)) + (splat_control_18.z * ((splatcol2_15 * 0.65) + (splatcol2_2nd_14 * 0.35)))) + (splat_control_18.w * splatcol3_13)) * (colorMap_19 / color_correction_36));
    highp vec3 tmpvar_45;
    tmpvar_45 = mix (tmpvar_44, colorMap_19, vec3(tmpvar_41));
    finalCol_20 = tmpvar_45;
  } else {
    finalCol_20 = colorMap_19;
    tmpvar_6 = farnormal_7;
  };
  tmpvar_5 = finalCol_20;
  tmpvar_4 = tmpvar_6;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (unity_Lightmap, xlv_TEXCOORD5);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (unity_LightmapInd, xlv_TEXCOORD5);
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_50;
  mediump vec3 viewDir_51;
  viewDir_51 = tmpvar_49;
  highp float nh_52;
  mat3 tmpvar_53;
  tmpvar_53[0].x = 0.816497;
  tmpvar_53[0].y = -0.408248;
  tmpvar_53[0].z = -0.408248;
  tmpvar_53[1].x = 0.0;
  tmpvar_53[1].y = 0.707107;
  tmpvar_53[1].z = -0.707107;
  tmpvar_53[2].x = 0.57735;
  tmpvar_53[2].y = 0.57735;
  tmpvar_53[2].z = 0.57735;
  mediump vec3 normal_54;
  normal_54 = tmpvar_6;
  mediump vec3 scalePerBasisVector_55;
  mediump vec3 lm_56;
  lowp vec3 tmpvar_57;
  tmpvar_57 = ((8.0 * tmpvar_47.w) * tmpvar_47.xyz);
  lm_56 = tmpvar_57;
  lowp vec3 tmpvar_58;
  tmpvar_58 = ((8.0 * tmpvar_48.w) * tmpvar_48.xyz);
  scalePerBasisVector_55 = tmpvar_58;
  lm_56 = (lm_56 * dot (clamp ((tmpvar_53 * normal_54), 0.0, 1.0), scalePerBasisVector_55));
  vec3 v_59;
  v_59.x = tmpvar_53[0].x;
  v_59.y = tmpvar_53[1].x;
  v_59.z = tmpvar_53[2].x;
  vec3 v_60;
  v_60.x = tmpvar_53[0].y;
  v_60.y = tmpvar_53[1].y;
  v_60.z = tmpvar_53[2].y;
  vec3 v_61;
  v_61.x = tmpvar_53[0].z;
  v_61.y = tmpvar_53[1].z;
  v_61.z = tmpvar_53[2].z;
  mediump float tmpvar_62;
  tmpvar_62 = max (0.0, dot (tmpvar_6, normalize((normalize((((scalePerBasisVector_55.x * v_59) + (scalePerBasisVector_55.y * v_60)) + (scalePerBasisVector_55.z * v_61))) + viewDir_51))));
  nh_52 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63.xyz = lm_56;
  tmpvar_63.w = pow (nh_52, 0.0);
  tmpvar_50 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_50);
  light_3 = tmpvar_64;
  lowp vec4 c_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_5 * tmpvar_64.xyz);
  c_65.xyz = tmpvar_66;
  c_65.w = 0.0;
  c_2 = c_65;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 475
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 479
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
#line 500
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 504
uniform lowp vec4 unity_Ambient;
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 402
void vert( inout appdata_full v, out Input o ) {
    highp vec3 T1 = vec3( 1.0, 0.0, 1.0);
    highp vec3 Bi = cross( T1, v.normal);
    #line 406
    highp vec3 newTangent = cross( v.normal, Bi);
    normalize(newTangent);
    v.tangent.xyz = newTangent.xyz;
    if ((dot( cross( v.normal, newTangent), Bi) < 0.0)){
        v.tangent.w = -1.0;
    }
    else{
        v.tangent.w = 1.0;
    }
    #line 411
    highp float distanceVar = distance( _WorldSpaceCameraPos, vec3( (_Object2World * v.vertex)));
    o.distance = distanceVar;
}
#line 481
v2f_surf vert_surf( in appdata_full v ) {
    #line 483
    v2f_surf o;
    Input customInputData;
    vert( v, customInputData);
    o.cust_distance = customInputData.distance;
    #line 487
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _Control_ST.xy) + _Control_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _Splat0_ST.xy) + _Splat0_ST.zw);
    o.pack1.xy = ((v.texcoord.xy * _Splat1_ST.xy) + _Splat1_ST.zw);
    #line 491
    o.pack1.zw = ((v.texcoord.xy * _Splat2_ST.xy) + _Splat2_ST.zw);
    o.pack2.xy = ((v.texcoord.xy * _Splat3_ST.xy) + _Splat3_ST.zw);
    o.screen = ComputeScreenPos( o.pos);
    o.lmap.xy = ((v.texcoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    #line 495
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.viewDir = (rotation * ObjSpaceViewDir( v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp float xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec2 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.pack0);
    xlv_TEXCOORD1 = vec4(xl_retval.pack1);
    xlv_TEXCOORD2 = vec2(xl_retval.pack2);
    xlv_TEXCOORD3 = float(xl_retval.cust_distance);
    xlv_TEXCOORD4 = vec4(xl_retval.screen);
    xlv_TEXCOORD5 = vec2(xl_retval.lmap);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 391
struct Input {
    highp vec3 worldPos;
    highp vec2 uv_Control;
    highp vec2 uv_Splat0;
    highp vec2 uv_Splat1;
    highp vec2 uv_Splat2;
    highp vec2 uv_Splat3;
    highp float distance;
};
#line 463
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec4 pack1;
    highp vec2 pack2;
    highp float cust_distance;
    highp vec4 screen;
    highp vec2 lmap;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
#line 402
uniform sampler2D _Control;
#line 415
uniform sampler2D _CustomColorMap;
uniform sampler2D _TerrainNormalMap;
uniform sampler2D _BumpMap0;
uniform sampler2D _BumpMap1;
uniform sampler2D _BumpMap2;
uniform sampler2D _BumpMap3;
uniform sampler2D _Splat0;
uniform sampler2D _Splat1;
uniform sampler2D _Splat2;
uniform sampler2D _Splat3;
uniform highp float _Spec0;
uniform highp float _Spec1;
uniform highp float _Spec2;
uniform highp float _Spec3;
#line 419
uniform highp vec3 _ColTex0;
uniform highp vec3 _ColTex1;
uniform highp vec3 _ColTex2;
uniform highp vec3 _ColTex3;
uniform highp vec4 _v4CameraPos;
uniform highp float _SplattingDistance;
#line 475
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _Control_ST;
uniform highp vec4 _Splat0_ST;
uniform highp vec4 _Splat1_ST;
#line 479
uniform highp vec4 _Splat2_ST;
uniform highp vec4 _Splat3_ST;
#line 500
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
#line 504
uniform lowp vec4 unity_Ambient;
#line 177
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 179
    return (2.0 * color.xyz);
}
#line 325
mediump vec3 DirLightmapDiffuse( in mediump mat3 dirBasis, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 normal, in bool surfFuncWritesNormal, out mediump vec3 scalePerBasisVector ) {
    mediump vec3 lm = DecodeLightmap( color);
    scalePerBasisVector = DecodeLightmap( scale);
    #line 329
    if (surfFuncWritesNormal){
        mediump vec3 normalInRnmBasis = xll_saturate_vf3((dirBasis * normal));
        lm *= dot( normalInRnmBasis, scalePerBasisVector);
    }
    #line 334
    return lm;
}
#line 379
mediump vec4 LightingBlinnPhong_DirLightmap( in SurfaceOutput s, in lowp vec4 color, in lowp vec4 scale, in mediump vec3 viewDir, in bool surfFuncWritesNormal, out mediump vec3 specColor ) {
    #line 381
    highp mat3 unity_DirBasis = xll_transpose_mf3x3(mat3( vec3( 0.816497, 0.0, 0.57735), vec3( -0.408248, 0.707107, 0.57735), vec3( -0.408248, -0.707107, 0.57735)));
    mediump vec3 scalePerBasisVector;
    mediump vec3 lm = DirLightmapDiffuse( unity_DirBasis, color, scale, s.Normal, surfFuncWritesNormal, scalePerBasisVector);
    mediump vec3 lightDir = normalize((((scalePerBasisVector.x * xll_matrixindex_mf3x3_i (unity_DirBasis, 0)) + (scalePerBasisVector.y * xll_matrixindex_mf3x3_i (unity_DirBasis, 1))) + (scalePerBasisVector.z * xll_matrixindex_mf3x3_i (unity_DirBasis, 2))));
    #line 385
    mediump vec3 h = normalize((lightDir + viewDir));
    highp float nh = max( 0.0, dot( s.Normal, h));
    highp float spec = pow( nh, (s.Specular * 128.0));
    specColor = (((lm * _SpecColor.xyz) * s.Gloss) * spec);
    #line 389
    return vec4( lm, spec);
}
#line 371
lowp vec4 LightingBlinnPhong_PrePass( in SurfaceOutput s, in mediump vec4 light ) {
    #line 373
    lowp float spec = (light.w * s.Gloss);
    lowp vec4 c;
    c.xyz = ((s.Albedo * light.xyz) + ((light.xyz * _SpecColor.xyz) * spec));
    c.w = (s.Alpha + (spec * _SpecColor.w));
    #line 377
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 422
void surf( in Input IN, inout SurfaceOutput o ) {
    #line 424
    mediump vec3 col;
    mediump vec3 finalCol;
    mediump vec3 colorMap = vec3( texture( _CustomColorMap, IN.uv_Control));
    mediump vec4 splat_control = texture( _Control, IN.uv_Control);
    #line 428
    mediump vec3 splatcol0 = texture( _Splat0, IN.uv_Splat0).xyz;
    mediump vec3 splatcol1 = texture( _Splat1, IN.uv_Splat1).xyz;
    mediump vec3 splatcol2 = texture( _Splat2, IN.uv_Splat2).xyz;
    mediump vec3 splatcol2_2nd = texture( _Splat2, (IN.uv_Splat2 * -0.5)).xyz;
    #line 432
    mediump vec3 splatcol3 = texture( _Splat3, IN.uv_Splat3).xyz;
    highp vec3 normalsplat0 = UnpackNormal( texture( _BumpMap0, IN.uv_Splat0));
    highp vec3 normalsplat1 = UnpackNormal( texture( _BumpMap1, IN.uv_Splat1));
    highp vec3 normalsplat2 = UnpackNormal( texture( _BumpMap2, IN.uv_Splat2));
    #line 436
    highp vec3 normalsplat2_2nd = UnpackNormal( texture( _BumpMap2, (IN.uv_Splat2 * -0.5)));
    highp vec3 normalsplat3 = UnpackNormal( texture( _BumpMap3, IN.uv_Splat3));
    highp vec3 farnormal = UnpackNormal( texture( _TerrainNormalMap, IN.uv_Control));
    if ((IN.distance < _SplattingDistance)){
        #line 441
        col = (splat_control.x * splatcol0);
        o.Normal = (splat_control.x * normalsplat0);
        col += (splat_control.y * splatcol1);
        o.Normal += (splat_control.y * normalsplat1);
        #line 445
        col += (splat_control.z * ((splatcol2 * 0.65) + (splatcol2_2nd * 0.35)));
        o.Normal += (splat_control.z * ((normalsplat2 * 0.5) + (normalsplat2_2nd * 0.5)));
        col += (splat_control.w * splatcol3);
        o.Normal += (splat_control.w * normalsplat3);
        #line 449
        highp float fadeout = pow( (IN.distance / _SplattingDistance), 4.0);
        o.Normal = mix( normalize((o.Normal + farnormal)), farnormal, vec3( fadeout));
        mediump vec3 color_correction = ((((splat_control.x * _ColTex0) + (splat_control.y * _ColTex1)) + (splat_control.z * _ColTex2)) + (splat_control.w * _ColTex3));
        finalCol = (col * (colorMap / color_correction));
        #line 453
        finalCol = mix( finalCol, colorMap, vec3( fadeout));
    }
    else{
        #line 457
        finalCol = colorMap;
        o.Normal = farnormal;
    }
    o.Albedo = finalCol;
    #line 461
    o.Alpha = 0.0;
}
#line 505
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 508
    surfIN.uv_Control = IN.pack0.xy;
    surfIN.uv_Splat0 = IN.pack0.zw;
    surfIN.uv_Splat1 = IN.pack1.xy;
    surfIN.uv_Splat2 = IN.pack1.zw;
    #line 512
    surfIN.uv_Splat3 = IN.pack2.xy;
    surfIN.distance = IN.cust_distance;
    SurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 516
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    o.Gloss = 0.0;
    #line 520
    surf( surfIN, o);
    mediump vec4 light = textureProj( _LightBuffer, IN.screen);
    light = max( light, vec4( 0.001));
    mediump vec3 specColor;
    #line 524
    lowp vec4 lmtex = texture( unity_Lightmap, IN.lmap.xy);
    lowp vec4 lmIndTex = texture( unity_LightmapInd, IN.lmap.xy);
    mediump vec4 lm = LightingBlinnPhong_DirLightmap( o, lmtex, lmIndTex, normalize(IN.viewDir), true, specColor);
    light += lm;
    #line 528
    mediump vec4 c = LightingBlinnPhong_PrePass( o, light);
    return c;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp float xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec2 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4(xlv_TEXCOORD0);
    xlt_IN.pack1 = vec4(xlv_TEXCOORD1);
    xlt_IN.pack2 = vec2(xlv_TEXCOORD2);
    xlt_IN.cust_distance = float(xlv_TEXCOORD3);
    xlt_IN.screen = vec4(xlv_TEXCOORD4);
    xlt_IN.lmap = vec2(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 6
//   opengl - ALU: 36 to 108, TEX: 8 to 16
//   d3d9 - ALU: 29 to 94, TEX: 8 to 16, FLOW: 2 to 2
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 11 [_LightBuffer] 2D
"3.0-!!ARBfp1.0
# 39 ALU, 8 TEX
PARAM c[7] = { program.local[0..4],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEX R0, fragment.texcoord[0], texture[1], 2D;
MUL R1.xyz, R0.y, c[1];
MAD R1.xyz, R0.x, c[0], R1;
MAD R1.xyz, R0.z, c[2], R1;
MAD R3.xyz, R0.w, c[3], R1;
TEX R1.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R4.xyz, R0.y, R1;
MUL R2.xy, fragment.texcoord[1].zwzw, c[6].x;
TEX R1.xyz, R2, texture[4], 2D;
TEX R2.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R2.xyz, R0.x, R2, R4;
MUL R4.xyz, R1, c[6].y;
TEX R1.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R1.xyz, R1, c[5].w, R4;
MAD R0.xyz, R0.z, R1, R2;
RCP R2.x, R3.x;
RCP R2.y, R3.y;
RCP R2.z, R3.z;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R3.xyz, R1, R2;
TEX R2.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R0.xyz, R0.w, R2, R0;
MAD R2.xyz, -R0, R3, R1;
MUL R3.xyz, R0, R3;
TXP R0.xyz, fragment.texcoord[4], texture[11], 2D;
RCP R0.w, c[4].x;
MUL R0.w, fragment.texcoord[3].x, R0;
POW R0.w, R0.w, c[5].z;
MAD R2.xyz, R0.w, R2, R3;
SLT R0.w, fragment.texcoord[3].x, c[4].x;
ABS R0.w, R0;
CMP R0.w, -R0, c[5].x, c[5].y;
LG2 R0.x, R0.x;
LG2 R0.y, R0.y;
LG2 R0.z, R0.z;
ADD R0.xyz, -R0, fragment.texcoord[5];
CMP R1.xyz, -R0.w, R1, R2;
MUL result.color.xyz, R1, R0;
MOV result.color.w, c[5].x;
END
# 39 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 11 [_LightBuffer] 2D
"ps_3_0
; 32 ALU, 8 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s11
def c5, -0.50000000, 4.00000000, 0.35009766, 0.64990234
def c6, 0.00000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
texld r3.xyz, v1, s3
texld r0.xyz, v0, s0
mov_pp r6.xyz, r3
mul r4.xy, v1.zwzw, c5.x
texld r1, v0, s1
texld r2.xyz, v0.zwzw, s2
texld r3.xyz, v1.zwzw, s4
texld r4.xyz, r4, s4
texld r5.xyz, v2, s5
if_lt v3.x, c4.x
mul_pp r6.xyz, r1.y, r6
mul_pp r4.xyz, r4, c5.z
rcp r0.w, c4.x
mad_pp r2.xyz, r1.x, r2, r6
mul r7.xyz, r1.y, c1
mad r6.xyz, r1.x, c0, r7
mad r6.xyz, r1.z, c2, r6
mad_pp r3.xyz, r3, c5.w, r4
mad_pp r1.xyz, r1.z, r3, r2
mad r2.xyz, r1.w, c3, r6
mad_pp r1.xyz, r1.w, r5, r1
rcp_pp r2.x, r2.x
rcp_pp r2.y, r2.y
rcp_pp r2.z, r2.z
mul_pp r3.xyz, r0, r2
mul r0.w, v3.x, r0
pow r2, r0.w, c5.y
mad_pp r0.xyz, -r1, r3, r0
mul_pp r1.xyz, r1, r3
mov r0.w, r2.x
mad_pp r1.xyz, r0.w, r0, r1
else
mov_pp r1.xyz, r0
endif
texldp r0.xyz, v4, s11
log_pp r0.x, r0.x
log_pp r0.z, r0.z
log_pp r0.y, r0.y
add_pp r0.xyz, -r0, v5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c6.x
"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
Vector 5 [unity_LightmapFade]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 11 [_LightBuffer] 2D
SetTexture 12 [unity_Lightmap] 2D
SetTexture 13 [unity_LightmapInd] 2D
"3.0-!!ARBfp1.0
# 50 ALU, 10 TEX
PARAM c[8] = { program.local[0..5],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766, 8 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEX R0, fragment.texcoord[0], texture[1], 2D;
TEX R1.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R2.xyz, R0.y, R1;
MUL R3.xyz, R0.y, c[1];
MAD R3.xyz, R0.x, c[0], R3;
TEX R1.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R1.xyz, R0.x, R1, R2;
MUL R2.xy, fragment.texcoord[1].zwzw, c[7].x;
MAD R4.xyz, R0.z, c[2], R3;
TEX R2.xyz, R2, texture[4], 2D;
MUL R3.xyz, R2, c[7].y;
TEX R2.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R2.xyz, R2, c[6].w, R3;
MAD R0.xyz, R0.z, R2, R1;
MAD R1.xyz, R0.w, c[3], R4;
TEX R2.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R0.xyz, R0.w, R2, R0;
RCP R0.w, c[4].x;
MUL R0.w, fragment.texcoord[3].x, R0;
TEX R2.xyz, fragment.texcoord[0], texture[0], 2D;
POW R0.w, R0.w, c[6].z;
RCP R1.x, R1.x;
RCP R1.y, R1.y;
RCP R1.z, R1.z;
MUL R1.xyz, R2, R1;
MAD R3.xyz, -R0, R1, R2;
MUL R0.xyz, R0, R1;
MAD R3.xyz, R0.w, R3, R0;
TEX R0, fragment.texcoord[5], texture[12], 2D;
MUL R0.xyz, R0.w, R0;
TEX R1, fragment.texcoord[5], texture[13], 2D;
MUL R1.xyz, R1.w, R1;
MUL R1.xyz, R1, c[7].z;
MAD R4.xyz, R0, c[7].z, -R1;
TXP R0.xyz, fragment.texcoord[4], texture[11], 2D;
DP4 R0.w, fragment.texcoord[6], fragment.texcoord[6];
RSQ R0.w, R0.w;
RCP R0.w, R0.w;
MAD_SAT R0.w, R0, c[5].z, c[5];
MAD R1.xyz, R0.w, R4, R1;
SLT R0.w, fragment.texcoord[3].x, c[4].x;
ABS R0.w, R0;
LG2 R0.x, R0.x;
LG2 R0.y, R0.y;
LG2 R0.z, R0.z;
ADD R0.xyz, -R0, R1;
CMP R0.w, -R0, c[6].x, c[6].y;
CMP R1.xyz, -R0.w, R2, R3;
MUL result.color.xyz, R1, R0;
MOV result.color.w, c[6].x;
END
# 50 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
Vector 5 [unity_LightmapFade]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 11 [_LightBuffer] 2D
SetTexture 12 [unity_Lightmap] 2D
SetTexture 13 [unity_LightmapInd] 2D
"ps_3_0
; 41 ALU, 10 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s11
dcl_2d s12
dcl_2d s13
def c6, -0.50000000, 4.00000000, 0.35009766, 0.64990234
def c7, 8.00000000, 0.00000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4
dcl_texcoord5 v5.xy
dcl_texcoord6 v6
texld r3.xyz, v1, s3
texld r0.xyz, v0, s0
mov_pp r6.xyz, r3
mul r4.xy, v1.zwzw, c6.x
texld r1, v0, s1
texld r2.xyz, v0.zwzw, s2
texld r3.xyz, v1.zwzw, s4
texld r4.xyz, r4, s4
texld r5.xyz, v2, s5
if_lt v3.x, c4.x
mul_pp r6.xyz, r1.y, r6
mul_pp r4.xyz, r4, c6.z
rcp r0.w, c4.x
mad_pp r2.xyz, r1.x, r2, r6
mul r7.xyz, r1.y, c1
mad r6.xyz, r1.x, c0, r7
mad r6.xyz, r1.z, c2, r6
mad_pp r3.xyz, r3, c6.w, r4
mad_pp r1.xyz, r1.z, r3, r2
mad r2.xyz, r1.w, c3, r6
mad_pp r1.xyz, r1.w, r5, r1
rcp_pp r2.x, r2.x
rcp_pp r2.y, r2.y
rcp_pp r2.z, r2.z
mul_pp r3.xyz, r0, r2
mul r0.w, v3.x, r0
pow r2, r0.w, c6.y
mad_pp r0.xyz, -r1, r3, r0
mul_pp r1.xyz, r1, r3
mov r0.w, r2.x
mad_pp r2.xyz, r0.w, r0, r1
else
mov_pp r2.xyz, r0
endif
texld r0, v5, s13
mul_pp r0.xyz, r0.w, r0
texld r1, v5, s12
dp4 r0.w, v6, v6
rsq r0.w, r0.w
rcp r0.w, r0.w
mul_pp r1.xyz, r1.w, r1
mul_pp r0.xyz, r0, c7.x
mad_pp r3.xyz, r1, c7.x, -r0
texldp r1.xyz, v4, s11
mad_sat r0.w, r0, c5.z, c5
mad_pp r0.xyz, r0.w, r3, r0
log_pp r1.x, r1.x
log_pp r1.y, r1.y
log_pp r1.z, r1.z
add_pp r0.xyz, -r1, r0
mul_pp oC0.xyz, r2, r0
mov_pp oC0.w, c7.y
"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_LightBuffer] 2D
SetTexture 12 [unity_Lightmap] 2D
SetTexture 13 [unity_LightmapInd] 2D
"3.0-!!ARBfp1.0
# 108 ALU, 16 TEX
PARAM c[10] = { program.local[0..4],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766, 2, 0.5 },
		{ -0.40824828, -0.70710677, 0.57735026, 8 },
		{ -0.40824831, 0.70710677, 0.57735026 },
		{ 0.81649655, 0, 0.57735026 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R2.xy, fragment.texcoord[1].zwzw, c[6].x;
MOV R1.w, c[5].y;
TEX R3.yw, R2, texture[8], 2D;
MAD R1.xy, R3.wyzw, c[6].z, -R1.w;
MUL R2.zw, R1.xyxy, R1.xyxy;
TEX R0.yw, fragment.texcoord[1].zwzw, texture[8], 2D;
MAD R0.xy, R0.wyzw, c[6].z, -R1.w;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD_SAT R1.z, R2, R2.w;
ADD R0.w, -R1.z, c[5].y;
RSQ R0.w, R0.w;
TEX R3.yw, fragment.texcoord[0].zwzw, texture[6], 2D;
MAD R3.xy, R3.wyzw, c[6].z, -R1.w;
ADD R0.z, -R0, c[5].y;
RSQ R0.z, R0.z;
MUL R2.zw, R3.xyxy, R3.xyxy;
RCP R1.z, R0.w;
RCP R0.z, R0.z;
ADD R4.xyz, R0, R1;
ADD_SAT R1.z, R2, R2.w;
TEX R5.yw, fragment.texcoord[1], texture[7], 2D;
MAD R1.xy, R5.wyzw, c[6].z, -R1.w;
MUL R3.zw, R1.xyxy, R1.xyxy;
ADD_SAT R3.z, R3, R3.w;
ADD R2.z, -R3, c[5].y;
TEX R0, fragment.texcoord[0], texture[1], 2D;
RSQ R2.w, R2.z;
ADD R1.z, -R1, c[5].y;
RSQ R2.z, R1.z;
RCP R1.z, R2.w;
RCP R3.z, R2.z;
MUL R3.xyz, R0.x, R3;
MUL R1.xyz, R0.y, R1;
ADD R1.xyz, R3, R1;
MUL R3.xyz, R0.z, R4;
MUL R4.xyz, R3, c[6].w;
TEX R5.yw, fragment.texcoord[2], texture[9], 2D;
MAD R3.xy, R5.wyzw, c[6].z, -R1.w;
ADD R4.xyz, R1, R4;
MUL R1.xy, R3, R3;
ADD_SAT R1.z, R1.x, R1.y;
TEX R5.yw, fragment.texcoord[0], texture[10], 2D;
ADD R2.z, -R1, c[5].y;
MAD R1.xy, R5.wyzw, c[6].z, -R1.w;
MUL R1.zw, R1.xyxy, R1.xyxy;
ADD_SAT R1.z, R1, R1.w;
RSQ R2.z, R2.z;
RCP R3.z, R2.z;
ADD R1.z, -R1, c[5].y;
MUL R3.xyz, R0.w, R3;
RSQ R1.z, R1.z;
RCP R2.z, c[4].x;
MUL R2.z, fragment.texcoord[3].x, R2;
RCP R1.z, R1.z;
ADD R3.xyz, R4, R3;
ADD R4.xyz, R1, R3;
DP3 R1.w, R4, R4;
RSQ R1.w, R1.w;
MAD R3.xyz, -R1.w, R4, R1;
MUL R4.xyz, R1.w, R4;
POW R3.w, R2.z, c[5].z;
SLT R1.w, fragment.texcoord[3].x, c[4].x;
ABS R1.w, R1;
MAD R3.xyz, R3.w, R3, R4;
CMP R2.w, -R1, c[5].x, c[5].y;
CMP R4.xyz, -R2.w, R1, R3;
TEX R1, fragment.texcoord[5], texture[13], 2D;
DP3_SAT R3.z, R4, c[7];
DP3_SAT R3.y, R4, c[8];
DP3_SAT R3.x, R4, c[9];
MUL R1.xyz, R1.w, R1;
MUL R1.xyz, R1, R3;
DP3 R2.z, R1, c[7].w;
MUL R3.xyz, R0.y, c[1];
MAD R3.xyz, R0.x, c[0], R3;
MAD R3.xyz, R0.z, c[2], R3;
TEX R1, fragment.texcoord[5], texture[12], 2D;
MUL R1.xyz, R1.w, R1;
MUL R4.xyz, R1, R2.z;
TEX R1.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R5.xyz, R0.y, R1;
TEX R1.xyz, R2, texture[4], 2D;
TEX R2.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R2.xyz, R0.x, R2, R5;
MUL R5.xyz, R1, c[6].y;
TEX R1.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R1.xyz, R1, c[5].w, R5;
MAD R0.xyz, R0.z, R1, R2;
MAD R3.xyz, R0.w, c[3], R3;
RCP R2.x, R3.x;
RCP R2.y, R3.y;
RCP R2.z, R3.z;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R3.xyz, R1, R2;
TEX R2.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R0.xyz, R0.w, R2, R0;
MAD R2.xyz, -R0, R3, R1;
MUL R3.xyz, R0, R3;
TXP R0.xyz, fragment.texcoord[4], texture[11], 2D;
MAD R2.xyz, R3.w, R2, R3;
LG2 R0.x, R0.x;
LG2 R0.z, R0.z;
LG2 R0.y, R0.y;
MAD R0.xyz, R4, c[7].w, -R0;
CMP R1.xyz, -R2.w, R1, R2;
MUL result.color.xyz, R1, R0;
MOV result.color.w, c[5].x;
END
# 108 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_LightBuffer] 2D
SetTexture 12 [unity_Lightmap] 2D
SetTexture 13 [unity_LightmapInd] 2D
"ps_3_0
; 94 ALU, 16 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
dcl_2d s10
dcl_2d s11
dcl_2d s12
dcl_2d s13
def c5, -0.50000000, 2.00000000, -1.00000000, 1.00000000
def c6, 4.00000000, 0.50000000, 0.35009766, 0.64990234
def c7, -0.40824828, -0.70710677, 0.57735026, 8.00000000
def c8, -0.40824831, 0.70710677, 0.57735026, 0.00000000
def c9, 0.81649655, 0.00000000, 0.57735026, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4
dcl_texcoord5 v5.xy
mul r9.xy, v1.zwzw, c5.x
texld r1, v0, s1
mov_pp r2, r1
texld r1.xyz, v1, s3
texld r10.yw, r9, s8
texld r11.yw, v2, s9
texld r0.xyz, v0, s0
mov_pp r12.xyz, r1
texld r1.xyz, v1.zwzw, s4
mov_pp r4.xyz, r1
texld r1.xyz, v2, s5
mov_pp r6.xyz, r1
texld r1.yw, v1, s7
mad_pp r8.xy, r1.wyzw, c5.y, c5.z
texld r7.yw, v0.zwzw, s6
mad_pp r7.xy, r7.wyzw, c5.y, c5.z
mul_pp r1.xy, r7, r7
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r8.xyxy, r8.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c5
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c5.w
rsq_pp r1.x, r1.x
texld r1.yw, v1.zwzw, s8
texld r5.xyz, r9, s4
mad_pp r9.xy, r1.wyzw, c5.y, c5.z
rcp_pp r8.z, r1.x
mad_pp r10.xy, r10.wyzw, c5.y, c5.z
mul_pp r1.xy, r9, r9
rcp_pp r7.z, r0.w
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r10.xyxy, r10.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c5
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c5.w
rsq_pp r1.x, r1.x
texld r1.yw, v0, s10
rcp_pp r10.z, r1.x
mad_pp r11.xy, r11.wyzw, c5.y, c5.z
mad_pp r1.xy, r1.wyzw, c5.y, c5.z
mul_pp r1.zw, r11.xyxy, r11.xyxy
rcp_pp r9.z, r0.w
add_pp_sat r0.w, r1.z, r1
mul_pp r11.zw, r1.xyxy, r1.xyxy
add_pp_sat r1.z, r11, r11.w
add_pp r0.w, -r0, c5
add_pp r1.z, -r1, c5.w
rsq_pp r0.w, r0.w
rsq_pp r1.z, r1.z
texld r3.xyz, v0.zwzw, s2
rcp_pp r11.z, r0.w
rcp_pp r1.z, r1.z
if_lt v3.x, c4.x
mul_pp r12.xyz, r2.y, r12
mul_pp r5.xyz, r5, c6.z
mad_pp r4.xyz, r4, c6.w, r5
mad_pp r3.xyz, r2.x, r3, r12
mad_pp r3.xyz, r2.z, r4, r3
mul r13.xyz, r2.y, c1
mad r12.xyz, r2.x, c0, r13
mad r12.xyz, r2.z, c2, r12
mad r4.xyz, r2.w, c3, r12
add r5.xyz, r9, r10
rcp r0.w, c4.x
mad_pp r3.xyz, r2.w, r6, r3
mul r5.xyz, r2.z, r5
mul r0.w, v3.x, r0
rcp_pp r4.x, r4.x
rcp_pp r4.z, r4.z
rcp_pp r4.y, r4.y
mul_pp r4.xyz, r0, r4
mad_pp r0.xyz, -r3, r4, r0
mul_pp r3.xyz, r3, r4
mul r4.xyz, r5, c6.y
mul r5.xyz, r2.y, r8
mul r2.xyz, r2.x, r7
add_pp r2.xyz, r2, r5
add_pp r2.xyz, r2, r4
mul r4.xyz, r2.w, r11
add_pp r2.xyz, r2, r4
add r4.xyz, r2, r1
pow r2, r0.w, c6.x
dp3 r0.w, r4, r4
rsq r1.w, r0.w
mov r0.w, r2.x
mad_pp r2.xyz, r0.w, r0, r3
mul r3.xyz, r1.w, r4
mad r0.xyz, -r1.w, r4, r1
mad r1.xyz, r0.w, r0, r3
else
mov_pp r2.xyz, r0
endif
texld r0, v5, s13
mul_pp r3.xyz, r0.w, r0
dp3_pp_sat r0.z, r1, c7
dp3_pp_sat r0.x, r1, c9
dp3_pp_sat r0.y, r1, c8
mul_pp r1.xyz, r3, r0
texld r0, v5, s12
dp3_pp r1.w, r1, c7.w
mul_pp r1.xyz, r0.w, r0
texldp r0.xyz, v4, s11
mul_pp r1.xyz, r1, r1.w
log_pp r0.x, r0.x
log_pp r0.z, r0.z
log_pp r0.y, r0.y
mad_pp r0.xyz, r1, c7.w, -r0
mul_pp oC0.xyz, r2, r0
mov_pp oC0.w, c8
"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 11 [_LightBuffer] 2D
"3.0-!!ARBfp1.0
# 36 ALU, 8 TEX
PARAM c[7] = { program.local[0..4],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEX R0, fragment.texcoord[0], texture[1], 2D;
TEX R1.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R2.xyz, R0.y, R1;
MUL R3.xyz, R0.y, c[1];
MAD R3.xyz, R0.x, c[0], R3;
TEX R1.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R1.xyz, R0.x, R1, R2;
MUL R2.xy, fragment.texcoord[1].zwzw, c[6].x;
MAD R4.xyz, R0.z, c[2], R3;
TEX R2.xyz, R2, texture[4], 2D;
MUL R3.xyz, R2, c[6].y;
TEX R2.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R2.xyz, R2, c[5].w, R3;
MAD R0.xyz, R0.z, R2, R1;
MAD R2.xyz, R0.w, c[3], R4;
TEX R1.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R1.xyz, R0.w, R1, R0;
RCP R0.w, c[4].x;
MUL R0.w, fragment.texcoord[3].x, R0;
TEX R0.xyz, fragment.texcoord[0], texture[0], 2D;
POW R0.w, R0.w, c[5].z;
RCP R2.x, R2.x;
RCP R2.y, R2.y;
RCP R2.z, R2.z;
MUL R2.xyz, R0, R2;
MAD R3.xyz, -R1, R2, R0;
MUL R1.xyz, R1, R2;
MAD R2.xyz, R0.w, R3, R1;
SLT R0.w, fragment.texcoord[3].x, c[4].x;
TXP R1.xyz, fragment.texcoord[4], texture[11], 2D;
ABS R0.w, R0;
CMP R0.w, -R0, c[5].x, c[5].y;
ADD R1.xyz, R1, fragment.texcoord[5];
CMP R0.xyz, -R0.w, R0, R2;
MUL result.color.xyz, R0, R1;
MOV result.color.w, c[5].x;
END
# 36 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 11 [_LightBuffer] 2D
"ps_3_0
; 29 ALU, 8 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s11
def c5, -0.50000000, 4.00000000, 0.35009766, 0.64990234
def c6, 0.00000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
texld r3.xyz, v1, s3
texld r0.xyz, v0, s0
mov_pp r6.xyz, r3
mul r4.xy, v1.zwzw, c5.x
texld r1, v0, s1
texld r2.xyz, v0.zwzw, s2
texld r3.xyz, v1.zwzw, s4
texld r4.xyz, r4, s4
texld r5.xyz, v2, s5
if_lt v3.x, c4.x
mul_pp r6.xyz, r1.y, r6
mul_pp r4.xyz, r4, c5.z
rcp r0.w, c4.x
mad_pp r2.xyz, r1.x, r2, r6
mul r7.xyz, r1.y, c1
mad r6.xyz, r1.x, c0, r7
mad r6.xyz, r1.z, c2, r6
mad_pp r3.xyz, r3, c5.w, r4
mad_pp r1.xyz, r1.z, r3, r2
mad r2.xyz, r1.w, c3, r6
mad_pp r1.xyz, r1.w, r5, r1
rcp_pp r2.x, r2.x
rcp_pp r2.y, r2.y
rcp_pp r2.z, r2.z
mul_pp r3.xyz, r0, r2
mul r0.w, v3.x, r0
pow r2, r0.w, c5.y
mad_pp r0.xyz, -r1, r3, r0
mul_pp r1.xyz, r1, r3
mov r0.w, r2.x
mad_pp r1.xyz, r0.w, r0, r1
else
mov_pp r1.xyz, r0
endif
texldp r0.xyz, v4, s11
add_pp r0.xyz, r0, v5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c6.x
"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
Vector 5 [unity_LightmapFade]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 11 [_LightBuffer] 2D
SetTexture 12 [unity_Lightmap] 2D
SetTexture 13 [unity_LightmapInd] 2D
"3.0-!!ARBfp1.0
# 47 ALU, 10 TEX
PARAM c[8] = { program.local[0..5],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766, 8 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEX R0, fragment.texcoord[0], texture[1], 2D;
MUL R1.xyz, R0.y, c[1];
MAD R1.xyz, R0.x, c[0], R1;
MAD R1.xyz, R0.z, c[2], R1;
MAD R3.xyz, R0.w, c[3], R1;
TEX R1.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R4.xyz, R0.y, R1;
MUL R2.xy, fragment.texcoord[1].zwzw, c[7].x;
TEX R1.xyz, R2, texture[4], 2D;
TEX R2.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R2.xyz, R0.x, R2, R4;
MUL R4.xyz, R1, c[7].y;
TEX R1.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R1.xyz, R1, c[6].w, R4;
MAD R0.xyz, R0.z, R1, R2;
RCP R2.x, R3.x;
RCP R2.y, R3.y;
RCP R2.z, R3.z;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R3.xyz, R1, R2;
TEX R2.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R2.xyz, R0.w, R2, R0;
MAD R0.xyz, -R2, R3, R1;
MUL R3.xyz, R2, R3;
RCP R0.w, c[4].x;
MUL R0.w, fragment.texcoord[3].x, R0;
POW R0.w, R0.w, c[6].z;
MAD R0.xyz, R0.w, R0, R3;
TEX R2, fragment.texcoord[5], texture[12], 2D;
MUL R3.xyz, R2.w, R2;
TEX R2, fragment.texcoord[5], texture[13], 2D;
DP4 R0.w, fragment.texcoord[6], fragment.texcoord[6];
MUL R2.xyz, R2.w, R2;
MUL R2.xyz, R2, c[7].z;
RSQ R0.w, R0.w;
RCP R0.w, R0.w;
MAD R3.xyz, R3, c[7].z, -R2;
MAD_SAT R0.w, R0, c[5].z, c[5];
MAD R3.xyz, R0.w, R3, R2;
SLT R0.w, fragment.texcoord[3].x, c[4].x;
TXP R2.xyz, fragment.texcoord[4], texture[11], 2D;
ABS R0.w, R0;
CMP R0.w, -R0, c[6].x, c[6].y;
ADD R2.xyz, R2, R3;
CMP R0.xyz, -R0.w, R1, R0;
MUL result.color.xyz, R0, R2;
MOV result.color.w, c[6].x;
END
# 47 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
Vector 5 [unity_LightmapFade]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 11 [_LightBuffer] 2D
SetTexture 12 [unity_Lightmap] 2D
SetTexture 13 [unity_LightmapInd] 2D
"ps_3_0
; 38 ALU, 10 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s11
dcl_2d s12
dcl_2d s13
def c6, -0.50000000, 4.00000000, 0.35009766, 0.64990234
def c7, 8.00000000, 0.00000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4
dcl_texcoord5 v5.xy
dcl_texcoord6 v6
texld r3.xyz, v1, s3
texld r0.xyz, v0, s0
mov_pp r6.xyz, r3
mul r4.xy, v1.zwzw, c6.x
texld r1, v0, s1
texld r2.xyz, v0.zwzw, s2
texld r3.xyz, v1.zwzw, s4
texld r4.xyz, r4, s4
texld r5.xyz, v2, s5
if_lt v3.x, c4.x
mul_pp r6.xyz, r1.y, r6
mul_pp r4.xyz, r4, c6.z
rcp r0.w, c4.x
mad_pp r2.xyz, r1.x, r2, r6
mul r7.xyz, r1.y, c1
mad r6.xyz, r1.x, c0, r7
mad r6.xyz, r1.z, c2, r6
mad_pp r3.xyz, r3, c6.w, r4
mad_pp r1.xyz, r1.z, r3, r2
mad r2.xyz, r1.w, c3, r6
mad_pp r1.xyz, r1.w, r5, r1
rcp_pp r2.x, r2.x
rcp_pp r2.y, r2.y
rcp_pp r2.z, r2.z
mul_pp r3.xyz, r0, r2
mul r0.w, v3.x, r0
pow r2, r0.w, c6.y
mad_pp r0.xyz, -r1, r3, r0
mul_pp r1.xyz, r1, r3
mov r0.w, r2.x
mad_pp r1.xyz, r0.w, r0, r1
else
mov_pp r1.xyz, r0
endif
texld r0, v5, s12
mul_pp r2.xyz, r0.w, r0
texld r0, v5, s13
mul_pp r0.xyz, r0.w, r0
mul_pp r0.xyz, r0, c7.x
dp4 r1.w, v6, v6
rsq r0.w, r1.w
rcp r0.w, r0.w
mad_pp r2.xyz, r2, c7.x, -r0
mad_sat r0.w, r0, c5.z, c5
mad_pp r2.xyz, r0.w, r2, r0
texldp r0.xyz, v4, s11
add_pp r0.xyz, r0, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c7.y
"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_LightBuffer] 2D
SetTexture 12 [unity_Lightmap] 2D
SetTexture 13 [unity_LightmapInd] 2D
"3.0-!!ARBfp1.0
# 105 ALU, 16 TEX
PARAM c[10] = { program.local[0..4],
		{ 0, 1, 4, 0.64990234 },
		{ -0.5, 0.35009766, 2, 0.5 },
		{ -0.40824828, -0.70710677, 0.57735026, 8 },
		{ -0.40824831, 0.70710677, 0.57735026 },
		{ 0.81649655, 0, 0.57735026 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R2.xy, fragment.texcoord[1].zwzw, c[6].x;
MOV R1.w, c[5].y;
TEX R3.yw, R2, texture[8], 2D;
MAD R1.xy, R3.wyzw, c[6].z, -R1.w;
MUL R2.zw, R1.xyxy, R1.xyxy;
TEX R0.yw, fragment.texcoord[1].zwzw, texture[8], 2D;
MAD R0.xy, R0.wyzw, c[6].z, -R1.w;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD_SAT R1.z, R2, R2.w;
ADD R0.w, -R1.z, c[5].y;
RSQ R0.w, R0.w;
TEX R3.yw, fragment.texcoord[0].zwzw, texture[6], 2D;
MAD R3.xy, R3.wyzw, c[6].z, -R1.w;
ADD R0.z, -R0, c[5].y;
RSQ R0.z, R0.z;
MUL R2.zw, R3.xyxy, R3.xyxy;
RCP R1.z, R0.w;
RCP R0.z, R0.z;
ADD R4.xyz, R0, R1;
ADD_SAT R1.z, R2, R2.w;
TEX R5.yw, fragment.texcoord[1], texture[7], 2D;
MAD R1.xy, R5.wyzw, c[6].z, -R1.w;
MUL R3.zw, R1.xyxy, R1.xyxy;
ADD_SAT R3.z, R3, R3.w;
ADD R2.z, -R3, c[5].y;
TEX R0, fragment.texcoord[0], texture[1], 2D;
RSQ R2.w, R2.z;
ADD R1.z, -R1, c[5].y;
RSQ R2.z, R1.z;
RCP R1.z, R2.w;
RCP R3.z, R2.z;
MUL R3.xyz, R0.x, R3;
MUL R1.xyz, R0.y, R1;
ADD R1.xyz, R3, R1;
MUL R3.xyz, R0.z, R4;
MUL R4.xyz, R3, c[6].w;
TEX R5.yw, fragment.texcoord[2], texture[9], 2D;
MAD R3.xy, R5.wyzw, c[6].z, -R1.w;
ADD R4.xyz, R1, R4;
MUL R1.xy, R3, R3;
ADD_SAT R1.z, R1.x, R1.y;
TEX R5.yw, fragment.texcoord[0], texture[10], 2D;
ADD R2.z, -R1, c[5].y;
MAD R1.xy, R5.wyzw, c[6].z, -R1.w;
MUL R1.zw, R1.xyxy, R1.xyxy;
ADD_SAT R1.z, R1, R1.w;
RSQ R2.z, R2.z;
RCP R3.z, R2.z;
ADD R1.z, -R1, c[5].y;
MUL R3.xyz, R0.w, R3;
RSQ R1.z, R1.z;
RCP R2.z, c[4].x;
MUL R2.z, fragment.texcoord[3].x, R2;
RCP R1.z, R1.z;
ADD R3.xyz, R4, R3;
ADD R4.xyz, R1, R3;
DP3 R1.w, R4, R4;
RSQ R1.w, R1.w;
MAD R3.xyz, -R1.w, R4, R1;
MUL R4.xyz, R1.w, R4;
POW R3.w, R2.z, c[5].z;
SLT R1.w, fragment.texcoord[3].x, c[4].x;
ABS R1.w, R1;
MAD R3.xyz, R3.w, R3, R4;
CMP R2.w, -R1, c[5].x, c[5].y;
CMP R4.xyz, -R2.w, R1, R3;
TEX R1, fragment.texcoord[5], texture[13], 2D;
DP3_SAT R3.z, R4, c[7];
DP3_SAT R3.y, R4, c[8];
DP3_SAT R3.x, R4, c[9];
MUL R1.xyz, R1.w, R1;
MUL R1.xyz, R1, R3;
DP3 R2.z, R1, c[7].w;
MUL R3.xyz, R0.y, c[1];
MAD R3.xyz, R0.x, c[0], R3;
MAD R3.xyz, R0.z, c[2], R3;
TEX R1, fragment.texcoord[5], texture[12], 2D;
MUL R1.xyz, R1.w, R1;
MUL R4.xyz, R1, R2.z;
TEX R1.xyz, fragment.texcoord[1], texture[3], 2D;
MUL R5.xyz, R0.y, R1;
TEX R1.xyz, R2, texture[4], 2D;
TEX R2.xyz, fragment.texcoord[0].zwzw, texture[2], 2D;
MAD R2.xyz, R0.x, R2, R5;
MUL R5.xyz, R1, c[6].y;
TEX R1.xyz, fragment.texcoord[1].zwzw, texture[4], 2D;
MAD R1.xyz, R1, c[5].w, R5;
MAD R0.xyz, R0.z, R1, R2;
MAD R3.xyz, R0.w, c[3], R3;
RCP R2.x, R3.x;
RCP R2.y, R3.y;
RCP R2.z, R3.z;
TEX R1.xyz, fragment.texcoord[0], texture[0], 2D;
MUL R3.xyz, R1, R2;
TEX R2.xyz, fragment.texcoord[2], texture[5], 2D;
MAD R0.xyz, R0.w, R2, R0;
MAD R2.xyz, -R0, R3, R1;
MUL R3.xyz, R0, R3;
TXP R0.xyz, fragment.texcoord[4], texture[11], 2D;
MAD R2.xyz, R3.w, R2, R3;
MAD R0.xyz, R4, c[7].w, R0;
CMP R1.xyz, -R2.w, R1, R2;
MUL result.color.xyz, R1, R0;
MOV result.color.w, c[5].x;
END
# 105 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
Vector 0 [_ColTex0]
Vector 1 [_ColTex1]
Vector 2 [_ColTex2]
Vector 3 [_ColTex3]
Float 4 [_SplattingDistance]
SetTexture 0 [_CustomColorMap] 2D
SetTexture 1 [_Control] 2D
SetTexture 2 [_Splat0] 2D
SetTexture 3 [_Splat1] 2D
SetTexture 4 [_Splat2] 2D
SetTexture 5 [_Splat3] 2D
SetTexture 6 [_BumpMap0] 2D
SetTexture 7 [_BumpMap1] 2D
SetTexture 8 [_BumpMap2] 2D
SetTexture 9 [_BumpMap3] 2D
SetTexture 10 [_TerrainNormalMap] 2D
SetTexture 11 [_LightBuffer] 2D
SetTexture 12 [unity_Lightmap] 2D
SetTexture 13 [unity_LightmapInd] 2D
"ps_3_0
; 91 ALU, 16 TEX, 2 FLOW
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
dcl_2d s10
dcl_2d s11
dcl_2d s12
dcl_2d s13
def c5, -0.50000000, 2.00000000, -1.00000000, 1.00000000
def c6, 4.00000000, 0.50000000, 0.35009766, 0.64990234
def c7, -0.40824828, -0.70710677, 0.57735026, 8.00000000
def c8, -0.40824831, 0.70710677, 0.57735026, 0.00000000
def c9, 0.81649655, 0.00000000, 0.57735026, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3.x
dcl_texcoord4 v4
dcl_texcoord5 v5.xy
mul r9.xy, v1.zwzw, c5.x
texld r1, v0, s1
mov_pp r2, r1
texld r1.xyz, v1, s3
texld r10.yw, r9, s8
texld r11.yw, v2, s9
texld r0.xyz, v0, s0
mov_pp r12.xyz, r1
texld r1.xyz, v1.zwzw, s4
mov_pp r4.xyz, r1
texld r1.xyz, v2, s5
mov_pp r6.xyz, r1
texld r1.yw, v1, s7
mad_pp r8.xy, r1.wyzw, c5.y, c5.z
texld r7.yw, v0.zwzw, s6
mad_pp r7.xy, r7.wyzw, c5.y, c5.z
mul_pp r1.xy, r7, r7
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r8.xyxy, r8.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c5
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c5.w
rsq_pp r1.x, r1.x
texld r1.yw, v1.zwzw, s8
texld r5.xyz, r9, s4
mad_pp r9.xy, r1.wyzw, c5.y, c5.z
rcp_pp r8.z, r1.x
mad_pp r10.xy, r10.wyzw, c5.y, c5.z
mul_pp r1.xy, r9, r9
rcp_pp r7.z, r0.w
add_pp_sat r0.w, r1.x, r1.y
mul_pp r1.zw, r10.xyxy, r10.xyxy
add_pp_sat r1.x, r1.z, r1.w
add_pp r0.w, -r0, c5
rsq_pp r0.w, r0.w
add_pp r1.x, -r1, c5.w
rsq_pp r1.x, r1.x
texld r1.yw, v0, s10
rcp_pp r10.z, r1.x
mad_pp r11.xy, r11.wyzw, c5.y, c5.z
mad_pp r1.xy, r1.wyzw, c5.y, c5.z
mul_pp r1.zw, r11.xyxy, r11.xyxy
rcp_pp r9.z, r0.w
add_pp_sat r0.w, r1.z, r1
mul_pp r11.zw, r1.xyxy, r1.xyxy
add_pp_sat r1.z, r11, r11.w
add_pp r0.w, -r0, c5
add_pp r1.z, -r1, c5.w
rsq_pp r0.w, r0.w
rsq_pp r1.z, r1.z
texld r3.xyz, v0.zwzw, s2
rcp_pp r11.z, r0.w
rcp_pp r1.z, r1.z
if_lt v3.x, c4.x
mul_pp r12.xyz, r2.y, r12
mul_pp r5.xyz, r5, c6.z
mad_pp r4.xyz, r4, c6.w, r5
mad_pp r3.xyz, r2.x, r3, r12
mad_pp r3.xyz, r2.z, r4, r3
mul r13.xyz, r2.y, c1
mad r12.xyz, r2.x, c0, r13
mad r12.xyz, r2.z, c2, r12
mad r4.xyz, r2.w, c3, r12
add r5.xyz, r9, r10
rcp r0.w, c4.x
mad_pp r3.xyz, r2.w, r6, r3
mul r5.xyz, r2.z, r5
mul r0.w, v3.x, r0
rcp_pp r4.x, r4.x
rcp_pp r4.z, r4.z
rcp_pp r4.y, r4.y
mul_pp r4.xyz, r0, r4
mad_pp r0.xyz, -r3, r4, r0
mul_pp r3.xyz, r3, r4
mul r4.xyz, r5, c6.y
mul r5.xyz, r2.y, r8
mul r2.xyz, r2.x, r7
add_pp r2.xyz, r2, r5
add_pp r2.xyz, r2, r4
mul r4.xyz, r2.w, r11
add_pp r2.xyz, r2, r4
add r4.xyz, r2, r1
pow r2, r0.w, c6.x
dp3 r0.w, r4, r4
rsq r1.w, r0.w
mov r0.w, r2.x
mad_pp r2.xyz, r0.w, r0, r3
mul r3.xyz, r1.w, r4
mad r0.xyz, -r1.w, r4, r1
mad r1.xyz, r0.w, r0, r3
else
mov_pp r2.xyz, r0
endif
texld r0, v5, s13
mul_pp r3.xyz, r0.w, r0
dp3_pp_sat r0.z, r1, c7
dp3_pp_sat r0.x, r1, c9
dp3_pp_sat r0.y, r1, c8
mul_pp r1.xyz, r3, r0
texld r0, v5, s12
dp3_pp r1.w, r1, c7.w
mul_pp r1.xyz, r0.w, r0
texldp r0.xyz, v4, s11
mul_pp r1.xyz, r1, r1.w
mad_pp r0.xyz, r1, c7.w, r0
mul_pp oC0.xyz, r2, r0
mov_pp oC0.w, c8
"
}

SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}

}
	}

#LINE 135
  
}

// Fallback to Diffuse
Fallback "Diffuse"
}